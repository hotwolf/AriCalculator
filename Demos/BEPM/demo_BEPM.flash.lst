                                      ;###############################################################################
                                      ;# S12CBase - Demo (BEPM)                                                      #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2015 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This demo application transmits each byte it receives via the SCI.       #
                                      ;#                                                                             #
                                      ;# Usage:                                                                      #
                                      ;#    1. Upload S-Record                                                       #
                                      ;#    2. Execute code at address "START_OF_CODE"                               #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    November 14, 2012                                                        #
                                      ;#      - Initial release                                                      #
                                      ;#    January 30, 2015                                                         #
                                      ;#      - Updated during S12CBASE overhaul                                     #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;# Memory map:
??????        -> $0001                MMAP_S12XEP100          EQU     1               ;S12XEP100
                                      ;# COP
??????        -> $0001                COP_DEBUG               EQU     1               ;disable COP
                                      ;# ISTACK
??????        -> $0001                ISTACK_DEBUG            EQU     1               ;don't call WAI
                                      ;# Vector table
                                      ;# STRING
??????        -> $0001                STRING_FILL_ON          EQU     1               ;STRING_FILL_BL/STRING_FILL_NB enabled
                                      ;###############################################################################
                                      ;# Resource mapping                                                            #
                                      ;###############################################################################
001000 0FD000                                                 ORG     MMAP_RAM_START, MMAP_RAM_START_LIN
                                      ;Variables
001000 0FD000 -> $1000                DEMO_VARS_START         EQU     *
001000 0FD000 -> $FD000               DEMO_VARS_START_LIN     EQU     @
001000 0FD000 -> $1001                BASE_VARS_START         EQU     DEMO_VARS_END
001000 0FD000 -> $FD001               BASE_VARS_START_LIN     EQU     DEMO_VARS_END_LIN
004000 7F4000                                                 ORG     MMAP_FLASH_FD_START, MMAP_FLASH_FD_START_LIN
                                      ;Code
004000 7F4000 -> $4000                START_OF_CODE           EQU     *
004000 7F4000 -> $4000                DEMO_CODE_START         EQU     *
004000 7F4000 -> $7F4000              DEMO_CODE_START_LIN     EQU     @
004000 7F4000 -> $4457                BASE_CODE_START         EQU     DEMO_CODE_END
004000 7F4000 -> $7F4457              BASE_CODE_START_LIN     EQU     DEMO_CODE_END_LIN
                                      ;Tables
004000 7F4000 -> $4B01                DEMO_TABS_START         EQU     BASE_CODE_END
004000 7F4000 -> $7F4B01              DEMO_TABS_START_LIN     EQU     BASE_CODE_END_LIN
004000 7F4000 -> $4B45                BASE_TABS_START         EQU     DEMO_TABS_END
004000 7F4000 -> $7F4B45              BASE_TABS_START_LIN     EQU     DEMO_TABS_END_LIN
                                                              ;Complete last flash phrase
004C3F 7F4C3F                                                 ORG     BASE_TABS_END, BASE_TABS_END_LIN
                                      ;DEMO_FILL              EQU     8-(*&7)
004C3F 7F4C3F FF                                              FILL    $FF, 8-(*&7)
                                      ;###############################################################################
                                      ;# S12CBase - Base Bundle (BEPM)                                               #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2014 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module bundles all standard S12CBase modules into one.              #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    December 28, 2014                                                        #
                                      ;#      - Initial release                                                      #
                                      ;#    January 30, 2015                                                         #
                                      ;#      - Updated during S12CBASE overhaul                                     #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;# Clocks
004C40 7F4C40 -> $0001                CLOCK_CRG               EQU     1               ;old CRG
004C40 7F4C40 -> $F42400              CLOCK_OSC_FREQ          EQU     16000000        ;16 MHz
004C40 7F4C40 -> $2FAF080             CLOCK_BUS_FREQ          EQU     50000000        ;50 MHz
004C40 7F4C40 -> $1E8480              CLOCK_REF_FREQ          EQU     2000000         ;2,000 MHz
004C40 7F4C40 -> $0003                CLOCK_VCOFRQ            EQU     3               ;VCO=100MHz
004C40 7F4C40 -> $0000                CLOCK_REFFRQ            EQU     0               ;Ref=2Mhz
                                      ;# SCI
004C40 7F4C40 -> $0001                SCI_FC_XONXOFF          EQU     1               ;XON/XOFF flow control
004C40 7F4C40 -> $0001                SCI_BD_OFF              EQU     1               ;no baud rate detection
004C40 7F4C40 -> $0001                SCI_BLOCKING_ON         EQU     1               ;blocking functions enbled by default
                                      ;# TIM
004C40 7F4C40 -> $0001                TIM_DIV2_ON             EQU     1               ;run TIM at half bus frequency
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001001 0FD001                                                 ORG     BASE_VARS_START, BASE_VARS_START_LIN
001001 0FD001 -> $1001                GPIO_VARS_START         EQU     *
001001 0FD001 -> $FD001               GPIO_VARS_START_LIN     EQU     @
001001 0FD001                                                 ORG     GPIO_VARS_END, GPIO_VARS_END_LIN
001001 0FD001 -> $1001                MMAP_VARS_START         EQU     *
001001 0FD001 -> $FD001               MMAP_VARS_START_LIN     EQU     @
001001 0FD001                                                 ORG     MMAP_VARS_END, MMAP_VARS_END_LIN
001001 0FD001 -> $1001                SSTACK_VARS_START       EQU     *
001001 0FD001 -> $FD001               SSTACK_VARS_START_LIN   EQU     @
001001 0FD001                                                 ORG     SSTACK_VARS_END, SSTACK_VARS_END_LIN
001001 0FD001 -> $1001                ISTACK_VARS_START       EQU     *
001001 0FD001 -> $FD001               ISTACK_VARS_START_LIN   EQU     @
001025 0FD025                                                 ORG     ISTACK_VARS_END, ISTACK_VARS_END_LIN
001025 0FD025 -> $1025                CLOCK_VARS_START        EQU     *
001025 0FD025 -> $FD025               CLOCK_VARS_START_LIN    EQU     @
001025 0FD025                                                 ORG     CLOCK_VARS_END, CLOCK_VARS_END_LIN
001025 0FD025 -> $1025                COP_VARS_START          EQU     *
001025 0FD025 -> $FD025               COP_VARS_START_LIN      EQU     @
001025 0FD025                                                 ORG     COP_VARS_END, COP_VARS_END_LIN
001025 0FD025 -> $1025                TIM_VARS_START          EQU     *
001025 0FD025 -> $FD025               TIM_VARS_START_LIN      EQU     @
001025 0FD025                                                 ORG     TIM_VARS_END, TIM_VARS_END_LIN
001025 0FD025 -> $1025                SCI_VARS_START          EQU     *
001025 0FD025 -> $FD025               SCI_VARS_START_LIN      EQU     @
001056 0FD056                                                 ORG     SCI_VARS_END, SCI_VARS_END_LIN
001056 0FD056 -> $1056                STRING_VARS_START       EQU     *
001056 0FD056 -> $FD056               STRING_VARS_START_LIN   EQU     @
001056 0FD056                                                 ORG     STRING_VARS_END, STRING_VARS_END_LIN
001056 0FD056 -> $1056                RESET_VARS_START        EQU     *
001056 0FD056 -> $FD056               RESET_VARS_START_LIN    EQU     @
00105A 0FD05A                                                 ORG     RESET_VARS_END, RESET_VARS_END_LIN
00105A 0FD05A -> $105A                NUM_VARS_START          EQU     *
00105A 0FD05A -> $FD05A               NUM_VARS_START_LIN      EQU     @
00105A 0FD05A                                                 ORG     NUM_VARS_END, NUM_VARS_END_LIN
00105A 0FD05A -> $105A                VECTAB_VARS_START       EQU     *
00105A 0FD05A -> $FD05A               VECTAB_VARS_START_LIN   EQU     @
00105A 0FD05A                                                 ORG     VECTAB_VARS_END, VECTAB_VARS_END_LIN
00105A 0FD05A -> $105A                BASE_VARS_END           EQU     *
00105A 0FD05A -> $FD05A               BASE_VARS_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
004457 7F4457                                                 ORG     BASE_CODE_START, BASE_CODE_START_LIN
004457 7F4457 -> $4457                GPIO_CODE_START         EQU     *
004457 7F4457 -> $7F4457              GPIO_CODE_START_LIN     EQU     @
004457 7F4457                                                 ORG     GPIO_CODE_END, GPIO_CODE_END_LIN
004457 7F4457 -> $4457                MMAP_CODE_START         EQU     *
004457 7F4457 -> $7F4457              MMAP_CODE_START_LIN     EQU     @
00445D 7F445D                                                 ORG     MMAP_CODE_END, MMAP_CODE_END_LIN
00445D 7F445D -> $445D                SSTACK_CODE_START       EQU     *
00445D 7F445D -> $7F445D              SSTACK_CODE_START_LIN   EQU     @
004469 7F4469                                                 ORG     SSTACK_CODE_END, SSTACK_CODE_END_LIN
004469 7F4469 -> $4469                ISTACK_CODE_START       EQU     *
004469 7F4469 -> $7F4469              ISTACK_CODE_START_LIN   EQU     @
004469 7F4469                                                 ORG     ISTACK_CODE_END, ISTACK_CODE_END_LIN
004469 7F4469 -> $4469                CLOCK_CODE_START        EQU     *
004469 7F4469 -> $7F4469              CLOCK_CODE_START_LIN    EQU     @
004480 7F4480                                                 ORG     CLOCK_CODE_END, CLOCK_CODE_END_LIN
004480 7F4480 -> $4480                COP_CODE_START          EQU     *
004480 7F4480 -> $7F4480              COP_CODE_START_LIN      EQU     @
004480 7F4480                                                 ORG     COP_CODE_END, COP_CODE_END_LIN
004480 7F4480 -> $4480                TIM_CODE_START          EQU     *
004480 7F4480 -> $7F4480              TIM_CODE_START_LIN      EQU     @
004480 7F4480                                                 ORG     TIM_CODE_END, TIM_CODE_END_LIN
004480 7F4480 -> $4480                SCI_CODE_START          EQU     *
004480 7F4480 -> $7F4480              SCI_CODE_START_LIN      EQU     @
0048A6 7F48A6                                                 ORG     SCI_CODE_END, SCI_CODE_END_LIN
0048A6 7F48A6 -> $48A6                STRING_CODE_START       EQU     *
0048A6 7F48A6 -> $7F48A6              STRING_CODE_START_LIN   EQU     @
0049C6 7F49C6                                                 ORG     STRING_CODE_END, STRING_CODE_END_LIN
0049C6 7F49C6 -> $49C6                RESET_CODE_START        EQU     *
0049C6 7F49C6 -> $7F49C6              RESET_CODE_START_LIN    EQU     @
0049F7 7F49F7                                                 ORG     RESET_CODE_END, RESET_CODE_END_LIN
0049F7 7F49F7 -> $49F7                NUM_CODE_START          EQU     *
0049F7 7F49F7 -> $7F49F7              NUM_CODE_START_LIN      EQU     @
004AFB 7F4AFB                                                 ORG     NUM_CODE_END, NUM_CODE_END_LIN
004AFB 7F4AFB -> $4AFB                VECTAB_CODE_START       EQU     *
004AFB 7F4AFB -> $7F4AFB              VECTAB_CODE_START_LIN   EQU     @
004B01 7F4B01                                                 ORG     VECTAB_CODE_END, VECTAB_CODE_END_LIN
004B01 7F4B01 -> $4B01                BASE_CODE_END           EQU     *
004B01 7F4B01 -> $7F4B01              BASE_CODE_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
004B45 7F4B45                                                 ORG     BASE_TABS_START, BASE_TABS_START_LIN
                                      ;#Welcome message
004B45 7F4B45 48 65 6C 6C 6F 2C 20 74 WELCOME_MESSAGE         FCC     "Hello, this is the S12CBase demo!"
              68 69 73 20 69 73 20 74 
              68 65 20 53 31 32 43 42 
              61 73 65 20 64 65 6D 6F 
              21                      
004B66 7F4B66 MACRO                                           STRING_NL_TERM
                                      ;#Terminated line break                                                          (STRING_NL_TERM)
004B66 7F4B66 0D                                              DB      STRING_SYM_CR                                    (STRING_NL_TERM)
004B67 7F4B67 8A                                              DB      (STRING_SYM_LF|$80)                              (STRING_NL_TERM)
                                      ;#Error message format
004B68 7F4B68 46 41 54 41 4C 20 45 52 ERROR_HEADER            FCS     "FATAL ERROR! "
              52 4F 52 21 A0          
004B75 7F4B75 21                      ERROR_TRAILER           FCC     "!"
004B76 7F4B76 MACRO                                           STRING_NL_TERM
                                      ;#Terminated line break                                                          (STRING_NL_TERM)
004B76 7F4B76 0D                                              DB      STRING_SYM_CR                                    (STRING_NL_TERM)
004B77 7F4B77 8A                                              DB      (STRING_SYM_LF|$80)                              (STRING_NL_TERM)
004B78 7F4B78 -> $4B78                GPIO_TABS_START         EQU     *
004B78 7F4B78 -> $7F4B78              GPIO_TABS_START_LIN     EQU     @
004B78 7F4B78                                                 ORG     GPIO_TABS_END, GPIO_TABS_END_LIN
004B78 7F4B78 -> $4B78                MMAP_TABS_START         EQU     *
004B78 7F4B78 -> $7F4B78              MMAP_TABS_START_LIN     EQU     @
004B81 7F4B81                                                 ORG     MMAP_TABS_END, MMAP_TABS_END_LIN
004B81 7F4B81 -> $4B81                SSTACK_TABS_START       EQU     *
004B81 7F4B81 -> $7F4B81              SSTACK_TABS_START_LIN   EQU     @
004BB8 7F4BB8                                                 ORG     SSTACK_TABS_END, SSTACK_TABS_END_LIN
004BB8 7F4BB8 -> $4BB8                ISTACK_TABS_START       EQU     *
004BB8 7F4BB8 -> $7F4BB8              ISTACK_TABS_START_LIN   EQU     @
004BB8 7F4BB8                                                 ORG     ISTACK_TABS_END, ISTACK_TABS_END_LIN
004BB8 7F4BB8 -> $4BB8                CLOCK_TABS_START        EQU     *
004BB8 7F4BB8 -> $7F4BB8              CLOCK_TABS_START_LIN    EQU     @
004BB8 7F4BB8                                                 ORG     CLOCK_TABS_END, CLOCK_TABS_END_LIN
004BB8 7F4BB8 -> $4BB8                COP_TABS_START          EQU     *
004BB8 7F4BB8 -> $7F4BB8              COP_TABS_START_LIN      EQU     @
004BB8 7F4BB8                                                 ORG     COP_TABS_END, COP_TABS_END_LIN
004BB8 7F4BB8 -> $4BB8                TIM_TABS_START          EQU     *
004BB8 7F4BB8 -> $7F4BB8              TIM_TABS_START_LIN      EQU     @
004BB8 7F4BB8                                                 ORG     TIM_TABS_END, TIM_TABS_END_LIN
004BB8 7F4BB8 -> $4BB8                SCI_TABS_START          EQU     *
004BB8 7F4BB8 -> $7F4BB8              SCI_TABS_START_LIN      EQU     @
004BC8 7F4BC8                                                 ORG     SCI_TABS_END, SCI_TABS_END_LIN
004BC8 7F4BC8 -> $4BC8                STRING_TABS_START       EQU     *
004BC8 7F4BC8 -> $7F4BC8              STRING_TABS_START_LIN   EQU     @
004BCB 7F4BCB                                                 ORG     STRING_TABS_END, STRING_TABS_END_LIN
004BCB 7F4BCB -> $4BCB                RESET_TABS_START        EQU     *
004BCB 7F4BCB -> $7F4BCB              RESET_TABS_START_LIN    EQU     @
004C18 7F4C18                                                 ORG     RESET_TABS_END, RESET_TABS_END_LIN
004C18 7F4C18 -> $4C18                NUM_TABS_START          EQU     *
004C18 7F4C18 -> $7F4C18              NUM_TABS_START_LIN      EQU     @
004C29 7F4C29                                                 ORG     NUM_TABS_END, NUM_TABS_END_LIN
004C29 7F4C29 -> $4C29                VECTAB_TABS_START       EQU     *
004C29 7F4C29 -> $7F4C29              VECTAB_TABS_START_LIN   EQU     @
004C3F 7F4C3F                                                 ORG     VECTAB_TABS_END, VECTAB_TABS_END_LIN
004C3F 7F4C3F -> $4C3F                BASE_TABS_END           EQU     *
004C3F 7F4C3F -> $7F4C3F              BASE_TABS_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Includes                                                                    #
                                      ;###############################################################################
004C3F 7F4C3F S12X CODE:                                      CPU     S12X
                                      ;###############################################################################
                                      ;# S12CBase - REGDEF - Register Definitions (BEPM)                             #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2014 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module defines the register map of the S12XEP100.                   #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    - none                                                                   #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    December 28, 2014                                                        #
                                      ;#      - Initial release                                                      #
                                      ;###############################################################################
                                      ;##################################
                                      ;# S12XEP100 Register Definitions #
                                      ;##################################
004C3F 7F4C3F -> $0000                PORTA           EQU     $0000
004C3F 7F4C3F -> $0080                PTA7            EQU     $80
004C3F 7F4C3F -> $0040                PTA6            EQU     $40
004C3F 7F4C3F -> $0020                PTA5            EQU     $20
004C3F 7F4C3F -> $0010                PTA4            EQU     $10
004C3F 7F4C3F -> $0008                PTA3            EQU     $08
004C3F 7F4C3F -> $0004                PTA2            EQU     $04
004C3F 7F4C3F -> $0002                PTA1            EQU     $02
004C3F 7F4C3F -> $0001                PTA0            EQU     $01
004C3F 7F4C3F -> $0080                PA7             EQU     $80
004C3F 7F4C3F -> $0040                PA6             EQU     $40
004C3F 7F4C3F -> $0020                PA5             EQU     $20
004C3F 7F4C3F -> $0010                PA4             EQU     $10
004C3F 7F4C3F -> $0008                PA3             EQU     $08
004C3F 7F4C3F -> $0004                PA2             EQU     $04
004C3F 7F4C3F -> $0002                PA1             EQU     $02
004C3F 7F4C3F -> $0001                PA0             EQU     $01
004C3F 7F4C3F -> $0001                PORTB           EQU     $0001
004C3F 7F4C3F -> $0080                PTB7            EQU     $80
004C3F 7F4C3F -> $0040                PTB6            EQU     $40
004C3F 7F4C3F -> $0020                PTB5            EQU     $20
004C3F 7F4C3F -> $0010                PTB4            EQU     $10
004C3F 7F4C3F -> $0008                PTB3            EQU     $08
004C3F 7F4C3F -> $0004                PTB2            EQU     $04
004C3F 7F4C3F -> $0002                PTB1            EQU     $02
004C3F 7F4C3F -> $0001                PTB0            EQU     $01
004C3F 7F4C3F -> $0080                PB7             EQU     $80
004C3F 7F4C3F -> $0040                PB6             EQU     $40
004C3F 7F4C3F -> $0020                PB5             EQU     $20
004C3F 7F4C3F -> $0010                PB4             EQU     $10
004C3F 7F4C3F -> $0008                PB3             EQU     $08
004C3F 7F4C3F -> $0004                PB2             EQU     $04
004C3F 7F4C3F -> $0002                PB1             EQU     $02
004C3F 7F4C3F -> $0001                PB0             EQU     $01
004C3F 7F4C3F -> $0002                DDRA            EQU     $0002
004C3F 7F4C3F -> $0080                DDRA7           EQU     $80
004C3F 7F4C3F -> $0040                DDRA6           EQU     $40
004C3F 7F4C3F -> $0020                DDRA5           EQU     $20
004C3F 7F4C3F -> $0010                DDRA4           EQU     $10
004C3F 7F4C3F -> $0008                DDRA3           EQU     $08
004C3F 7F4C3F -> $0004                DDRA2           EQU     $04
004C3F 7F4C3F -> $0002                DDRA1           EQU     $02
004C3F 7F4C3F -> $0001                DDRA0           EQU     $01
004C3F 7F4C3F -> $0003                DDRB            EQU     $0003
004C3F 7F4C3F -> $0080                DDRB7           EQU     $80
004C3F 7F4C3F -> $0040                DDRB6           EQU     $40
004C3F 7F4C3F -> $0020                DDRB5           EQU     $20
004C3F 7F4C3F -> $0010                DDRB4           EQU     $10
004C3F 7F4C3F -> $0008                DDRB3           EQU     $08
004C3F 7F4C3F -> $0004                DDRB2           EQU     $04
004C3F 7F4C3F -> $0002                DDRB1           EQU     $02
004C3F 7F4C3F -> $0001                DDRB0           EQU     $01
004C3F 7F4C3F -> $0004                PORTC           EQU     $0004
004C3F 7F4C3F -> $0080                PTC7            EQU     $80
004C3F 7F4C3F -> $0040                PTC6            EQU     $40
004C3F 7F4C3F -> $0020                PTC5            EQU     $20
004C3F 7F4C3F -> $0010                PTC4            EQU     $10
004C3F 7F4C3F -> $0008                PTC3            EQU     $08
004C3F 7F4C3F -> $0004                PTC2            EQU     $04
004C3F 7F4C3F -> $0002                PTC1            EQU     $02
004C3F 7F4C3F -> $0001                PTC0            EQU     $01
004C3F 7F4C3F -> $0080                PC7             EQU     $80
004C3F 7F4C3F -> $0040                PC6             EQU     $40
004C3F 7F4C3F -> $0020                PC5             EQU     $20
004C3F 7F4C3F -> $0010                PC4             EQU     $10
004C3F 7F4C3F -> $0008                PC3             EQU     $08
004C3F 7F4C3F -> $0004                PC2             EQU     $04
004C3F 7F4C3F -> $0002                PC1             EQU     $02
004C3F 7F4C3F -> $0001                PC0             EQU     $01
004C3F 7F4C3F -> $0005                PORTD           EQU     $0005
004C3F 7F4C3F -> $0080                PTD7            EQU     $80
004C3F 7F4C3F -> $0040                PTD6            EQU     $40
004C3F 7F4C3F -> $0020                PTD5            EQU     $20
004C3F 7F4C3F -> $0010                PTD4            EQU     $10
004C3F 7F4C3F -> $0008                PTD3            EQU     $08
004C3F 7F4C3F -> $0004                PTD2            EQU     $04
004C3F 7F4C3F -> $0002                PTD1            EQU     $02
004C3F 7F4C3F -> $0001                PTD0            EQU     $01
004C3F 7F4C3F -> $0080                PD7             EQU     $80
004C3F 7F4C3F -> $0040                PD6             EQU     $40
004C3F 7F4C3F -> $0020                PD5             EQU     $20
004C3F 7F4C3F -> $0010                PD4             EQU     $10
004C3F 7F4C3F -> $0008                PD3             EQU     $08
004C3F 7F4C3F -> $0004                PD2             EQU     $04
004C3F 7F4C3F -> $0002                PD1             EQU     $02
004C3F 7F4C3F -> $0001                PD0             EQU     $01
004C3F 7F4C3F -> $0006                DDRC            EQU     $0006
004C3F 7F4C3F -> $0080                DDRC7           EQU     $80
004C3F 7F4C3F -> $0040                DDRC6           EQU     $40
004C3F 7F4C3F -> $0020                DDRC5           EQU     $20
004C3F 7F4C3F -> $0010                DDRC4           EQU     $10
004C3F 7F4C3F -> $0008                DDRC3           EQU     $08
004C3F 7F4C3F -> $0004                DDRC2           EQU     $04
004C3F 7F4C3F -> $0007                DDRD            EQU     $0007
004C3F 7F4C3F -> $0080                DDRD7           EQU     $80
004C3F 7F4C3F -> $0040                DDRD6           EQU     $40
004C3F 7F4C3F -> $0020                DDRD5           EQU     $20
004C3F 7F4C3F -> $0010                DDRD4           EQU     $10
004C3F 7F4C3F -> $0008                DDRD3           EQU     $08
004C3F 7F4C3F -> $0004                DDRD2           EQU     $04
004C3F 7F4C3F -> $0008                PORTE           EQU     $0008
004C3F 7F4C3F -> $0080                PTE7            EQU     $80
004C3F 7F4C3F -> $0040                PTE6            EQU     $40
004C3F 7F4C3F -> $0020                PTE5            EQU     $20
004C3F 7F4C3F -> $0010                PTE4            EQU     $10
004C3F 7F4C3F -> $0008                PTE3            EQU     $08
004C3F 7F4C3F -> $0004                PTE2            EQU     $04
004C3F 7F4C3F -> $0002                PTE1            EQU     $02
004C3F 7F4C3F -> $0001                PTE0            EQU     $01
004C3F 7F4C3F -> $0080                PE7             EQU     $80
004C3F 7F4C3F -> $0040                PE6             EQU     $40
004C3F 7F4C3F -> $0020                PE5             EQU     $20
004C3F 7F4C3F -> $0010                PE4             EQU     $10
004C3F 7F4C3F -> $0008                PE3             EQU     $08
004C3F 7F4C3F -> $0004                PE2             EQU     $04
004C3F 7F4C3F -> $0002                PE1             EQU     $02
004C3F 7F4C3F -> $0001                PE0             EQU     $01
004C3F 7F4C3F -> $0009                DDRE            EQU     $0009
004C3F 7F4C3F -> $0080                DDRE7           EQU     $80
004C3F 7F4C3F -> $0040                DDRE6           EQU     $40
004C3F 7F4C3F -> $0020                DDRE5           EQU     $20
004C3F 7F4C3F -> $0010                DDRE4           EQU     $10
004C3F 7F4C3F -> $0008                DDRE3           EQU     $08
004C3F 7F4C3F -> $0004                DDRE2           EQU     $04
004C3F 7F4C3F -> $000A                MMCCTL0         EQU     $000A
004C3F 7F4C3F -> $0080                CS3E1           EQU     $80
004C3F 7F4C3F -> $0040                CS3E0           EQU     $40
004C3F 7F4C3F -> $0020                CS2E1           EQU     $20
004C3F 7F4C3F -> $0010                CS2E0           EQU     $10
004C3F 7F4C3F -> $0008                CS1E1           EQU     $08
004C3F 7F4C3F -> $0004                CS1E0           EQU     $04
004C3F 7F4C3F -> $0002                CS0E1           EQU     $02
004C3F 7F4C3F -> $0001                CS0E0           EQU     $01
004C3F 7F4C3F -> $000B                MODE            EQU     $000B
004C3F 7F4C3F -> $0080                MODC            EQU     $80
004C3F 7F4C3F -> $0040                MODB            EQU     $40
004C3F 7F4C3F -> $0020                MODA            EQU     $20
004C3F 7F4C3F -> $000C                PUCR            EQU     $000C
004C3F 7F4C3F -> $0080                PUPKE           EQU     $80
004C3F 7F4C3F -> $0040                BKPUE           EQU     $40
004C3F 7F4C3F -> $0010                PUPEE           EQU     $10
004C3F 7F4C3F -> $0008                PUPDE           EQU     $08
004C3F 7F4C3F -> $0004                PUPCE           EQU     $04
004C3F 7F4C3F -> $0002                PUPBE           EQU     $02
004C3F 7F4C3F -> $0001                PUPAE           EQU     $01
004C3F 7F4C3F -> $000D                RDRIV           EQU     $000D
004C3F 7F4C3F -> $0080                RDPK            EQU     $80
004C3F 7F4C3F -> $0010                RDPE            EQU     $10
004C3F 7F4C3F -> $0008                RDPD            EQU     $08
004C3F 7F4C3F -> $0004                RDPC            EQU     $04
004C3F 7F4C3F -> $0002                RDPB            EQU     $02
004C3F 7F4C3F -> $0001                RDPA            EQU     $01
004C3F 7F4C3F -> $000E                EBICTL0         EQU     $000E
004C3F 7F4C3F -> $0080                ITHRS           EQU     $80
004C3F 7F4C3F -> $0040                HDBE            EQU     $40
004C3F 7F4C3F -> $0010                ASIZ4           EQU     $10
004C3F 7F4C3F -> $0008                ASIZ3           EQU     $08
004C3F 7F4C3F -> $0004                ASIZ2           EQU     $04
004C3F 7F4C3F -> $0002                ASIZ1           EQU     $02
004C3F 7F4C3F -> $0001                ASIZ0           EQU     $01
004C3F 7F4C3F -> $000F                EBICTL1         EQU     $000F
004C3F 7F4C3F -> $0040                EXSTR12         EQU     $40
004C3F 7F4C3F -> $0020                EXSTR11         EQU     $20
004C3F 7F4C3F -> $0010                EXSTR10         EQU     $10
004C3F 7F4C3F -> $0004                EXSTR02         EQU     $04
004C3F 7F4C3F -> $0002                EXSTR01         EQU     $02
004C3F 7F4C3F -> $0001                EXSTR00         EQU     $01
004C3F 7F4C3F -> $0010                GPAGE           EQU     $0010
004C3F 7F4C3F -> $0040                GP6             EQU     $40
004C3F 7F4C3F -> $0020                GP5             EQU     $20
004C3F 7F4C3F -> $0010                GP4             EQU     $10
004C3F 7F4C3F -> $0008                GP3             EQU     $08
004C3F 7F4C3F -> $0004                GP2             EQU     $04
004C3F 7F4C3F -> $0002                GP1             EQU     $02
004C3F 7F4C3F -> $0001                GP0             EQU     $01
004C3F 7F4C3F -> $0011                DIRECT          EQU     $0011
004C3F 7F4C3F -> $0080                DP15            EQU     $80
004C3F 7F4C3F -> $0040                DP14            EQU     $40
004C3F 7F4C3F -> $0020                DP13            EQU     $20
004C3F 7F4C3F -> $0010                DP12            EQU     $10
004C3F 7F4C3F -> $0008                DP11            EQU     $08
004C3F 7F4C3F -> $0004                DP10            EQU     $04
004C3F 7F4C3F -> $0002                DP9             EQU     $02
004C3F 7F4C3F -> $0001                DP8             EQU     $01
                                      ;$0012 reserved
004C3F 7F4C3F -> $0013                MMCCTL1         EQU     $0013
004C3F 7F4C3F -> $0080                TGMRAMON        EQU     $80
004C3F 7F4C3F -> $0020                EEEIFRON        EQU     $20
004C3F 7F4C3F -> $0010                PGMIFRON        EQU     $10
004C3F 7F4C3F -> $0008                RAMHM           EQU     $08
004C3F 7F4C3F -> $0004                EROMON          EQU     $04
004C3F 7F4C3F -> $0002                ROMHM           EQU     $02
004C3F 7F4C3F -> $0001                ROMON           EQU     $01
                                      ;$0014 reserved
004C3F 7F4C3F -> $0015                PPAGE           EQU     $0015
004C3F 7F4C3F -> $0080                PIX7            EQU     $80
004C3F 7F4C3F -> $0040                PIX6            EQU     $40
004C3F 7F4C3F -> $0020                PIX5            EQU     $20
004C3F 7F4C3F -> $0010                PIX4            EQU     $10
004C3F 7F4C3F -> $0008                PIX3            EQU     $08
004C3F 7F4C3F -> $0004                PIX2            EQU     $04
004C3F 7F4C3F -> $0002                PIX1            EQU     $02
004C3F 7F4C3F -> $0001                PIX0            EQU     $01
004C3F 7F4C3F -> $0016                RPAGE           EQU     $0016
004C3F 7F4C3F -> $0080                RP7             EQU     $80
004C3F 7F4C3F -> $0040                RP6             EQU     $40
004C3F 7F4C3F -> $0020                RP5             EQU     $20
004C3F 7F4C3F -> $0010                RP4             EQU     $10
004C3F 7F4C3F -> $0008                RP3             EQU     $08
004C3F 7F4C3F -> $0004                RP2             EQU     $04
004C3F 7F4C3F -> $0002                RP1             EQU     $02
004C3F 7F4C3F -> $0001                RP0             EQU     $01
004C3F 7F4C3F -> $0017                EPAGE           EQU     $0017
004C3F 7F4C3F -> $0080                EP7             EQU     $80
004C3F 7F4C3F -> $0040                EP6             EQU     $40
004C3F 7F4C3F -> $0020                EP5             EQU     $20
004C3F 7F4C3F -> $0010                EP4             EQU     $10
004C3F 7F4C3F -> $0008                EP3             EQU     $08
004C3F 7F4C3F -> $0004                EP2             EQU     $04
004C3F 7F4C3F -> $0002                EP1             EQU     $02
004C3F 7F4C3F -> $0001                EP0             EQU     $01
                                      ;$0018 to $0019 reserved
004C3F 7F4C3F -> $001A                PARTIDH         EQU     $001A
004C3F 7F4C3F -> $0080                ID15            EQU     $80
004C3F 7F4C3F -> $0040                ID14            EQU     $40
004C3F 7F4C3F -> $0020                ID13            EQU     $20
004C3F 7F4C3F -> $0010                ID12            EQU     $10
004C3F 7F4C3F -> $0008                ID11            EQU     $08
004C3F 7F4C3F -> $0004                ID10            EQU     $04
004C3F 7F4C3F -> $0002                ID9             EQU     $02
004C3F 7F4C3F -> $0001                ID8             EQU     $01
004C3F 7F4C3F -> $001B                PARTIDL         EQU     $001B
004C3F 7F4C3F -> $0080                ID7             EQU     $80
004C3F 7F4C3F -> $0040                ID6             EQU     $40
004C3F 7F4C3F -> $0020                ID5             EQU     $20
004C3F 7F4C3F -> $0010                ID4             EQU     $10
004C3F 7F4C3F -> $0008                ID3             EQU     $08
004C3F 7F4C3F -> $0004                ID2             EQU     $04
004C3F 7F4C3F -> $0002                ID1             EQU     $02
004C3F 7F4C3F -> $0001                ID0             EQU     $01
004C3F 7F4C3F -> $001C                ECLKCTL         EQU     $001C
004C3F 7F4C3F -> $0080                NECLK           EQU     $80
004C3F 7F4C3F -> $0040                NCLKX2          EQU     $40
004C3F 7F4C3F -> $0020                DIV16           EQU     $20
004C3F 7F4C3F -> $0010                EDIV4           EQU     $10
004C3F 7F4C3F -> $0008                EDIV3           EQU     $08
004C3F 7F4C3F -> $0004                EDIV2           EQU     $04
004C3F 7F4C3F -> $0002                EDIV1           EQU     $02
004C3F 7F4C3F -> $0001                EDIV0           EQU     $01
                                      ;$001D reserved
004C3F 7F4C3F -> $001E                IRQCR           EQU     $001E
004C3F 7F4C3F -> $0080                IRQE            EQU     $80
004C3F 7F4C3F -> $0040                IRQEN           EQU     $40
                                      ;$001F reserved
004C3F 7F4C3F -> $0020                DBGC1           EQU     $0020
004C3F 7F4C3F -> $0080                ARM             EQU     $80
004C3F 7F4C3F -> $0040                TRIG            EQU     $40
004C3F 7F4C3F -> $0020                XGSBPE          EQU     $20
004C3F 7F4C3F -> $0010                BDM             EQU     $10
004C3F 7F4C3F -> $0004                DBGBRK          EQU     $04
004C3F 7F4C3F -> $0001                COMRV           EQU     $01
004C3F 7F4C3F -> $0021                DBGSR           EQU     $0021
004C3F 7F4C3F -> $0080                TBF             EQU     $80
004C3F 7F4C3F -> $0040                EXTF            EQU     $40
004C3F 7F4C3F -> $0004                SSF2            EQU     $04
004C3F 7F4C3F -> $0002                SSF1            EQU     $02
004C3F 7F4C3F -> $0001                SSF0            EQU     $01
004C3F 7F4C3F -> $0022                DBGTCR          EQU     $0022
004C3F 7F4C3F -> $00C0                TSOURCE         EQU     $C0
004C3F 7F4C3F -> $0030                TRANGE          EQU     $30
004C3F 7F4C3F -> $000C                TRCMOD          EQU     $0C
004C3F 7F4C3F -> $0003                TALIGN          EQU     $03
004C3F 7F4C3F -> $0023                DBGC2           EQU     $0023
004C3F 7F4C3F -> $000C                CDCM            EQU     $0C
004C3F 7F4C3F -> $0003                ABCM            EQU     $03
004C3F 7F4C3F -> $0024                DBGTBH          EQU     $0024
004C3F 7F4C3F -> $0080                DBGTB15         EQU     $80
004C3F 7F4C3F -> $0040                DBGTB14         EQU     $40
004C3F 7F4C3F -> $0020                DBGTB13         EQU     $20
004C3F 7F4C3F -> $0010                DBGTB12         EQU     $10
004C3F 7F4C3F -> $0008                DBGTB11         EQU     $08
004C3F 7F4C3F -> $0004                DBGTB10         EQU     $04
004C3F 7F4C3F -> $0002                DBGTB9          EQU     $02
004C3F 7F4C3F -> $0001                DBGTB8          EQU     $01
004C3F 7F4C3F -> $0025                DBGTBL          EQU     $0025
004C3F 7F4C3F -> $0080                DBGTB7          EQU     $80
004C3F 7F4C3F -> $0040                DBGTB6          EQU     $40
004C3F 7F4C3F -> $0020                DBGTB5          EQU     $20
004C3F 7F4C3F -> $0010                DBGTB4          EQU     $10
004C3F 7F4C3F -> $0008                DBGTB3          EQU     $08
004C3F 7F4C3F -> $0004                DBGTB2          EQU     $04
004C3F 7F4C3F -> $0002                DBGTB1          EQU     $02
004C3F 7F4C3F -> $0001                DBGTB0          EQU     $01
004C3F 7F4C3F -> $0026                DBGCNT          EQU     $0026
004C3F 7F4C3F -> $0027                DBGSCRX         EQU     $0027
004C3F 7F4C3F -> $0008                SC3             EQU     $08
004C3F 7F4C3F -> $0004                SC2             EQU     $04
004C3F 7F4C3F -> $0002                SC1             EQU     $02
004C3F 7F4C3F -> $0001                SC0             EQU     $01
004C3F 7F4C3F -> $0027                DBGMFR          EQU     $0027
004C3F 7F4C3F -> $0008                MC3             EQU     $08
004C3F 7F4C3F -> $0004                MC2             EQU     $04
004C3F 7F4C3F -> $0002                MC1             EQU     $02
004C3F 7F4C3F -> $0001                MC0             EQU     $01
004C3F 7F4C3F -> $0028                DBGXCTL         EQU     $0028
004C3F 7F4C3F -> $0080                SZE             EQU     $80
004C3F 7F4C3F -> $0040                SZ              EQU     $40
004C3F 7F4C3F -> $0020                TAG             EQU     $20
004C3F 7F4C3F -> $0010                BRK             EQU     $10
004C3F 7F4C3F -> $0008                RW              EQU     $08
004C3F 7F4C3F -> $0004                RWE             EQU     $04
004C3F 7F4C3F -> $0002                SRC             EQU     $02
004C3F 7F4C3F -> $0001                COMPE           EQU     $01
004C3F 7F4C3F -> $0029                DBGXAH          EQU    $0029
004C3F 7F4C3F -> $0040                DBGXA22         EQU    $40
004C3F 7F4C3F -> $0020                DBGXA21         EQU    $20
004C3F 7F4C3F -> $0010                DBGXA20         EQU    $10
004C3F 7F4C3F -> $0008                DBGXA19         EQU    $08
004C3F 7F4C3F -> $0004                DBGXA18         EQU    $04
004C3F 7F4C3F -> $0002                DBGXA17         EQU    $02
004C3F 7F4C3F -> $0001                DBGXA16         EQU    $01
004C3F 7F4C3F -> $002A                DBGXAM          EQU     $002A
004C3F 7F4C3F -> $0080                DBGXA15         EQU     $80
004C3F 7F4C3F -> $0040                DBGXA14         EQU     $40
004C3F 7F4C3F -> $0020                DBGXA13         EQU     $20
004C3F 7F4C3F -> $0010                DBGXA12         EQU     $10
004C3F 7F4C3F -> $0008                DBGXA11         EQU     $08
004C3F 7F4C3F -> $0004                DBGXA10         EQU     $04
004C3F 7F4C3F -> $0002                DBGXA9          EQU     $02
004C3F 7F4C3F -> $0001                DBGXA8          EQU     $01
004C3F 7F4C3F -> $002B                DBGXAL          EQU     $002B
004C3F 7F4C3F -> $0080                DBGXA7          EQU     $80
004C3F 7F4C3F -> $0040                DBGXA6          EQU     $40
004C3F 7F4C3F -> $0020                DBGXA5          EQU     $20
004C3F 7F4C3F -> $0010                DBGXA4          EQU     $10
004C3F 7F4C3F -> $0008                DBGXA3          EQU     $08
004C3F 7F4C3F -> $0004                DBGXA2          EQU     $04
004C3F 7F4C3F -> $0002                DBGXA1          EQU     $02
004C3F 7F4C3F -> $0001                DBGXA0          EQU     $01
004C3F 7F4C3F -> $002C                DBGXDH          EQU     $002C
004C3F 7F4C3F -> $0080                DBGXD15         EQU     $80
004C3F 7F4C3F -> $0040                DBGXD14         EQU     $40
004C3F 7F4C3F -> $0020                DBGXD13         EQU     $20
004C3F 7F4C3F -> $0010                DBGXD12         EQU     $10
004C3F 7F4C3F -> $0008                DBGXD11         EQU     $08
004C3F 7F4C3F -> $0004                DBGXD10         EQU     $04
004C3F 7F4C3F -> $0002                DBGXD9          EQU     $02
004C3F 7F4C3F -> $0001                DBGXD8          EQU     $01
004C3F 7F4C3F -> $002D                DBGXDL          EQU     $002D
004C3F 7F4C3F -> $0080                DBGXD7          EQU     $80
004C3F 7F4C3F -> $0040                DBGXD6          EQU     $40
004C3F 7F4C3F -> $0020                DBGXD5          EQU     $20
004C3F 7F4C3F -> $0010                DBGXD4          EQU     $10
004C3F 7F4C3F -> $0008                DBGXD3          EQU     $08
004C3F 7F4C3F -> $0004                DBGXD2          EQU     $04
004C3F 7F4C3F -> $0002                DBGXD1          EQU     $02
004C3F 7F4C3F -> $0001                DBGXD0          EQU     $01
004C3F 7F4C3F -> $002E                DBGXDHM         EQU     $002E
004C3F 7F4C3F -> $0080                DBGXDM15        EQU     $80
004C3F 7F4C3F -> $0040                DBGXDM14        EQU     $40
004C3F 7F4C3F -> $0020                DBGXDM13        EQU     $20
004C3F 7F4C3F -> $0010                DBGXDM12        EQU     $10
004C3F 7F4C3F -> $0008                DBGXDM11        EQU     $08
004C3F 7F4C3F -> $0004                DBGXDM10        EQU     $04
004C3F 7F4C3F -> $0002                DBGXDM9         EQU     $02
004C3F 7F4C3F -> $0001                DBGXDM8         EQU     $01
004C3F 7F4C3F -> $002F                DBGXDLM         EQU     $002F
004C3F 7F4C3F -> $0080                DBGXDM7         EQU     $80
004C3F 7F4C3F -> $0040                DBGXDM6         EQU     $40
004C3F 7F4C3F -> $0020                DBGXDM5         EQU     $20
004C3F 7F4C3F -> $0010                DBGXDM4         EQU     $10
004C3F 7F4C3F -> $0008                DBGXDM3         EQU     $08
004C3F 7F4C3F -> $0004                DBGXDM2         EQU     $04
004C3F 7F4C3F -> $0002                DBGXDM1         EQU     $02
004C3F 7F4C3F -> $0001                DBGXDM0         EQU     $01
                                      ;$0030 to $0031 reserved
004C3F 7F4C3F -> $0032                PORTK           EQU     $0032
004C3F 7F4C3F -> $0080                PTK7            EQU     $80
004C3F 7F4C3F -> $0040                PTK6            EQU     $40
004C3F 7F4C3F -> $0020                PTK5            EQU     $20
004C3F 7F4C3F -> $0010                PTK4            EQU     $10
004C3F 7F4C3F -> $0008                PTK3            EQU     $08
004C3F 7F4C3F -> $0004                PTK2            EQU     $04
004C3F 7F4C3F -> $0002                PTK1            EQU     $02
004C3F 7F4C3F -> $0001                PK0             EQU     $01
004C3F 7F4C3F -> $0080                PK7             EQU     $80
004C3F 7F4C3F -> $0040                PK6             EQU     $40
004C3F 7F4C3F -> $0020                PK5             EQU     $20
004C3F 7F4C3F -> $0010                PK4             EQU     $10
004C3F 7F4C3F -> $0008                PK3             EQU     $08
004C3F 7F4C3F -> $0004                PK2             EQU     $04
004C3F 7F4C3F -> $0002                PK1             EQU     $02
004C3F 7F4C3F -> $0001                PK0             EQU     $01
004C3F 7F4C3F -> $0033                DDRK            EQU     $0033
004C3F 7F4C3F -> $0080                DDRK7           EQU     $80
004C3F 7F4C3F -> $0040                DDRK6           EQU     $40
004C3F 7F4C3F -> $0020                DDRK5           EQU     $20
004C3F 7F4C3F -> $0010                DDRK4           EQU     $10
004C3F 7F4C3F -> $0008                DDRK3           EQU     $08
004C3F 7F4C3F -> $0004                DDRK2           EQU     $04
004C3F 7F4C3F -> $0002                DDRK1           EQU     $02
004C3F 7F4C3F -> $0001                DDRK0           EQU     $01
004C3F 7F4C3F -> $0034                SYNR            EQU     $0034
004C3F 7F4C3F -> $0080                VCOFRQ1         EQU     $80
004C3F 7F4C3F -> $0040                VCOFRQ0         EQU     $40
004C3F 7F4C3F -> $0020                SYNDIV5         EQU     $20
004C3F 7F4C3F -> $0010                SYNDIV4         EQU     $10
004C3F 7F4C3F -> $0008                SYNDIV3         EQU     $08
004C3F 7F4C3F -> $0004                SYNDIV2         EQU     $04
004C3F 7F4C3F -> $0002                SYNDIV1         EQU     $02
004C3F 7F4C3F -> $0001                SYNDIV0         EQU     $01
004C3F 7F4C3F -> $0035                REFDV           EQU     $0035
004C3F 7F4C3F -> $0080                REFFRQ1         EQU     $80
004C3F 7F4C3F -> $0040                REFFRQ0         EQU     $40
004C3F 7F4C3F -> $0008                REFDIV3         EQU     $08
004C3F 7F4C3F -> $0004                REFDIV2         EQU     $04
004C3F 7F4C3F -> $0002                REFDIV1         EQU     $02
004C3F 7F4C3F -> $0001                REFDIV0         EQU     $01
004C3F 7F4C3F -> $0036                POSTDIV         EQU     $0036
004C3F 7F4C3F -> $0010                POSTDIV4        EQU     $10
004C3F 7F4C3F -> $0008                POSTDIV3        EQU     $08
004C3F 7F4C3F -> $0004                POSTDIV2        EQU     $04
004C3F 7F4C3F -> $0002                POSTDIV1        EQU     $02
004C3F 7F4C3F -> $0001                POSTDIV0        EQU     $01
004C3F 7F4C3F -> $0037                CRGFLG          EQU     $0037
004C3F 7F4C3F -> $0080                RTIF            EQU     $80
004C3F 7F4C3F -> $0040                PORF            EQU     $40
004C3F 7F4C3F -> $0020                LVRF            EQU     $20
004C3F 7F4C3F -> $0010                LOCKIF          EQU     $10
004C3F 7F4C3F -> $0008                LOCK            EQU     $08
004C3F 7F4C3F -> $0004                ILAF            EQU     $04
004C3F 7F4C3F -> $0002                SCMIF           EQU     $02
004C3F 7F4C3F -> $0001                SCM             EQU     $01
004C3F 7F4C3F -> $0038                CRGINT          EQU     $0038
004C3F 7F4C3F -> $0080                RTIE            EQU     $80
004C3F 7F4C3F -> $0010                LOCKIE          EQU     $10
004C3F 7F4C3F -> $0002                SCMIE           EQU     $02
004C3F 7F4C3F -> $0039                CLKSEL          EQU     $0039
004C3F 7F4C3F -> $0080                PLLSEL          EQU     $80
004C3F 7F4C3F -> $0040                PSTP            EQU     $40
004C3F 7F4C3F -> $0020                XCLKS           EQU     $20
004C3F 7F4C3F -> $0008                PLLWAI          EQU     $08
004C3F 7F4C3F -> $0002                RTIWAI          EQU     $02
004C3F 7F4C3F -> $0001                COPWAI          EQU     $01
004C3F 7F4C3F -> $003A                PLLCTL          EQU     $003A
004C3F 7F4C3F -> $0080                CME             EQU     $80
004C3F 7F4C3F -> $0040                PLLON           EQU     $40
004C3F 7F4C3F -> $0020                FM1             EQU     $20
004C3F 7F4C3F -> $0010                FM0             EQU     $10
004C3F 7F4C3F -> $0008                FSTWKP          EQU     $08
004C3F 7F4C3F -> $0004                PRE             EQU     $04
004C3F 7F4C3F -> $0002                PCE             EQU     $02
004C3F 7F4C3F -> $0001                SCME            EQU     $01
004C3F 7F4C3F -> $003B                RTICTL          EQU     $003B
004C3F 7F4C3F -> $0080                RTDEC           EQU     $80
004C3F 7F4C3F -> $0040                RTR6            EQU     $40
004C3F 7F4C3F -> $0020                RTR5            EQU     $20
004C3F 7F4C3F -> $0010                RTR4            EQU     $10
004C3F 7F4C3F -> $0008                RTR3            EQU     $08
004C3F 7F4C3F -> $0004                RTR2            EQU     $04
004C3F 7F4C3F -> $0002                RTR1            EQU     $02
004C3F 7F4C3F -> $0001                RTR0            EQU     $01
004C3F 7F4C3F -> $003C                COPCTL          EQU     $003C
004C3F 7F4C3F -> $0080                WCOP            EQU     $80
004C3F 7F4C3F -> $0040                RSBCK           EQU     $40
004C3F 7F4C3F -> $0020                WRTMASK         EQU     $20
004C3F 7F4C3F -> $0004                CR2             EQU     $04
004C3F 7F4C3F -> $0002                CR1             EQU     $02
004C3F 7F4C3F -> $0001                CR0             EQU     $01
004C3F 7F4C3F -> $003D                FORBYP          EQU     $003D
004C3F 7F4C3F -> $003E                CTCTL           EQU     $003E
004C3F 7F4C3F -> $003F                ARMCOP          EQU     $003F
004C3F 7F4C3F -> $0040                TIOS            EQU     $0040
004C3F 7F4C3F -> $0040                ECT_TIOS        EQU     $0040
004C3F 7F4C3F -> $0080                IOS7            EQU     $80
004C3F 7F4C3F -> $0040                IOS6            EQU     $40
004C3F 7F4C3F -> $0020                IOS5            EQU     $20
004C3F 7F4C3F -> $0010                IOS4            EQU     $10
004C3F 7F4C3F -> $0008                IOS3            EQU     $08
004C3F 7F4C3F -> $0004                IOS2            EQU     $04
004C3F 7F4C3F -> $0002                IOS1            EQU     $02
004C3F 7F4C3F -> $0001                IOS0            EQU     $01
004C3F 7F4C3F -> $0041                TCFORC          EQU     $0041
004C3F 7F4C3F -> $0041                ECT_TCFORC      EQU     $0041
004C3F 7F4C3F -> $0080                FOC7            EQU     $80
004C3F 7F4C3F -> $0040                FOC6            EQU     $40
004C3F 7F4C3F -> $0020                FOC5            EQU     $20
004C3F 7F4C3F -> $0010                FOC4            EQU     $10
004C3F 7F4C3F -> $0008                FOC3            EQU     $08
004C3F 7F4C3F -> $0004                FOC2            EQU     $04
004C3F 7F4C3F -> $0002                FOC1            EQU     $02
004C3F 7F4C3F -> $0001                FOC0            EQU     $01
004C3F 7F4C3F -> $0042                TOC7M           EQU     $0042
004C3F 7F4C3F -> $0042                ECT_TOC7M       EQU     $0042
004C3F 7F4C3F -> $0080                OC7M7           EQU     $80
004C3F 7F4C3F -> $0040                OC7M6           EQU     $40
004C3F 7F4C3F -> $0020                OC7M5           EQU     $20
004C3F 7F4C3F -> $0010                OC7M4           EQU     $10
004C3F 7F4C3F -> $0008                OC7M3           EQU     $08
004C3F 7F4C3F -> $0004                OC7M2           EQU     $04
004C3F 7F4C3F -> $0002                OC7M1           EQU     $02
004C3F 7F4C3F -> $0001                OC7M0           EQU     $01
004C3F 7F4C3F -> $0043                TOC7D           EQU     $0043
004C3F 7F4C3F -> $0043                ECT_TOC7D       EQU     $0043
004C3F 7F4C3F -> $0080                OC7D7           EQU     $80
004C3F 7F4C3F -> $0040                OC7D6           EQU     $40
004C3F 7F4C3F -> $0020                OC7D5           EQU     $20
004C3F 7F4C3F -> $0010                OC7D4           EQU     $10
004C3F 7F4C3F -> $0008                OC7D3           EQU     $08
004C3F 7F4C3F -> $0004                OC7D2           EQU     $04
004C3F 7F4C3F -> $0002                OC7D1           EQU     $02
004C3F 7F4C3F -> $0001                OC7D0           EQU     $01
004C3F 7F4C3F -> $0044                TCNT            EQU     $0044
004C3F 7F4C3F -> $0044                ECT_TCNT        EQU     $0044
004C3F 7F4C3F -> $0046                TSCR1           EQU     $0046
004C3F 7F4C3F -> $0046                ECT_TSCR1       EQU     $0046
004C3F 7F4C3F -> $0080                TEN             EQU     $80
004C3F 7F4C3F -> $0040                TSWAI           EQU     $40
004C3F 7F4C3F -> $0020                TSFRZ           EQU     $20
004C3F 7F4C3F -> $0010                TFFCA           EQU     $10
004C3F 7F4C3F -> $0047                TTOV            EQU     $0047
004C3F 7F4C3F -> $0047                ECT_TTOV        EQU     $0047
004C3F 7F4C3F -> $0080                TOV7            EQU     $80
004C3F 7F4C3F -> $0040                TOV6            EQU     $40
004C3F 7F4C3F -> $0020                TOV5            EQU     $20
004C3F 7F4C3F -> $0010                TOV4            EQU     $10
004C3F 7F4C3F -> $0008                TOV3            EQU     $08
004C3F 7F4C3F -> $0004                TOV2            EQU     $04
004C3F 7F4C3F -> $0002                TOV1            EQU     $02
004C3F 7F4C3F -> $0001                TOV0            EQU     $01
004C3F 7F4C3F -> $0048                TCTL1           EQU     $0048
004C3F 7F4C3F -> $0048                ECT_TCTL1       EQU     $0048
004C3F 7F4C3F -> $0080                OM7             EQU     $80
004C3F 7F4C3F -> $0040                OL7             EQU     $40
004C3F 7F4C3F -> $0020                OM6             EQU     $20
004C3F 7F4C3F -> $0010                OL6             EQU     $10
004C3F 7F4C3F -> $0008                OM5             EQU     $08
004C3F 7F4C3F -> $0004                OL5             EQU     $04
004C3F 7F4C3F -> $0002                OM4             EQU     $02
004C3F 7F4C3F -> $0001                OL4             EQU     $01
004C3F 7F4C3F -> $0049                TCTL2           EQU     $0049
004C3F 7F4C3F -> $0049                ECT_TCTL2       EQU     $0049
004C3F 7F4C3F -> $0080                OM3             EQU     $80
004C3F 7F4C3F -> $0040                OL3             EQU     $40
004C3F 7F4C3F -> $0020                OM2             EQU     $20
004C3F 7F4C3F -> $0010                OL2             EQU     $10
004C3F 7F4C3F -> $0008                OM1             EQU     $08
004C3F 7F4C3F -> $0004                OL1             EQU     $04
004C3F 7F4C3F -> $0002                OM0             EQU     $02
004C3F 7F4C3F -> $0001                OL0             EQU     $01
004C3F 7F4C3F -> $004A                TCTL3           EQU     $004A
004C3F 7F4C3F -> $004A                ECT_TCTL3       EQU     $004A
004C3F 7F4C3F -> $0080                EDG7B           EQU     $80
004C3F 7F4C3F -> $0040                EDG7A           EQU     $40
004C3F 7F4C3F -> $0020                EDG6B           EQU     $20
004C3F 7F4C3F -> $0010                EDG6A           EQU     $10
004C3F 7F4C3F -> $0008                EDG5B           EQU     $08
004C3F 7F4C3F -> $0004                EDG5A           EQU     $04
004C3F 7F4C3F -> $0002                EDG4B           EQU     $02
004C3F 7F4C3F -> $0001                EDG4A           EQU     $01
004C3F 7F4C3F -> $004B                TCTL4           EQU     $004B
004C3F 7F4C3F -> $004B                ECT_TCTL4       EQU     $004B
004C3F 7F4C3F -> $0080                EDG3B           EQU     $80
004C3F 7F4C3F -> $0040                EDG3A           EQU     $40
004C3F 7F4C3F -> $0020                EDG2B           EQU     $20
004C3F 7F4C3F -> $0010                EDG2A           EQU     $10
004C3F 7F4C3F -> $0008                EDG1B           EQU     $08
004C3F 7F4C3F -> $0004                EDG1A           EQU     $04
004C3F 7F4C3F -> $0002                EDG0B           EQU     $02
004C3F 7F4C3F -> $0001                EDG0A           EQU     $01
004C3F 7F4C3F -> $004C                TIE             EQU     $004C
004C3F 7F4C3F -> $004C                ECT_TIE         EQU     $004C
004C3F 7F4C3F -> $0080                C7I             EQU     $80
004C3F 7F4C3F -> $0040                C6I             EQU     $40
004C3F 7F4C3F -> $0020                C5I             EQU     $20
004C3F 7F4C3F -> $0010                C4I             EQU     $10
004C3F 7F4C3F -> $0008                C3I             EQU     $08
004C3F 7F4C3F -> $0004                C2I             EQU     $04
004C3F 7F4C3F -> $0002                C1I             EQU     $02
004C3F 7F4C3F -> $0001                C0I             EQU     $01
004C3F 7F4C3F -> $004D                TSCR2           EQU     $004D
004C3F 7F4C3F -> $004D                ECT_TSCR2       EQU     $004D
004C3F 7F4C3F -> $0080                TOI             EQU     $80
004C3F 7F4C3F -> $0008                TCRE            EQU     $08
004C3F 7F4C3F -> $0004                PR2             EQU     $04
004C3F 7F4C3F -> $0002                PR1             EQU     $02
004C3F 7F4C3F -> $0001                PR0             EQU     $01
004C3F 7F4C3F -> $004E                TFLG1           EQU     $004E
004C3F 7F4C3F -> $004E                ECT_TFLG1       EQU     $004E
004C3F 7F4C3F -> $0080                C7F             EQU     $80
004C3F 7F4C3F -> $0040                C6F             EQU     $40
004C3F 7F4C3F -> $0020                C5F             EQU     $20
004C3F 7F4C3F -> $0010                C4F             EQU     $10
004C3F 7F4C3F -> $0008                C3F             EQU     $08
004C3F 7F4C3F -> $0004                C2F             EQU     $04
004C3F 7F4C3F -> $0002                C1F             EQU     $02
004C3F 7F4C3F -> $0001                C0F             EQU     $01
004C3F 7F4C3F -> $004F                TFLG2           EQU     $004F
004C3F 7F4C3F -> $004F                ECT_TFLG2       EQU     $004F
004C3F 7F4C3F -> $0080                TOF             EQU     $80
004C3F 7F4C3F -> $0050                TC0             EQU     $0050
004C3F 7F4C3F -> $0050                ECT_TC0         EQU     $0050
004C3F 7F4C3F -> $0052                TC1             EQU     $0052
004C3F 7F4C3F -> $0052                ECT_TC1         EQU     $0052
004C3F 7F4C3F -> $0054                TC2             EQU     $0054
004C3F 7F4C3F -> $0056                ECT_TC3         EQU     $0056
004C3F 7F4C3F -> $0056                TC3             EQU     $0056
004C3F 7F4C3F -> $0058                ECT_TC4         EQU     $0058
004C3F 7F4C3F -> $0058                TC4             EQU     $0058
004C3F 7F4C3F -> $005A                ECT_TC5         EQU     $005A
004C3F 7F4C3F -> $005A                TC5             EQU     $005A
004C3F 7F4C3F -> $005C                ECT_TC6         EQU     $005C
004C3F 7F4C3F -> $005E                TC7             EQU     $005E
004C3F 7F4C3F -> $005E                ECT_TC7         EQU     $005E
004C3F 7F4C3F -> $0060                PACTL           EQU     $0060
004C3F 7F4C3F -> $0060                ECT_PACTL       EQU     $0060
004C3F 7F4C3F -> $0040                PAEN            EQU     $40
004C3F 7F4C3F -> $0020                PAMOD           EQU     $20
004C3F 7F4C3F -> $0010                PEDGE           EQU     $10
004C3F 7F4C3F -> $0008                CLK1            EQU     $08
004C3F 7F4C3F -> $0004                CLK0            EQU     $04
004C3F 7F4C3F -> $0002                PAOVI           EQU     $02
004C3F 7F4C3F -> $0001                PAI             EQU     $01
004C3F 7F4C3F -> $0061                PAFLG           EQU     $0061
004C3F 7F4C3F -> $0061                ECT_PAFLG       EQU     $0061
004C3F 7F4C3F -> $0002                PAOVF           EQU     $02
004C3F 7F4C3F -> $0001                PAIF            EQU     $01
004C3F 7F4C3F -> $0062                PACNT           EQU     $0062
004C3F 7F4C3F -> $0062                ECT_PACNT       EQU     $0062
004C3F 7F4C3F -> $0062                PACN3           EQU     $0062
004C3F 7F4C3F -> $0062                ECT_PACN3       EQU     $0062
004C3F 7F4C3F -> $0063                PACN2           EQU     $0063
004C3F 7F4C3F -> $0063                ECT_PACN2       EQU     $0063
004C3F 7F4C3F -> $0064                PACN1           EQU     $0064
004C3F 7F4C3F -> $0064                ECT_PACN1       EQU     $0064
004C3F 7F4C3F -> $0065                PACN0           EQU     $0065
004C3F 7F4C3F -> $0065                ECT_PACN0       EQU     $0065
004C3F 7F4C3F -> $0066                MCCTL           EQU     $0066
004C3F 7F4C3F -> $0066                ECT_MCCTL       EQU     $0066
004C3F 7F4C3F -> $0080                MCZI            EQU     $80
004C3F 7F4C3F -> $0040                MODMC           EQU     $40
004C3F 7F4C3F -> $0020                RDMCL           EQU     $20
004C3F 7F4C3F -> $0010                ICLAT           EQU     $10
004C3F 7F4C3F -> $0008                FLMC            EQU     $08
004C3F 7F4C3F -> $0004                MCEN            EQU     $04
004C3F 7F4C3F -> $0002                MCPR1           EQU     $02
004C3F 7F4C3F -> $0001                MCPR0           EQU     $01
004C3F 7F4C3F -> $0067                MCFLG           EQU     $0067
004C3F 7F4C3F -> $0067                ECT_MCFLG       EQU     $0067
004C3F 7F4C3F -> $0080                MCZF            EQU     $80
004C3F 7F4C3F -> $0008                POLF3           EQU     $08
004C3F 7F4C3F -> $0004                POLF2           EQU     $04
004C3F 7F4C3F -> $0002                POLF1           EQU     $02
004C3F 7F4C3F -> $0001                POLF0           EQU     $01
004C3F 7F4C3F -> $0068                ICPAR           EQU     $0068
004C3F 7F4C3F -> $0068                ECT_ICPAR       EQU     $0068
004C3F 7F4C3F -> $0008                PA3EN           EQU     $08
004C3F 7F4C3F -> $0004                PA2EN           EQU     $04
004C3F 7F4C3F -> $0002                PA1EN           EQU     $02
004C3F 7F4C3F -> $0001                PA0EN           EQU     $01
004C3F 7F4C3F -> $0069                DLYCT           EQU     $0069
004C3F 7F4C3F -> $0069                ECT_DLYCT       EQU     $0069
004C3F 7F4C3F -> $0080                DLY7            EQU     $80
004C3F 7F4C3F -> $0040                DLY6            EQU     $40
004C3F 7F4C3F -> $0020                DLY5            EQU     $20
004C3F 7F4C3F -> $0010                DLY4            EQU     $10
004C3F 7F4C3F -> $0008                DLY3            EQU     $08
004C3F 7F4C3F -> $0004                DLY2            EQU     $04
004C3F 7F4C3F -> $0002                DLY1            EQU     $02
004C3F 7F4C3F -> $0001                DLY0            EQU     $01
004C3F 7F4C3F -> $006A                ICOVW           EQU     $006A
004C3F 7F4C3F -> $006A                ECT_ICOVW       EQU     $006A
004C3F 7F4C3F -> $0080                NOVW7           EQU     $80
004C3F 7F4C3F -> $0040                NOVW6           EQU     $40
004C3F 7F4C3F -> $0020                NOVW5           EQU     $20
004C3F 7F4C3F -> $0010                NOVW4           EQU     $10
004C3F 7F4C3F -> $0008                NOVW3           EQU     $08
004C3F 7F4C3F -> $0004                NOVW2           EQU     $04
004C3F 7F4C3F -> $0002                NOVW1           EQU     $02
004C3F 7F4C3F -> $0001                NOVW0           EQU     $01
004C3F 7F4C3F -> $006B                ICSYS           EQU     $006B
004C3F 7F4C3F -> $006B                ECT_ICSYS       EQU     $006B
004C3F 7F4C3F -> $0080                SH37            EQU     $80
004C3F 7F4C3F -> $0040                SH26            EQU     $40
004C3F 7F4C3F -> $0020                SH15            EQU     $20
004C3F 7F4C3F -> $0010                SH04            EQU     $10
004C3F 7F4C3F -> $0008                TFMOD           EQU     $08
004C3F 7F4C3F -> $0004                PACMX           EQU     $04
004C3F 7F4C3F -> $0002                BUFEN           EQU     $02
004C3F 7F4C3F -> $0001                LATQ            EQU     $01
004C3F 7F4C3F -> $006C                OCPD            EQU     $006C
004C3F 7F4C3F -> $006C                ECT_OCPD        EQU     $006C
004C3F 7F4C3F -> $0080                OCPD7           EQU     $80
004C3F 7F4C3F -> $0040                OCPD6           EQU     $40
004C3F 7F4C3F -> $0020                OCPD5           EQU     $20
004C3F 7F4C3F -> $0010                OCPD4           EQU     $10
004C3F 7F4C3F -> $0008                OCPD3           EQU     $08
004C3F 7F4C3F -> $0004                OCPD2           EQU     $04
004C3F 7F4C3F -> $0002                OCPD1           EQU     $02
004C3F 7F4C3F -> $0001                OCPD0           EQU     $01
                                      ;$006D reserved
004C3F 7F4C3F -> $006E                PTPSR           EQU     $006E
004C3F 7F4C3F -> $006E                ECT_PTPSR       EQU     $006E
004C3F 7F4C3F -> $0080                PTPS7           EQU     $80
004C3F 7F4C3F -> $0040                PTPS6           EQU     $40
004C3F 7F4C3F -> $0020                PTPS5           EQU     $20
004C3F 7F4C3F -> $0010                PTPS4           EQU     $10
004C3F 7F4C3F -> $0008                PTPS3           EQU     $08
004C3F 7F4C3F -> $0004                PTPS2           EQU     $04
004C3F 7F4C3F -> $0002                PTPS1           EQU     $02
004C3F 7F4C3F -> $0001                PTPS0           EQU     $01
004C3F 7F4C3F -> $006F                PTMCPSR         EQU     $006F
004C3F 7F4C3F -> $006F                ECT_PTMCPSR             EQU     $006F
004C3F 7F4C3F -> $0001                PTMPS0          EQU     $01
004C3F 7F4C3F -> $0002                PTMPS1          EQU     $02
004C3F 7F4C3F -> $0004                PTMPS2          EQU     $04
004C3F 7F4C3F -> $0008                PTMPS3          EQU     $08
004C3F 7F4C3F -> $0010                PTMPS4          EQU     $10
004C3F 7F4C3F -> $0020                PTMPS5          EQU     $20
004C3F 7F4C3F -> $0040                PTMPS6          EQU     $40
004C3F 7F4C3F -> $0080                PTMPS7          EQU     $80
004C3F 7F4C3F -> $0070                PBCTL           EQU     $0070
004C3F 7F4C3F -> $0070                ECT_PBCTL       EQU     $0070
004C3F 7F4C3F -> $0040                PBEN            EQU     $40
004C3F 7F4C3F -> $0002                PBOVI           EQU     $02
004C3F 7F4C3F -> $0071                PBFLG           EQU     $00071
004C3F 7F4C3F -> $0071                ECT_PBFLG       EQU     $00071
004C3F 7F4C3F -> $0002                PBOVF           EQU     $02
004C3F 7F4C3F -> $0072                PA32H           EQU     $0072
004C3F 7F4C3F -> $0072                ECT_PA32H       EQU     $0072
004C3F 7F4C3F -> $0072                PA3H            EQU     $0072
004C3F 7F4C3F -> $0073                PA2H            EQU     $0073
004C3F 7F4C3F -> $0074                PA10H           EQU     $0074
004C3F 7F4C3F -> $0074                ECT_PA10H       EQU     $0074
004C3F 7F4C3F -> $0074                PA1H            EQU     $0074
004C3F 7F4C3F -> $0075                PA0H            EQU     $0075
004C3F 7F4C3F -> $0076                MCCNT           EQU     $0076
004C3F 7F4C3F -> $0076                ECT_MCCNT       EQU     $0076
004C3F 7F4C3F -> $0078                TC0H            EQU     $0078
004C3F 7F4C3F -> $0078                ECT_TC0H        EQU     $0078
004C3F 7F4C3F -> $007A                TC1H            EQU     $007A
004C3F 7F4C3F -> $007A                ECT_TC1H        EQU     $007A
004C3F 7F4C3F -> $007C                TC2H            EQU     $007C
004C3F 7F4C3F -> $007C                ECT_TC2H        EQU     $007C
004C3F 7F4C3F -> $007E                TC3H            EQU     $007E
004C3F 7F4C3F -> $007E                ECT_TC3H        EQU     $007E
004C3F 7F4C3F -> $0080                ATD1CTL0        EQU     $0080
004C3F 7F4C3F -> $0008                WRAP3           EQU     $08
004C3F 7F4C3F -> $0004                WRAP2           EQU     $04
004C3F 7F4C3F -> $0002                WRAP1           EQU     $02
004C3F 7F4C3F -> $0001                WRAP0           EQU     $01
004C3F 7F4C3F -> $0081                ATD1CTL1        EQU     $0081
004C3F 7F4C3F -> $0080                ETRIGSEL        EQU     $80
004C3F 7F4C3F -> $0040                SRES1           EQU     $40
004C3F 7F4C3F -> $0020                SRES0           EQU     $20
004C3F 7F4C3F -> $0010                DIS             EQU     $10
004C3F 7F4C3F -> $0008                ETRIGCH3        EQU     $08
004C3F 7F4C3F -> $0004                ETRIGCH2        EQU     $04
004C3F 7F4C3F -> $0002                ETRIGCH1        EQU     $02
004C3F 7F4C3F -> $0001                ETRIGCH0        EQU     $01
004C3F 7F4C3F -> $0082                ATD1CTL2        EQU     $0082
004C3F 7F4C3F -> $0040                AFFC            EQU     $40
004C3F 7F4C3F -> $0020                ICLKSTP         EQU     $20
004C3F 7F4C3F -> $0010                ETRIGLE         EQU     $10
004C3F 7F4C3F -> $0008                ETRIGP          EQU     $08
004C3F 7F4C3F -> $0004                ETRIGE          EQU     $04
004C3F 7F4C3F -> $0002                ASCIE           EQU     $02
004C3F 7F4C3F -> $0001                ASCIF           EQU     $01
004C3F 7F4C3F -> $0083                ATD1CTL3        EQU     $0083
004C3F 7F4C3F -> $0080                DJM             EQU     $80
004C3F 7F4C3F -> $0040                S8C             EQU     $40
004C3F 7F4C3F -> $0020                S4C             EQU     $20
004C3F 7F4C3F -> $0010                S2C             EQU     $10
004C3F 7F4C3F -> $0008                S1C             EQU     $08
004C3F 7F4C3F -> $0004                FIFO            EQU     $04
004C3F 7F4C3F -> $0002                FRZ1            EQU     $02
004C3F 7F4C3F -> $0001                FRZ0            EQU     $01
004C3F 7F4C3F -> $0084                ATD1CTL4        EQU     $0084
004C3F 7F4C3F -> $0080                SMP2            EQU     $80
004C3F 7F4C3F -> $0040                SMP1            EQU     $40
004C3F 7F4C3F -> $0020                SMP0            EQU     $20
004C3F 7F4C3F -> $0010                PRS4            EQU     $10
004C3F 7F4C3F -> $0008                PRS3            EQU     $08
004C3F 7F4C3F -> $0004                PRS2            EQU     $04
004C3F 7F4C3F -> $0002                PRS1            EQU     $02
004C3F 7F4C3F -> $0001                PRS0            EQU     $01
004C3F 7F4C3F -> $0085                ATD1CTL5        EQU     $0085
004C3F 7F4C3F -> $0040                SC              EQU     $40
004C3F 7F4C3F -> $0020                SCAN            EQU     $20
004C3F 7F4C3F -> $0010                MULT            EQU     $10
004C3F 7F4C3F -> $0008                CD              EQU     $08
004C3F 7F4C3F -> $0004                CC              EQU     $04
004C3F 7F4C3F -> $0002                CB              EQU     $02
004C3F 7F4C3F -> $0001                CA              EQU     $01
004C3F 7F4C3F -> $0086                ATD1STAT0       EQU     $0086
004C3F 7F4C3F -> $0080                SCF             EQU     $80
004C3F 7F4C3F -> $0020                ETORF           EQU     $20
004C3F 7F4C3F -> $0010                FIFOR           EQU     $10
004C3F 7F4C3F -> $0004                CC2             EQU     $04
004C3F 7F4C3F -> $0002                CC1             EQU     $02
004C3F 7F4C3F -> $0001                CC0             EQU     $01
                                      ;$0087 reserved
004C3F 7F4C3F -> $0088                ATD1CMPEH       EQU     $0088
004C3F 7F4C3F -> $0080                CMPE15          EQU     $80
004C3F 7F4C3F -> $0040                CMPE14          EQU     $40
004C3F 7F4C3F -> $0020                CMPE13          EQU     $20
004C3F 7F4C3F -> $0010                CMPE12          EQU     $10
004C3F 7F4C3F -> $0008                CMPE11          EQU     $08
004C3F 7F4C3F -> $0004                CMPE10          EQU     $04
004C3F 7F4C3F -> $0002                CMPE9           EQU     $02
004C3F 7F4C3F -> $0001                CMPE8           EQU     $01
004C3F 7F4C3F -> $0089                ATD1CMPEL       EQU     $0089
004C3F 7F4C3F -> $0080                CMPE7           EQU     $80
004C3F 7F4C3F -> $0040                CMPE6           EQU     $40
004C3F 7F4C3F -> $0020                CMPE5           EQU     $20
004C3F 7F4C3F -> $0010                CMPE4           EQU     $10
004C3F 7F4C3F -> $0008                CMPE3           EQU     $08
004C3F 7F4C3F -> $0004                CMPE2           EQU     $04
004C3F 7F4C3F -> $0002                CMPE1           EQU     $02
004C3F 7F4C3F -> $0001                CMPE0           EQU     $01
004C3F 7F4C3F -> $008A                ATD1STAT2H      EQU     $008A
004C3F 7F4C3F -> $0080                CCF15           EQU     $80
004C3F 7F4C3F -> $0040                CCF14           EQU     $40
004C3F 7F4C3F -> $0020                CCF13           EQU     $20
004C3F 7F4C3F -> $0010                CCF12           EQU     $10
004C3F 7F4C3F -> $0008                CCF11           EQU     $08
004C3F 7F4C3F -> $0004                CCF10           EQU     $04
004C3F 7F4C3F -> $0002                CCF9            EQU     $02
004C3F 7F4C3F -> $0001                CCF8            EQU     $01
004C3F 7F4C3F -> $008B                ATD1STAT2L      EQU     $008B
004C3F 7F4C3F -> $0080                CCF7            EQU     $80
004C3F 7F4C3F -> $0040                CCF6            EQU     $40
004C3F 7F4C3F -> $0020                CCF5            EQU     $20
004C3F 7F4C3F -> $0010                CCF4            EQU     $10
004C3F 7F4C3F -> $0008                CCF3            EQU     $08
004C3F 7F4C3F -> $0004                CCF2            EQU     $04
004C3F 7F4C3F -> $0002                CCF1            EQU     $02
004C3F 7F4C3F -> $0001                CCF0            EQU     $01
004C3F 7F4C3F -> $008C                ATD1DIENH       EQU     $008C
004C3F 7F4C3F -> $0080                IEN15           EQU     $80
004C3F 7F4C3F -> $0040                IEN14           EQU     $40
004C3F 7F4C3F -> $0020                IEN13           EQU     $20
004C3F 7F4C3F -> $0010                IEN12           EQU     $10
004C3F 7F4C3F -> $0008                IEN11           EQU     $08
004C3F 7F4C3F -> $0004                IEN10           EQU     $04
004C3F 7F4C3F -> $0002                IEN9            EQU     $02
004C3F 7F4C3F -> $0001                IEN8            EQU     $01
004C3F 7F4C3F -> $008D                ATD1DIENL       EQU     $008D
004C3F 7F4C3F -> $0080                IEN7            EQU     $80
004C3F 7F4C3F -> $0040                IEN6            EQU     $40
004C3F 7F4C3F -> $0020                IEN5            EQU     $20
004C3F 7F4C3F -> $0010                IEN4            EQU     $10
004C3F 7F4C3F -> $0008                IEN3            EQU     $08
004C3F 7F4C3F -> $0004                IEN2            EQU     $04
004C3F 7F4C3F -> $0002                IEN1            EQU     $02
004C3F 7F4C3F -> $0001                IEN0            EQU     $01
004C3F 7F4C3F -> $008E                ATD1CMPHTH      EQU     $008E
004C3F 7F4C3F -> $0080                CMPHT15         EQU     $80
004C3F 7F4C3F -> $0040                CMPHT14         EQU     $40
004C3F 7F4C3F -> $0020                CMPHT13         EQU     $20
004C3F 7F4C3F -> $0010                CMPHT12         EQU     $10
004C3F 7F4C3F -> $0008                CMPHT11         EQU     $08
004C3F 7F4C3F -> $0004                CMPHT10         EQU     $04
004C3F 7F4C3F -> $0002                CMPHT9          EQU     $02
004C3F 7F4C3F -> $0001                CMPHT8          EQU     $01
004C3F 7F4C3F -> $008F                ATD1CMPHTL      EQU     $008F
004C3F 7F4C3F -> $0001                CMPHT0          EQU     $01
004C3F 7F4C3F -> $0002                CMPHT1          EQU     $02
004C3F 7F4C3F -> $0004                CMPHT2          EQU     $04
004C3F 7F4C3F -> $0008                CMPHT3          EQU     $08
004C3F 7F4C3F -> $0010                CMPHT4          EQU     $10
004C3F 7F4C3F -> $0020                CMPHT5          EQU     $20
004C3F 7F4C3F -> $0040                CMPHT6          EQU     $40
004C3F 7F4C3F -> $0080                CMPHT7          EQU     $80
004C3F 7F4C3F -> $0090                ATD1DR0         EQU     $0090
004C3F 7F4C3F -> $0090                ATD1DR0H        EQU     $0090
004C3F 7F4C3F -> $0091                ATD1DR0L        EQU     $0091
004C3F 7F4C3F -> $0092                ATD1DR1         EQU     $0092
004C3F 7F4C3F -> $0092                ATD1DR1H        EQU     $0092
004C3F 7F4C3F -> $0093                ATD1DR1L        EQU     $0093
004C3F 7F4C3F -> $0094                ATD1DR2         EQU     $0094
004C3F 7F4C3F -> $0094                ATD1DR2H        EQU     $0094
004C3F 7F4C3F -> $0095                ATD1DR2L        EQU     $0095
004C3F 7F4C3F -> $0096                ATD1DR3         EQU     $0096
004C3F 7F4C3F -> $0096                ATD1DR3H        EQU     $0096
004C3F 7F4C3F -> $0097                ATD1DR3L        EQU     $0097
004C3F 7F4C3F -> $0098                ATD1DR4         EQU     $0098
004C3F 7F4C3F -> $0098                ATD1DR4H        EQU     $0098
004C3F 7F4C3F -> $0099                ATD1DR4L        EQU     $0099
004C3F 7F4C3F -> $009A                ATD1DR5         EQU     $009A
004C3F 7F4C3F -> $009A                ATD1DR5H        EQU     $009A
004C3F 7F4C3F -> $009B                ATD1DR5L        EQU     $009B
004C3F 7F4C3F -> $009C                ATD1DR6         EQU     $009C
004C3F 7F4C3F -> $009C                ATD1DR6H        EQU     $009C
004C3F 7F4C3F -> $009D                ATD1DR6L        EQU     $009D
004C3F 7F4C3F -> $009E                ATD1DR7         EQU     $009E
004C3F 7F4C3F -> $009E                ATD1DR7H        EQU     $009E
004C3F 7F4C3F -> $009F                ATD1DR7L        EQU     $009F
004C3F 7F4C3F -> $00A0                ATD1DR8         EQU     $00A0
004C3F 7F4C3F -> $00A0                ATD1DR8H        EQU     $00A0
004C3F 7F4C3F -> $00A1                ATD1DR8L        EQU     $00A1
004C3F 7F4C3F -> $00A2                ATD1DR9         EQU     $00A2
004C3F 7F4C3F -> $00A2                ATD1DR9H        EQU     $00A2
004C3F 7F4C3F -> $00A3                ATD1DR9L        EQU     $00A3
004C3F 7F4C3F -> $00A3                ATD1DR10        EQU     $00A3
004C3F 7F4C3F -> $00A3                ATD1DR10H       EQU     $00A3
004C3F 7F4C3F -> $00A5                ATD1DR10L       EQU     $00A5
004C3F 7F4C3F -> $00A6                ATD1DR11        EQU     $00A6
004C3F 7F4C3F -> $00A6                ATD1DR11H       EQU     $00A6
004C3F 7F4C3F -> $00A7                ATD1DR11L       EQU     $00A7
004C3F 7F4C3F -> $00A8                ATD1DR12        EQU     $00A8
004C3F 7F4C3F -> $00A8                ATD1DR12H       EQU     $00A8
004C3F 7F4C3F -> $00A9                ATD1DR12L       EQU     $00A9
004C3F 7F4C3F -> $00AA                ATD1DR13        EQU     $00AA
004C3F 7F4C3F -> $00AA                ATD1DR13H       EQU     $00AA
004C3F 7F4C3F -> $00AB                ATD1DR13L       EQU     $00AB
004C3F 7F4C3F -> $00AC                ATD1DR14        EQU     $00AC
004C3F 7F4C3F -> $00AC                ATD1DR14H       EQU     $00AC
004C3F 7F4C3F -> $00AD                ATD1DR14L       EQU     $00AD
004C3F 7F4C3F -> $00AE                ATD1DR15        EQU     $00AE
004C3F 7F4C3F -> $00AE                ATD1DR15H       EQU     $00AE
004C3F 7F4C3F -> $00AF                ATD1DR15L       EQU     $00AF
004C3F 7F4C3F -> $00B0                I1BAD           EQU     $00B0
004C3F 7F4C3F -> $0080                ADR7            EQU     $80
004C3F 7F4C3F -> $0040                ADR6            EQU     $40
004C3F 7F4C3F -> $0020                ADR5            EQU     $20
004C3F 7F4C3F -> $0010                ADR4            EQU     $10
004C3F 7F4C3F -> $0008                ADR3            EQU     $08
004C3F 7F4C3F -> $0004                ADR2            EQU     $04
004C3F 7F4C3F -> $0002                ADR1            EQU     $02
004C3F 7F4C3F -> $00B1                I1BFD           EQU     $00B1
004C3F 7F4C3F -> $0080                IBC7            EQU     $80
004C3F 7F4C3F -> $0040                IBC6            EQU     $40
004C3F 7F4C3F -> $0020                IBC5            EQU     $20
004C3F 7F4C3F -> $0010                IBC4            EQU     $10
004C3F 7F4C3F -> $0008                IBC3            EQU     $08
004C3F 7F4C3F -> $0004                IBC2            EQU     $04
004C3F 7F4C3F -> $0002                IBC1            EQU     $02
004C3F 7F4C3F -> $0001                IBC0            EQU     $01
004C3F 7F4C3F -> $00B2                I1BCR           EQU     $00B2
004C3F 7F4C3F -> $0080                IBEN            EQU     $80
004C3F 7F4C3F -> $0040                IBIE            EQU     $40
004C3F 7F4C3F -> $0020                SL              EQU     $20
004C3F 7F4C3F -> $0010                RX              EQU     $10
004C3F 7F4C3F -> $0008                TXAK            EQU     $08
004C3F 7F4C3F -> $0004                RSTA            EQU     $04
004C3F 7F4C3F -> $0001                IBSWAI          EQU     $01
004C3F 7F4C3F -> $00B3                I1BSR           EQU     $00B3
004C3F 7F4C3F -> $0080                TCF             EQU     $80
004C3F 7F4C3F -> $0040                IAAS            EQU     $40
004C3F 7F4C3F -> $0020                IBB             EQU     $20
004C3F 7F4C3F -> $0001                RXAK            EQU     $01
004C3F 7F4C3F -> $0004                SRW             EQU     $04
004C3F 7F4C3F -> $0002                IBIF            EQU     $02
004C3F 7F4C3F -> $00B4                I1BDR           EQU     $00B4
004C3F 7F4C3F -> $00B5                I1BCR2          EQU     $00B5
004C3F 7F4C3F -> $0080                GCEN            EQU     $80
004C3F 7F4C3F -> $0040                ADTYPE          EQU     $40
004C3F 7F4C3F -> $0004                ADR2            EQU     $04
004C3F 7F4C3F -> $0002                ADR1            EQU     $02
004C3F 7F4C3F -> $0001                ADR0            EQU     $01
                                      ;$00B6 to $00B7 reserved
004C3F 7F4C3F -> $00B8                SCI2BDH         EQU     $00B8
004C3F 7F4C3F -> $0080                IREN            EQU     $80
004C3F 7F4C3F -> $0040                TNP1            EQU     $40
004C3F 7F4C3F -> $0020                TNP0            EQU     $20
004C3F 7F4C3F -> $0010                SBR12           EQU     $10
004C3F 7F4C3F -> $0008                SBR11           EQU     $08
004C3F 7F4C3F -> $0004                SBR10           EQU     $04
004C3F 7F4C3F -> $0002                SBR9            EQU     $02
004C3F 7F4C3F -> $0001                SBR8            EQU     $01
004C3F 7F4C3F -> $00B8                SCI2ASR1        EQU     $00B8
004C3F 7F4C3F -> $0080                RXEDGIF         EQU     $80
004C3F 7F4C3F -> $0004                BERRV           EQU     $04
004C3F 7F4C3F -> $0002                BERRIF          EQU     $02
004C3F 7F4C3F -> $0001                BKDIF           EQU     $01
004C3F 7F4C3F -> $00B9                SCI2BDL         EQU     $00B9
004C3F 7F4C3F -> $0080                SBR7            EQU     $80
004C3F 7F4C3F -> $0040                SBR6            EQU     $40
004C3F 7F4C3F -> $0020                SBR5            EQU     $20
004C3F 7F4C3F -> $0010                SBR4            EQU     $10
004C3F 7F4C3F -> $0008                SBR3            EQU     $08
004C3F 7F4C3F -> $0004                SBR2            EQU     $04
004C3F 7F4C3F -> $0002                SBR1            EQU     $02
004C3F 7F4C3F -> $0001                SBR0            EQU     $01
004C3F 7F4C3F -> $00B9                SCI2ACR1        EQU     $00B9
004C3F 7F4C3F -> $0080                RXEDGIE         EQU     $80
004C3F 7F4C3F -> $0002                BERRIE          EQU     $02
004C3F 7F4C3F -> $0001                BKDIE           EQU     $01
004C3F 7F4C3F -> $00BA                SCI2CR1         EQU     $00BA
004C3F 7F4C3F -> $0080                LOOPS           EQU     $80
004C3F 7F4C3F -> $0040                SCISWAI         EQU     $40
004C3F 7F4C3F -> $0020                RSRC            EQU     $20
004C3F 7F4C3F -> $0010                M               EQU     $10
004C3F 7F4C3F -> $0008                WAKE            EQU     $08
004C3F 7F4C3F -> $0004                ILT             EQU     $04
004C3F 7F4C3F -> $0002                PE              EQU     $02
004C3F 7F4C3F -> $0001                PT              EQU     $01
004C3F 7F4C3F -> $00BA                SCI2ACR2        EQU     $00BA
004C3F 7F4C3F -> $0004                BERRM1          EQU     $04
004C3F 7F4C3F -> $0002                BERRM0          EQU     $02
004C3F 7F4C3F -> $0001                BKDFE           EQU     $01
004C3F 7F4C3F -> $00BB                SCI2CR2         EQU     $00BB
004C3F 7F4C3F -> $0080                TXIE            EQU     $80
004C3F 7F4C3F -> $0040                TCIE            EQU     $40
004C3F 7F4C3F -> $0020                RIE             EQU     $20
004C3F 7F4C3F -> $0010                ILIE            EQU     $10
004C3F 7F4C3F -> $0008                TE              EQU     $08
004C3F 7F4C3F -> $0004                RE              EQU     $04
004C3F 7F4C3F -> $0002                RWU             EQU     $02
004C3F 7F4C3F -> $0001                SBK             EQU     $01
004C3F 7F4C3F -> $00BC                SCI2SR1         EQU     $00BC
004C3F 7F4C3F -> $0080                TDRE            EQU     $80
004C3F 7F4C3F -> $0040                TC              EQU     $40
004C3F 7F4C3F -> $0020                RDRFF           EQU     $20
004C3F 7F4C3F -> $0010                IDLE            EQU     $10
004C3F 7F4C3F -> $0008                OR              EQU     $08
004C3F 7F4C3F -> $0004                NF              EQU     $04
004C3F 7F4C3F -> $0002                FE              EQU     $02
004C3F 7F4C3F -> $0001                PF              EQU     $01
004C3F 7F4C3F -> $00BD                SCI2SR2         EQU     $00BD
004C3F 7F4C3F -> $0004                BRK13           EQU     $04
004C3F 7F4C3F -> $0002                TXDIR           EQU     $02
004C3F 7F4C3F -> $0001                RAF             EQU     $01
004C3F 7F4C3F -> $00BE                SCI2DRH         EQU     $00BE
004C3F 7F4C3F -> $0080                R8              EQU     $80
004C3F 7F4C3F -> $0040                T8              EQU     $40
004C3F 7F4C3F -> $00BF                SCI2DRL         EQU     $00BF
004C3F 7F4C3F -> $00C0                SCI3BDH         EQU     $00C0
                                      ;IREN           EQU     $80
                                      ;TNP1           EQU     $40
                                      ;TNP0           EQU     $20
                                      ;SBR12          EQU     $10
                                      ;SBR11          EQU     $08
                                      ;SBR10          EQU     $04
                                      ;SBR9           EQU     $02
                                      ;SBR8           EQU     $01
004C3F 7F4C3F -> $00C0                SCI3ASR1        EQU     $00C0
                                      ;RXEDGIF        EQU     $80
                                      ;BERRV          EQU     $04
                                      ;BERRIF         EQU     $02
                                      ;BKDIF          EQU     $01
004C3F 7F4C3F -> $00C1                SCI3BDL         EQU     $00C1
                                      ;SBR7           EQU     $80
                                      ;SBR6           EQU     $40
                                      ;SBR5           EQU     $20
                                      ;SBR4           EQU     $10
                                      ;SBR3           EQU     $08
                                      ;SBR2           EQU     $04
                                      ;SBR1           EQU     $02
                                      ;SBR0           EQU     $01
004C3F 7F4C3F -> $00C1                SCI3ACR1        EQU     $00C1
                                      ;RXEDGIE        EQU     $80
                                      ;BERRIE         EQU     $02
                                      ;BKDIE          EQU     $01
004C3F 7F4C3F -> $00C2                SCI3CR1         EQU     $00C2
                                      ;LOOPS          EQU     $80
                                      ;SCISWAI        EQU     $40
                                      ;RSRC           EQU     $20
                                      ;M              EQU     $10
                                      ;WAKE           EQU     $08
                                      ;ILT            EQU     $04
                                      ;PE             EQU     $02
                                      ;PT             EQU     $01
004C3F 7F4C3F -> $00C2                SCI3ACR2        EQU     $00C2
                                      ;BERRM1         EQU     $04
                                      ;BERRM0         EQU     $02
                                      ;BKDFE          EQU     $01
004C3F 7F4C3F -> $00C3                SCI3CR2         EQU     $00C3
                                      ;TXIE           EQU     $80
                                      ;TCIE           EQU     $40
                                      ;RIE            EQU     $20
                                      ;ILIE           EQU     $10
                                      ;TE             EQU     $08
                                      ;RE             EQU     $04
                                      ;RWU            EQU     $02
                                      ;SBK            EQU     $01
004C3F 7F4C3F -> $00C4                SCI3SR1         EQU     $00C4
                                      ;TDRE           EQU     $80
                                      ;TC             EQU     $40
                                      ;RDRFF           EQU     $20
                                      ;IDLE           EQU     $10
                                      ;OR             EQU     $08
                                      ;NF             EQU     $04
                                      ;FE             EQU     $02
                                      ;PF             EQU     $01
004C3F 7F4C3F -> $00C5                SCI3SR2         EQU     $00C5
                                      ;BRK13          EQU     $04
                                      ;TXDIR          EQU     $02
                                      ;RAF            EQU     $01
004C3F 7F4C3F -> $00C6                SCI3DRH         EQU     $00C6
                                      ;R8             EQU     $80
                                      ;T8             EQU     $40
004C3F 7F4C3F -> $00C7                SCI3DRL         EQU     $00C7
004C3F 7F4C3F -> $00C8                SCIBDH          EQU     $00C8
004C3F 7F4C3F -> $00C8                SCI0BDH         EQU     $00C8
                                      ;IREN           EQU     $80
                                      ;TNP1           EQU     $40
                                      ;TNP0           EQU     $20
                                      ;SBR12          EQU     $10
                                      ;SBR11          EQU     $08
                                      ;SBR10          EQU     $04
                                      ;SBR9           EQU     $02
                                      ;SBR8           EQU     $01
004C3F 7F4C3F -> $00C9                SCI0ASR1        EQU     $00C9
                                      ;RXEDGIF        EQU     $80
                                      ;BERRV          EQU     $04
                                      ;BERRIF         EQU     $02
                                      ;BKDIF          EQU     $01
004C3F 7F4C3F -> $00C9                SCIBDL          EQU     $00C9
004C3F 7F4C3F -> $00C9                SCI0BDL         EQU     $00C9
                                      ;SBR7           EQU     $80
                                      ;SBR6           EQU     $40
                                      ;SBR5           EQU     $20
                                      ;SBR4           EQU     $10
                                      ;SBR3           EQU     $08
                                      ;SBR2           EQU     $04
                                      ;SBR1           EQU     $02
                                      ;SBR0           EQU     $01
004C3F 7F4C3F -> $00C9                SCI0ACR1        EQU     $00C9
                                      ;RXEDGIE        EQU     $80
                                      ;BERRIE         EQU     $02
                                      ;BKDIE          EQU     $01
004C3F 7F4C3F -> $00CA                SCICR1          EQU     $00CA
004C3F 7F4C3F -> $00CA                SCI0CR1         EQU     $00CA
                                      ;LOOPS          EQU     $80
                                      ;SCISWAI        EQU     $40
                                      ;RSRC           EQU     $20
                                      ;M              EQU     $10
                                      ;WAKE           EQU     $08
                                      ;ILT            EQU     $04
                                      ;PE             EQU     $02
                                      ;PT             EQU     $01
004C3F 7F4C3F -> $00CA                SCI0ACR2        EQU     $00CA
                                      ;BERRM1         EQU     $04
                                      ;BERRM0         EQU     $02
                                      ;BKDFE          EQU     $01
004C3F 7F4C3F -> $00CB                SCICR2          EQU     $00CB
004C3F 7F4C3F -> $00CB                SCI0CR2         EQU     $00CB
                                      ;TXIE           EQU     $80
                                      ;TCIE           EQU     $40
                                      ;RIE            EQU     $20
                                      ;ILIE           EQU     $10
                                      ;TE             EQU     $08
                                      ;RE             EQU     $04
                                      ;RWU            EQU     $02
                                      ;SBK            EQU     $01
004C3F 7F4C3F -> $00CC                SCISR1          EQU     $00CC
004C3F 7F4C3F -> $00CC                SCI0SR1         EQU     $00CC
                                      ;TDRE           EQU     $80
                                      ;TC             EQU     $40
                                      ;RDRFF          EQU     $20
                                      ;IDLE           EQU     $10
                                      ;OR             EQU     $08
                                      ;NF             EQU     $04
                                      ;FE             EQU     $02
                                      ;PF             EQU     $01
004C3F 7F4C3F -> $00CD                SCISR2          EQU     $00CD
004C3F 7F4C3F -> $00CD                SCI0SR2         EQU     $00CD
                                      ;BRK13          EQU     $04
                                      ;TXDIR          EQU     $02
                                      ;RAF            EQU     $01
004C3F 7F4C3F -> $00CE                SCIDRH          EQU     $00CE
004C3F 7F4C3F -> $00CE                SCI0DRH         EQU     $00CE
                                      ;R8             EQU     $80
                                      ;T8             EQU     $40
004C3F 7F4C3F -> $00CF                SCIDRL          EQU     $00CF
004C3F 7F4C3F -> $00CF                SCI0DRL         EQU     $00CF
004C3F 7F4C3F -> $00D0                SCI1BDH         EQU     $00D0
                                      ;IREN           EQU     $80
                                      ;TNP1           EQU     $40
                                      ;TNP0           EQU     $20
                                      ;SBR12          EQU     $10
                                      ;SBR11          EQU     $08
                                      ;SBR10          EQU     $04
                                      ;SBR9           EQU     $02
                                      ;SBR8           EQU     $01
004C3F 7F4C3F -> $00D0                SCI1ASR1        EQU     $00D0
                                      ;RXEDGIF        EQU     $80
                                      ;BERRV          EQU     $04
                                      ;BERRIF         EQU     $02
                                      ;BKDIF          EQU     $01
004C3F 7F4C3F -> $00D1                SCI1BDL         EQU     $00D1
                                      ;SBR7           EQU     $80
                                      ;SBR6           EQU     $40
                                      ;SBR5           EQU     $20
                                      ;SBR4           EQU     $10
                                      ;SBR3           EQU     $08
                                      ;SBR2           EQU     $04
                                      ;SBR1           EQU     $02
                                      ;SBR0           EQU     $01
004C3F 7F4C3F -> $00D1                SCI1ACR1        EQU     $00D1
                                      ;RXEDGIE        EQU     $80
                                      ;BERRIE         EQU     $02
                                      ;BKDIE          EQU     $01
004C3F 7F4C3F -> $00D2                SCI1CR1         EQU     $00D2
                                      ;LOOPS          EQU     $80
                                      ;SCISWAI        EQU     $40
                                      ;RSRC           EQU     $20
                                      ;M              EQU     $10
                                      ;WAKE           EQU     $08
                                      ;ILT            EQU     $04
                                      ;PE             EQU     $02
                                      ;PT             EQU     $01
004C3F 7F4C3F -> $00D2                SCI1ACR2        EQU     $00D2
                                      ;BERRM1         EQU     $04
                                      ;BERRM0         EQU     $02
                                      ;BKDFE          EQU     $01
004C3F 7F4C3F -> $00D3                SCI1CR2         EQU     $00D3
                                      ;TXIE           EQU     $80
                                      ;TCIE           EQU     $40
                                      ;RIE            EQU     $20
                                      ;ILIE           EQU     $10
                                      ;TE             EQU     $08
                                      ;RE             EQU     $04
                                      ;RWU            EQU     $02
                                      ;SBK            EQU     $01
004C3F 7F4C3F -> $00D4                SCI1SR1         EQU     $00D4
                                      ;TDRE           EQU     $80
                                      ;TC             EQU     $40
                                      ;RDRFF          EQU     $20
                                      ;IDLE           EQU     $10
                                      ;OR             EQU     $08
                                      ;NF             EQU     $04
                                      ;FE             EQU     $02
                                      ;PF             EQU     $01
004C3F 7F4C3F -> $00D5                SCI1SR2         EQU     $00D5
                                      ;BRK13          EQU     $04
                                      ;TXDIR          EQU     $02
                                      ;RAF            EQU     $01
004C3F 7F4C3F -> $00D6                SCI1DRH         EQU     $00D6
                                      ;R8             EQU     $80
                                      ;T8             EQU     $40
004C3F 7F4C3F -> $00D7                SCI1DRL         EQU     $00D7
004C3F 7F4C3F -> $00D8                SPICR1          EQU     $00D8
004C3F 7F4C3F -> $00D8                SPI0CR1         EQU     $00D8
004C3F 7F4C3F -> $0080                SPIE            EQU     $80
004C3F 7F4C3F -> $0040                SPE             EQU     $40
004C3F 7F4C3F -> $0020                SPTIE           EQU     $20
004C3F 7F4C3F -> $0010                MSTR            EQU     $10
004C3F 7F4C3F -> $0008                CPOL            EQU     $08
004C3F 7F4C3F -> $0004                CPHA            EQU     $04
004C3F 7F4C3F -> $0002                SSOE            EQU     $02
004C3F 7F4C3F -> $0001                LSBFE           EQU     $01
004C3F 7F4C3F -> $00D9                SPICR2          EQU     $00D9
004C3F 7F4C3F -> $00D9                SPI0CR2         EQU     $00D9
004C3F 7F4C3F -> $0040                XFRW            EQU     $40
004C3F 7F4C3F -> $0010                MODFEN          EQU     $10
004C3F 7F4C3F -> $0008                BIDIROE         EQU     $08
004C3F 7F4C3F -> $0002                SPISWAI         EQU     $02
004C3F 7F4C3F -> $0001                SPC0            EQU     $01
004C3F 7F4C3F -> $00DA                SPIBR           EQU     $00DA
004C3F 7F4C3F -> $00DA                SPI0BR          EQU     $00DA
004C3F 7F4C3F -> $0040                SPPR2           EQU     $40
004C3F 7F4C3F -> $0020                SPPR1           EQU     $20
004C3F 7F4C3F -> $0010                SPPR0           EQU     $10
004C3F 7F4C3F -> $0004                SPR2            EQU     $04
004C3F 7F4C3F -> $0002                SPR1            EQU     $02
004C3F 7F4C3F -> $0001                SPR0            EQU     $01
004C3F 7F4C3F -> $00DB                SPISR           EQU     $00DB
004C3F 7F4C3F -> $00DB                SPI0SR          EQU     $00DB
004C3F 7F4C3F -> $0080                SPIF            EQU     $80
004C3F 7F4C3F -> $0020                SPTEF           EQU     $20
004C3F 7F4C3F -> $0010                MODF            EQU     $10
004C3F 7F4C3F -> $00DC                SPIDRH          EQU     $00DC
004C3F 7F4C3F -> $00DC                SPI0DRH         EQU     $00DC
004C3F 7F4C3F -> $00DD                SPIDRL          EQU     $00DD
004C3F 7F4C3F -> $00DD                SPI0DRL         EQU     $00DD
                                      ;$00DE to $00DF reserved
004C3F 7F4C3F -> $00E0                IBAD            EQU     $00E0
004C3F 7F4C3F -> $00E0                I0BAD           EQU     $00E0
                                      ;ADR7           EQU     $80
                                      ;ADR6           EQU     $40
                                      ;ADR5           EQU     $20
                                      ;ADR4           EQU     $10
                                      ;ADR3           EQU     $08
                                      ;ADR2           EQU     $04
                                      ;ADR1           EQU     $02
004C3F 7F4C3F -> $00E1                IBFD            EQU     $00E1
004C3F 7F4C3F -> $00E1                I0BFD           EQU     $00E1
                                      ;IBC7           EQU     $80
                                      ;IBC6           EQU     $40
                                      ;IBC5           EQU     $20
                                      ;IBC4           EQU     $10
                                      ;IBC3           EQU     $08
                                      ;IBC2           EQU     $04
                                      ;IBC1           EQU     $02
                                      ;IBC0           EQU     $01
004C3F 7F4C3F -> $00E2                IBCR            EQU     $00E2
004C3F 7F4C3F -> $00E2                I0BCR           EQU     $00E2
                                      ;IBEN           EQU     $80
                                      ;IBIE           EQU     $40
                                      ;SL             EQU     $20
                                      ;RX             EQU     $10
                                      ;TXAK           EQU     $08
                                      ;RSTA           EQU     $04
                                      ;IBSWAI         EQU     $01
004C3F 7F4C3F -> $00E3                IBSR            EQU     $00E3
004C3F 7F4C3F -> $00E3                I0BSR           EQU     $00E3
                                      ;TCF            EQU     $80
                                      ;IAAS           EQU     $40
                                      ;IBB            EQU     $20
                                      ;RXAK           EQU     $01
                                      ;SRW            EQU     $04
                                      ;IBIF           EQU     $02
004C3F 7F4C3F -> $00E4                IBDR            EQU     $00E4
004C3F 7F4C3F -> $00E4                I0BDR           EQU     $00E4
004C3F 7F4C3F -> $00E5                IBCR2           EQU     $00E5
004C3F 7F4C3F -> $00E5                I0BCR2          EQU     $00E5
                                      ;GCEN           EQU     $80
                                      ;ADTYPE         EQU     $40
                                      ;ADR2           EQU     $04
                                      ;ADR1           EQU     $02
                                      ;ADR0           EQU     $01
                                      ;$00E6 to $00EF reserved
004C3F 7F4C3F -> $00F0                SPI1CR1         EQU     $00F0
                                      ;SPIE           EQU     $80
                                      ;SPE            EQU     $40
                                      ;SPTIE          EQU     $20
                                      ;MSTR           EQU     $10
                                      ;CPOL           EQU     $08
                                      ;CPHA           EQU     $04
                                      ;SSOE           EQU     $02
                                      ;LSBFE          EQU     $01
004C3F 7F4C3F -> $00F1                SPI1CR2         EQU     $00F1
                                      ;XFRW           EQU     $40
                                      ;MODFEN         EQU     $10
                                      ;BIDIROE        EQU     $08
                                      ;SPISWAI        EQU     $02
                                      ;SPC0           EQU     $01
004C3F 7F4C3F -> $00F2                SPI1BR          EQU     $00F2
                                      ;SPPR2          EQU     $40
                                      ;SPPR1          EQU     $20
                                      ;SPPR0          EQU     $10
                                      ;SPR2           EQU     $04
                                      ;SPR1           EQU     $02
                                      ;SPR0           EQU     $01
004C3F 7F4C3F -> $00F3                SPI1SR          EQU     $00F3
                                      ;SPIF           EQU     $80
                                      ;SPTEF          EQU     $20
                                      ;MODF           EQU     $10
004C3F 7F4C3F -> $00F4                SPI1DRH         EQU     $00F4
004C3F 7F4C3F -> $00F5                SPI1DRL         EQU     $00F5
                                      ;$00F6 to $00F7 reserved
004C3F 7F4C3F -> $00F8                SPI2CR1         EQU     $00F8
                                      ;SPIE           EQU     $80
                                      ;SPE            EQU     $40
                                      ;SPTIE          EQU     $20
                                      ;MSTR           EQU     $10
                                      ;CPOL           EQU     $08
                                      ;CPHA           EQU     $04
                                      ;SSOE           EQU     $02
                                      ;LSBFE          EQU     $01
004C3F 7F4C3F -> $00F9                SPI2CR2         EQU     $00F9
                                      ;XFRW           EQU     $40
                                      ;MODFEN         EQU     $10
                                      ;BIDIROE        EQU     $08
                                      ;SPISWAI        EQU     $02
                                      ;SPC0           EQU     $01
004C3F 7F4C3F -> $00FA                SPI2BR          EQU     $00FA
                                      ;SPPR2          EQU     $40
                                      ;SPPR1          EQU     $20
                                      ;SPPR0          EQU     $10
                                      ;SPR2           EQU     $04
                                      ;SPR1           EQU     $02
                                      ;SPR0           EQU     $01
004C3F 7F4C3F -> $00FB                SPI2SR          EQU     $00FB
                                      ;SPIF           EQU     $80
                                      ;SPTEF          EQU     $20
                                      ;MODF           EQU     $10
004C3F 7F4C3F -> $00FC                SPI2DRH         EQU     $00FC
004C3F 7F4C3F -> $00FD                SPI2DRL         EQU     $00FD
                                      ;$00FE to $00FF reserved
004C3F 7F4C3F -> $0100                FCLKDIV         EQU     $0100
004C3F 7F4C3F -> $0080                FDIVLD          EQU     $80
004C3F 7F4C3F -> $0040                FDIV6           EQU     $40
004C3F 7F4C3F -> $0020                FDIV5           EQU     $20
004C3F 7F4C3F -> $0010                FDIV4           EQU     $10
004C3F 7F4C3F -> $0008                FDIV3           EQU     $08
004C3F 7F4C3F -> $0004                FDIV2           EQU     $04
004C3F 7F4C3F -> $0002                FDIV1           EQU     $02
004C3F 7F4C3F -> $0001                FDIV0           EQU     $01
004C3F 7F4C3F -> $0101                FSEC            EQU     $0101
004C3F 7F4C3F -> $0080                KEYEN1          EQU     $80
004C3F 7F4C3F -> $0040                KEYEN2          EQU     $40
004C3F 7F4C3F -> $0020                RNV5            EQU     $20
004C3F 7F4C3F -> $0010                RNV4            EQU     $10
004C3F 7F4C3F -> $0008                RNV3            EQU     $08
004C3F 7F4C3F -> $0004                RNV2            EQU     $04
004C3F 7F4C3F -> $0002                SEC1            EQU     $02
004C3F 7F4C3F -> $0001                SEC0            EQU     $01
004C3F 7F4C3F -> $0102                FCCOBIX         EQU     $0102
004C3F 7F4C3F -> $0004                CCOBIX2         EQU     $04
004C3F 7F4C3F -> $0002                CCOBIX1         EQU     $02
004C3F 7F4C3F -> $0001                CCOBIX0         EQU     $01
004C3F 7F4C3F -> $0103                FECCRIX         EQU     $0103
004C3F 7F4C3F -> $0004                ECCRIX2         EQU     $04
004C3F 7F4C3F -> $0002                ECCRIX1         EQU     $02
004C3F 7F4C3F -> $0001                ECCRIX0         EQU     $01
004C3F 7F4C3F -> $0104                FCNFG           EQU     $0104
004C3F 7F4C3F -> $0080                CCIE            EQU     $80
004C3F 7F4C3F -> $0010                IGNSF           EQU     $10
004C3F 7F4C3F -> $0002                FDFD            EQU     $02
004C3F 7F4C3F -> $0001                FSFD            EQU     $01
004C3F 7F4C3F -> $0105                FERCNFG         EQU     $0105
004C3F 7F4C3F -> $0080                ERSERIE         EQU     $80
004C3F 7F4C3F -> $0040                PGMERIE         EQU     $40
004C3F 7F4C3F -> $0010                EPVIOLIE        EQU     $10
004C3F 7F4C3F -> $0008                ERSVIE1         EQU     $08
004C3F 7F4C3F -> $0004                ERSVIE0         EQU     $04
004C3F 7F4C3F -> $0002                DFDIE           EQU     $02
004C3F 7F4C3F -> $0001                SFDIE           EQU     $01
004C3F 7F4C3F -> $0106                FSTAT           EQU     $0106
004C3F 7F4C3F -> $0080                CCIF            EQU     $80
004C3F 7F4C3F -> $0020                ACCERR          EQU     $20
004C3F 7F4C3F -> $0010                FPVIOL          EQU     $10
004C3F 7F4C3F -> $0008                MGBUSY          EQU     $08
004C3F 7F4C3F -> $0002                MGSTAT1         EQU     $02
004C3F 7F4C3F -> $0001                MGSTAT0         EQU     $01
004C3F 7F4C3F -> $0107                FERSTAT         EQU     $0107
004C3F 7F4C3F -> $0080                ERSERIF         EQU     $80
004C3F 7F4C3F -> $0040                PGMERIF         EQU     $40
004C3F 7F4C3F -> $0010                EPVIOLIF        EQU     $10
004C3F 7F4C3F -> $0008                ERSVIF1         EQU     $08
004C3F 7F4C3F -> $0004                ERSVIF0         EQU     $04
004C3F 7F4C3F -> $0002                DFDIF           EQU     $02
004C3F 7F4C3F -> $0001                SFDIF           EQU     $01
004C3F 7F4C3F -> $0108                FPROT           EQU     $0108
004C3F 7F4C3F -> $0080                FPOPEN          EQU     $80
004C3F 7F4C3F -> $0040                RNV6            EQU     $40
004C3F 7F4C3F -> $0020                FPHDIS          EQU     $20
004C3F 7F4C3F -> $0010                FPHS1           EQU     $10
004C3F 7F4C3F -> $0008                FPHS0           EQU     $08
004C3F 7F4C3F -> $0004                FPLDIS          EQU     $04
004C3F 7F4C3F -> $0002                FPLS1           EQU     $02
004C3F 7F4C3F -> $0001                FPLS0           EQU     $01
004C3F 7F4C3F -> $0109                EPROT           EQU     $0109
004C3F 7F4C3F -> $0080                EPOPEN          EQU     $80
004C3F 7F4C3F -> $0040                RNV6            EQU     $40
004C3F 7F4C3F -> $0020                RNV5            EQU     $20
004C3F 7F4C3F -> $0010                RNV4            EQU     $10
004C3F 7F4C3F -> $0008                EPDIS           EQU     $08
004C3F 7F4C3F -> $0004                EPS2            EQU     $04
004C3F 7F4C3F -> $0002                EPS1            EQU     $02
004C3F 7F4C3F -> $0001                EPS0            EQU     $01
004C3F 7F4C3F -> $010A                FCCOBHI         EQU     $010A
004C3F 7F4C3F -> $0080                CCOB15          EQU     $80
004C3F 7F4C3F -> $0040                CCOB14          EQU     $40
004C3F 7F4C3F -> $0020                CCOB13          EQU     $20
004C3F 7F4C3F -> $0010                CCOB12          EQU     $10
004C3F 7F4C3F -> $0008                CCOB11          EQU     $08
004C3F 7F4C3F -> $0004                CCOB10          EQU     $04
004C3F 7F4C3F -> $0002                CCOB9           EQU     $02
004C3F 7F4C3F -> $0001                CCOB8           EQU     $01
004C3F 7F4C3F -> $010B                FCCOBLO         EQU     $010B
004C3F 7F4C3F -> $0080                CCOB7           EQU     $80
004C3F 7F4C3F -> $0040                CCOB6           EQU     $40
004C3F 7F4C3F -> $0020                CCOB5           EQU     $20
004C3F 7F4C3F -> $0010                CCOB4           EQU     $10
004C3F 7F4C3F -> $0008                CCOB3           EQU     $08
004C3F 7F4C3F -> $0004                CCOB2           EQU     $04
004C3F 7F4C3F -> $0002                CCOB1           EQU     $02
004C3F 7F4C3F -> $0001                CCOB0           EQU     $01
004C3F 7F4C3F -> $010C                ETAGHI          EQU     $010C
004C3F 7F4C3F -> $010D                ETAGLO          EQU     $010D
004C3F 7F4C3F -> $010E                FECCRHI         EQU     $010E
004C3F 7F4C3F -> $010F                FECCRLO         EQU     $010F
004C3F 7F4C3F -> $0110                FOPT            EQU     $0110
004C3F 7F4C3F -> $0080                NV7             EQU     $80
004C3F 7F4C3F -> $0040                NV6             EQU     $40
004C3F 7F4C3F -> $0020                NV5             EQU     $20
004C3F 7F4C3F -> $0010                NV4             EQU     $10
004C3F 7F4C3F -> $0008                NV3             EQU     $08
004C3F 7F4C3F -> $0004                NV2             EQU     $04
004C3F 7F4C3F -> $0002                NV1             EQU     $02
004C3F 7F4C3F -> $0001                NV0             EQU     $01
                                      ;$0111 to $0113 reserved
004C3F 7F4C3F -> $0114                MPUFLG          EQU     $0114
004C3F 7F4C3F -> $0080                AEF             EQU     $80
004C3F 7F4C3F -> $0040                WPF             EQU     $40
004C3F 7F4C3F -> $0020                NEXF            EQU     $20
004C3F 7F4C3F -> $0001                SVSF            EQU     $01
004C3F 7F4C3F -> $0115                MPUASTAT0       EQU     $0115
004C3F 7F4C3F -> $0040                ADDR22          EQU     $40
004C3F 7F4C3F -> $0020                ADDR21          EQU     $20
004C3F 7F4C3F -> $0010                ADDR20          EQU     $10
004C3F 7F4C3F -> $0008                ADDR19          EQU     $08
004C3F 7F4C3F -> $0004                ADDR18          EQU     $04
004C3F 7F4C3F -> $0002                ADDR17          EQU     $02
004C3F 7F4C3F -> $0001                ADDR16          EQU     $01
004C3F 7F4C3F -> $0116                MPUASTAT1       EQU     $0116
004C3F 7F4C3F -> $0080                ADDR15          EQU     $80
004C3F 7F4C3F -> $0040                ADDR14          EQU     $40
004C3F 7F4C3F -> $0020                ADDR13          EQU     $20
004C3F 7F4C3F -> $0010                ADDR12          EQU     $10
004C3F 7F4C3F -> $0008                ADDR11          EQU     $08
004C3F 7F4C3F -> $0004                ADDR10          EQU     $04
004C3F 7F4C3F -> $0002                ADDR9           EQU     $02
004C3F 7F4C3F -> $0001                ADDR8           EQU     $01
004C3F 7F4C3F -> $0117                MPUASTAT2       EQU     $0117
004C3F 7F4C3F -> $0080                ADDR7           EQU     $80
004C3F 7F4C3F -> $0040                ADDR6           EQU     $40
004C3F 7F4C3F -> $0020                ADDR5           EQU     $20
004C3F 7F4C3F -> $0010                ADDR4           EQU     $10
004C3F 7F4C3F -> $0008                ADDR3           EQU     $08
004C3F 7F4C3F -> $0004                ADDR2           EQU     $04
004C3F 7F4C3F -> $0002                ADDR1           EQU     $02
004C3F 7F4C3F -> $0001                ADDR0           EQU     $01
                                      ;$0118 reserved
004C3F 7F4C3F -> $0119                MPUSEL          EQU     $0119
004C3F 7F4C3F -> $0080                SVSEN           EQU     $80
004C3F 7F4C3F -> $0007                SEL             EQU     $07
004C3F 7F4C3F -> $011A                MPUDESC0        EQU     $011A
004C3F 7F4C3F -> $0080                MSTR0           EQU     $80
004C3F 7F4C3F -> $0040                MSTR1           EQU     $40
004C3F 7F4C3F -> $0020                MSTR2           EQU     $20
004C3F 7F4C3F -> $0010                MSTR3           EQU     $10
004C3F 7F4C3F -> $0008                LOW_ADDR22      EQU     $08
004C3F 7F4C3F -> $0004                LOW_ADDR21      EQU     $04
004C3F 7F4C3F -> $0002                LOW_ADDR20      EQU     $02
004C3F 7F4C3F -> $0001                LOW_ADDR19      EQU     $01
004C3F 7F4C3F -> $011B                MPUDESC1        EQU     $011B
004C3F 7F4C3F -> $0080                LOW_ADDR18      EQU     $80
004C3F 7F4C3F -> $0040                LOW_ADDR17      EQU     $40
004C3F 7F4C3F -> $0020                LOW_ADDR16      EQU     $20
004C3F 7F4C3F -> $0010                LOW_ADDR15      EQU     $10
004C3F 7F4C3F -> $0008                LOW_ADDR14      EQU     $08
004C3F 7F4C3F -> $0004                LOW_ADDR13      EQU     $04
004C3F 7F4C3F -> $0002                LOW_ADDR12      EQU     $02
004C3F 7F4C3F -> $0001                LOW_ADDR11      EQU     $01
004C3F 7F4C3F -> $011C                MPUDESC2        EQU     $011C
004C3F 7F4C3F -> $0080                LOW_ADDR10      EQU     $80
004C3F 7F4C3F -> $0040                LOW_ADDR9       EQU     $40
004C3F 7F4C3F -> $0020                LOW_ADDR8       EQU     $20
004C3F 7F4C3F -> $0010                LOW_ADDR7       EQU     $10
004C3F 7F4C3F -> $0008                LOW_ADDR6       EQU     $08
004C3F 7F4C3F -> $0004                LOW_ADDR5       EQU     $04
004C3F 7F4C3F -> $0002                LOW_ADDR4       EQU     $02
004C3F 7F4C3F -> $0001                LOW_ADDR3       EQU     $01
004C3F 7F4C3F -> $011D                MPUDESC3        EQU     $011D
004C3F 7F4C3F -> $0080                WP              EQU     $80
004C3F 7F4C3F -> $0040                NEX             EQU     $40
004C3F 7F4C3F -> $0008                HIGH_ADDR22     EQU     $08
004C3F 7F4C3F -> $0004                HIGH_ADDR21     EQU     $04
004C3F 7F4C3F -> $0002                HIGH_ADDR20     EQU     $02
004C3F 7F4C3F -> $0001                HIGH_ADDR19     EQU     $01
004C3F 7F4C3F -> $011E                MPUDESC4        EQU     $011E
004C3F 7F4C3F -> $0080                HIGH_ADDR18     EQU     $80
004C3F 7F4C3F -> $0040                HIGH_ADDR17     EQU     $40
004C3F 7F4C3F -> $0020                HIGH_ADDR16     EQU     $20
004C3F 7F4C3F -> $0010                HIGH_ADDR15     EQU     $10
004C3F 7F4C3F -> $0008                HIGH_ADDR14     EQU     $08
004C3F 7F4C3F -> $0004                HIGH_ADDR13     EQU     $04
004C3F 7F4C3F -> $0002                HIGH_ADDR12     EQU     $02
004C3F 7F4C3F -> $0001                HIGH_ADDR11     EQU     $01
004C3F 7F4C3F -> $011F                MPUDESC5        EQU     $011F
004C3F 7F4C3F -> $0080                HIGH_ADDR10     EQU     $80
004C3F 7F4C3F -> $0040                HIGH_ADDR9      EQU     $40
004C3F 7F4C3F -> $0020                HIGH_ADDR8      EQU     $20
004C3F 7F4C3F -> $0010                HIGH_ADDR7      EQU     $10
004C3F 7F4C3F -> $0008                HIGH_ADDR6      EQU     $08
004C3F 7F4C3F -> $0004                HIGH_ADDR5      EQU     $04
004C3F 7F4C3F -> $0002                HIGH_ADDR4      EQU     $02
004C3F 7F4C3F -> $0001                HIGH_ADDR3      EQU     $01
                                      ;$0120 reserved
004C3F 7F4C3F -> $0121                IVBR            EQU     $0121
                                      ;$0122 to $0125reserved
004C3F 7F4C3F -> $0126                XGPRIO          EQU     $0126
004C3F 7F4C3F -> $0007                XILVL           EQU     $07
004C3F 7F4C3F -> $0127                CFADDR          EQU     $0127
004C3F 7F4C3F -> $0128                CFDATA0         EQU     $0128
004C3F 7F4C3F -> $0129                CFDATA1         EQU     $0129
004C3F 7F4C3F -> $012A                CFDATA2         EQU     $012A
004C3F 7F4C3F -> $012B                CFDATA3         EQU     $012B
004C3F 7F4C3F -> $012C                CFDATA4         EQU     $012C
004C3F 7F4C3F -> $012D                CFDATA5         EQU     $012D
004C3F 7F4C3F -> $012E                CFDATA6         EQU     $012E
004C3F 7F4C3F -> $012F                CFDATA7         EQU     $012F
004C3F 7F4C3F -> $0080                RQST            EQU     $80
004C3F 7F4C3F -> $0007                PRIOLVL         EQU     $07
004C3F 7F4C3F -> $0130                SCI4BDH         EQU     $0130
                                      ;IREN           EQU     $80
                                      ;TNP1           EQU     $40
                                      ;TNP0           EQU     $20
                                      ;SBR12          EQU     $10
                                      ;SBR11          EQU     $08
                                      ;SBR10          EQU     $04
                                      ;SBR9           EQU     $02
                                      ;SBR8           EQU     $01
004C3F 7F4C3F -> $0130                SCI4ASR1        EQU     $0130
                                      ;RXEDGIF        EQU     $80
                                      ;BERRV          EQU     $04
                                      ;BERRIF         EQU     $02
                                      ;BKDIF          EQU     $01
004C3F 7F4C3F -> $0131                SCI4BDL         EQU     $0131
                                      ;SBR7           EQU     $80
                                      ;SBR6           EQU     $40
                                      ;SBR5           EQU     $20
                                      ;SBR4           EQU     $10
                                      ;SBR3           EQU     $08
                                      ;SBR2           EQU     $04
                                      ;SBR1           EQU     $02
                                      ;SBR0           EQU     $01
004C3F 7F4C3F -> $0131                SCI4ACR1        EQU     $0131
                                      ;RXEDGIE        EQU     $80
                                      ;BERRIE         EQU     $02
                                      ;BKDIE          EQU     $01
004C3F 7F4C3F -> $0132                SCI4CR1         EQU     $0132
                                      ;LOOPS          EQU     $80
                                      ;SCISWAI        EQU     $40
                                      ;RSRC           EQU     $20
                                      ;M              EQU     $10
                                      ;WAKE           EQU     $08
                                      ;ILT            EQU     $04
                                      ;PE             EQU     $02
                                      ;PT             EQU     $01
004C3F 7F4C3F -> $0132                SCI4ACR2        EQU     $0132
                                      ;BERRM1         EQU     $04
                                      ;BERRM0         EQU     $02
                                      ;BKDFE          EQU     $01
004C3F 7F4C3F -> $0133                SCI4CR2         EQU     $0133
                                      ;TXIE           EQU     $80
                                      ;TCIE           EQU     $40
                                      ;RIE            EQU     $20
                                      ;ILIE           EQU     $10
                                      ;TE             EQU     $08
                                      ;RE             EQU     $04
                                      ;RWU            EQU     $02
                                      ;SBK            EQU     $01
004C3F 7F4C3F -> $0134                SCI4SR1         EQU     $0134
                                      ;TDRE           EQU     $80
                                      ;TC             EQU     $40
                                      ;RDRFF          EQU     $20
                                      ;IDLE           EQU     $10
                                      ;OR             EQU     $08
                                      ;NF             EQU     $04
                                      ;FE             EQU     $02
                                      ;PF             EQU     $01
004C3F 7F4C3F -> $0135                SCI4SR2         EQU     $0135
                                      ;BRK13          EQU     $04
                                      ;TXDIR          EQU     $02
                                      ;RAF            EQU     $01
004C3F 7F4C3F -> $0136                SCI4DRH         EQU     $0136
                                      ;R8             EQU     $80
                                      ;T8             EQU     $40
004C3F 7F4C3F -> $0137                SCI4DRL         EQU     $0137
004C3F 7F4C3F -> $0138                SCI5BDH         EQU     $0138
                                      ;IREN           EQU     $80
                                      ;TNP1           EQU     $40
                                      ;TNP0           EQU     $20
                                      ;SBR12          EQU     $10
                                      ;SBR11          EQU     $08
                                      ;SBR10          EQU     $04
                                      ;SBR9           EQU     $02
                                      ;SBR8           EQU     $01
004C3F 7F4C3F -> $0138                SCI5ASR1        EQU     $0138
                                      ;RXEDGIF        EQU     $80
                                      ;BERRV          EQU     $04
                                      ;BERRIF         EQU     $02
                                      ;BKDIF          EQU     $01
004C3F 7F4C3F -> $0139                SCI5BDL         EQU     $0139
                                      ;SBR7           EQU     $80
                                      ;SBR6           EQU     $40
                                      ;SBR5           EQU     $20
                                      ;SBR4           EQU     $10
                                      ;SBR3           EQU     $08
                                      ;SBR2           EQU     $04
                                      ;SBR1           EQU     $02
                                      ;SBR0           EQU     $01
004C3F 7F4C3F -> $0139                SCI5ACR1        EQU     $0139
                                      ;RXEDGIE        EQU     $80
                                      ;BERRIE         EQU     $02
                                      ;BKDIE          EQU     $01
004C3F 7F4C3F -> $013A                SCI5CR1         EQU     $013A
                                      ;LOOPS          EQU     $80
                                      ;SCISWAI        EQU     $40
                                      ;RSRC           EQU     $20
                                      ;M              EQU     $10
                                      ;WAKE           EQU     $08
                                      ;ILT            EQU     $04
                                      ;PE             EQU     $02
                                      ;PT             EQU     $01
004C3F 7F4C3F -> $013A                SCI5ACR2        EQU     $013A
                                      ;BERRM1         EQU     $04
                                      ;BERRM0         EQU     $02
                                      ;BKDFE          EQU     $01
004C3F 7F4C3F -> $013B                SCI5CR2         EQU     $013B
                                      ;TXIE           EQU     $80
                                      ;TCIE           EQU     $40
                                      ;RIE            EQU     $20
                                      ;ILIE           EQU     $10
                                      ;TE             EQU     $08
                                      ;RE             EQU     $04
                                      ;RWU            EQU     $02
                                      ;SBK            EQU     $01
004C3F 7F4C3F -> $013C                SCI5SR1         EQU     $013C
                                      ;TDRE           EQU     $80
                                      ;TC             EQU     $40
                                      ;RDRFF          EQU     $20
                                      ;IDLE           EQU     $10
                                      ;OR             EQU     $08
                                      ;NF             EQU     $04
                                      ;FE             EQU     $02
                                      ;PF             EQU     $01
004C3F 7F4C3F -> $013D                SCI5SR2         EQU     $013D
                                      ;BRK13          EQU     $04
                                      ;TXDIR          EQU     $02
                                      ;RAF            EQU     $01
004C3F 7F4C3F -> $013E                SCI5DRH         EQU     $013E
                                      ;R8             EQU     $80
                                      ;T8             EQU     $40
004C3F 7F4C3F -> $013F                SCI5DRL         EQU     $013F
004C3F 7F4C3F -> $0140                CANCTL0         EQU     $0140
004C3F 7F4C3F -> $0140                CAN0CTL0        EQU     $0140
004C3F 7F4C3F -> $0080                RXFRM           EQU     $80
004C3F 7F4C3F -> $0040                RXACT           EQU     $40
004C3F 7F4C3F -> $0020                CSWAI           EQU     $20
004C3F 7F4C3F -> $0010                SYNCH           EQU     $10
004C3F 7F4C3F -> $0008                TIMEN           EQU     $08
004C3F 7F4C3F -> $0004                WUPE            EQU     $04
004C3F 7F4C3F -> $0002                SLPRQ           EQU     $02
004C3F 7F4C3F -> $0001                INITRQ          EQU     $01
004C3F 7F4C3F -> $0141                CANCTL1         EQU     $0141
004C3F 7F4C3F -> $0141                CAN0CTL1        EQU     $0141
004C3F 7F4C3F -> $0080                CANE            EQU     $80
004C3F 7F4C3F -> $0040                CLKSRC          EQU     $40
004C3F 7F4C3F -> $0020                LOOPB           EQU     $20
004C3F 7F4C3F -> $0010                LISTEN          EQU     $10
004C3F 7F4C3F -> $0004                WUPM            EQU     $04
004C3F 7F4C3F -> $0002                SLPAK           EQU     $02
004C3F 7F4C3F -> $0001                INITAK          EQU     $01
004C3F 7F4C3F -> $0142                CANBTR0         EQU     $0142
004C3F 7F4C3F -> $0142                CAN0BTR0        EQU     $0142
004C3F 7F4C3F -> $0080                SJW1            EQU     $80
004C3F 7F4C3F -> $0040                SJW0            EQU     $40
004C3F 7F4C3F -> $0020                BRP5            EQU     $20
004C3F 7F4C3F -> $0010                BRP4            EQU     $10
004C3F 7F4C3F -> $0008                BRP3            EQU     $08
004C3F 7F4C3F -> $0004                BRP2            EQU     $04
004C3F 7F4C3F -> $0002                BRP1            EQU     $02
004C3F 7F4C3F -> $0001                BRP0            EQU     $01
004C3F 7F4C3F -> $0143                CANBTR1         EQU     $0143
004C3F 7F4C3F -> $0143                CAN0BTR1        EQU     $0143
004C3F 7F4C3F -> $0080                SAMP            EQU     $80
004C3F 7F4C3F -> $0040                TSEG22          EQU     $40
004C3F 7F4C3F -> $0020                TSEG21          EQU     $20
004C3F 7F4C3F -> $0010                TSEG20          EQU     $10
004C3F 7F4C3F -> $0008                TSEG13          EQU     $08
004C3F 7F4C3F -> $0004                TSEG12          EQU     $04
004C3F 7F4C3F -> $0002                TSEG11          EQU     $02
004C3F 7F4C3F -> $0001                TESG10          EQU     $01
004C3F 7F4C3F -> $0144                CANRFLG         EQU     $0144
004C3F 7F4C3F -> $0144                CAN0RFLG        EQU     $0144
004C3F 7F4C3F -> $0080                WUPIF           EQU     $80
004C3F 7F4C3F -> $0040                CSCIF           EQU     $40
004C3F 7F4C3F -> $0020                RSTAT1          EQU     $20
004C3F 7F4C3F -> $0010                RSTAT0          EQU     $10
004C3F 7F4C3F -> $0008                TSTAT1          EQU     $08
004C3F 7F4C3F -> $0004                TSTAT0          EQU     $04
004C3F 7F4C3F -> $0002                OVRIF           EQU     $02
004C3F 7F4C3F -> $0001                RXF             EQU     $01
004C3F 7F4C3F -> $0145                CANRIER         EQU     $0145
004C3F 7F4C3F -> $0145                CAN0RIER        EQU     $0145
004C3F 7F4C3F -> $0080                WUPIE           EQU     $80
004C3F 7F4C3F -> $0040                CSCIE           EQU     $40
004C3F 7F4C3F -> $0020                RSTATE1         EQU     $20
004C3F 7F4C3F -> $0010                RSTATE0         EQU     $10
004C3F 7F4C3F -> $0008                TSTATE1         EQU     $08
004C3F 7F4C3F -> $0004                TSTATE0         EQU     $04
004C3F 7F4C3F -> $0002                OVRIE           EQU     $02
004C3F 7F4C3F -> $0001                RXFIE           EQU     $01
004C3F 7F4C3F -> $0146                CANTFLG         EQU     $0146
004C3F 7F4C3F -> $0146                CAN0TFLG        EQU     $0146
004C3F 7F4C3F -> $0004                TXE2            EQU     $04
004C3F 7F4C3F -> $0002                TXE1            EQU     $02
004C3F 7F4C3F -> $0001                TXE0            EQU     $01
004C3F 7F4C3F -> $0147                CANTIER         EQU     $0147
004C3F 7F4C3F -> $0147                CAN0TIER        EQU     $0147
004C3F 7F4C3F -> $0004                TXEIE2          EQU     $04
004C3F 7F4C3F -> $0002                TXEIE1          EQU     $02
004C3F 7F4C3F -> $0001                TXEIE0          EQU     $01
004C3F 7F4C3F -> $0148                CANTARQ         EQU     $0148
004C3F 7F4C3F -> $0148                CAN0TARQ        EQU     $0148
004C3F 7F4C3F -> $0004                ABTRQ2          EQU     $04
004C3F 7F4C3F -> $0002                ABTRQ1          EQU     $02
004C3F 7F4C3F -> $0001                ABTRQ0          EQU     $01
004C3F 7F4C3F -> $0149                CANTAAK         EQU     $0149
004C3F 7F4C3F -> $0149                CAN0TAAK        EQU     $0149
004C3F 7F4C3F -> $0004                ABTAK2          EQU     $04
004C3F 7F4C3F -> $0002                ABTAK1          EQU     $02
004C3F 7F4C3F -> $0001                ABTAK0          EQU     $01
004C3F 7F4C3F -> $014A                CANTBSEL        EQU     $014A
004C3F 7F4C3F -> $014A                CAN0TBSEL       EQU     $014A
004C3F 7F4C3F -> $0004                TX2             EQU     $04
004C3F 7F4C3F -> $0002                TX1             EQU     $02
004C3F 7F4C3F -> $0001                TX0             EQU     $01
004C3F 7F4C3F -> $014B                CANIDAC         EQU     $014B
004C3F 7F4C3F -> $014B                CAN0IDAC        EQU     $014B
004C3F 7F4C3F -> $0020                IDAM1           EQU     $20
004C3F 7F4C3F -> $0010                IDAM0           EQU     $10
004C3F 7F4C3F -> $0004                IDHIT2          EQU     $04
004C3F 7F4C3F -> $0002                IDHIT1          EQU     $02
004C3F 7F4C3F -> $0001                IDHIT0          EQU     $01
                                      ; $14c  reserved
004C3F 7F4C3F -> $014D                CANMISC         EQU     $014D
004C3F 7F4C3F -> $014D                CAN0MISC        EQU     $014D
004C3F 7F4C3F -> $0001                BOHOLD          EQU     $01
004C3F 7F4C3F -> $014E                CANRXERR        EQU     $014E
004C3F 7F4C3F -> $014E                CAN0RXERR       EQU     $014E
004C3F 7F4C3F -> $014F                CANTXERR        EQU     $014F
004C3F 7F4C3F -> $014F                CAN0TXERR       EQU     $014F
004C3F 7F4C3F -> $0150                CANIDAR0        EQU     $0150
004C3F 7F4C3F -> $0150                CAN0IDAR0       EQU     $0150
004C3F 7F4C3F -> $0151                CANIDAR1        EQU     $0151
004C3F 7F4C3F -> $0151                CAN0IDAR1       EQU     $0151
004C3F 7F4C3F -> $0152                CANIDAR2        EQU     $0152
004C3F 7F4C3F -> $0152                CAN0IDAR2       EQU     $0152
004C3F 7F4C3F -> $0153                CANIDAR3        EQU     $0153
004C3F 7F4C3F -> $0153                CAN0IDAR3       EQU     $0153
004C3F 7F4C3F -> $0154                CANIDMR0        EQU     $0154
004C3F 7F4C3F -> $0154                CAN0IDMR0       EQU     $0154
004C3F 7F4C3F -> $0155                CANIDMR1        EQU     $0155
004C3F 7F4C3F -> $0155                CAN0IDMR1       EQU     $0155
004C3F 7F4C3F -> $0156                CANIDMR2        EQU     $0156
004C3F 7F4C3F -> $0156                CAN0IDMR2       EQU     $0156
004C3F 7F4C3F -> $0157                CANIDMR3        EQU     $0157
004C3F 7F4C3F -> $0157                CAN0IDMR3       EQU     $0157
004C3F 7F4C3F -> $0158                CANIDAR4        EQU     $0158
004C3F 7F4C3F -> $0158                CAN0IDAR4       EQU     $0158
004C3F 7F4C3F -> $0159                CANIDAR5        EQU     $0159
004C3F 7F4C3F -> $0159                CAN0IDAR5       EQU     $0159
004C3F 7F4C3F -> $015A                CANIDAR6        EQU     $015A
004C3F 7F4C3F -> $015A                CAN0IDAR6       EQU     $015A
004C3F 7F4C3F -> $015B                CANIDAR7        EQU     $015B
004C3F 7F4C3F -> $015B                CAN0IDAR7       EQU     $015B
004C3F 7F4C3F -> $015C                CANIDMR4        EQU     $015C
004C3F 7F4C3F -> $015C                CAN0IDMR4       EQU     $015C
004C3F 7F4C3F -> $015D                CANIDMR5        EQU     $015D
004C3F 7F4C3F -> $015D                CAN0IDMR5       EQU     $015D
004C3F 7F4C3F -> $015E                CANIDMR6        EQU     $015E
004C3F 7F4C3F -> $015E                CAN0IDMR6       EQU     $015E
004C3F 7F4C3F -> $015F                CANIDMR7        EQU     $015F
004C3F 7F4C3F -> $015F                CAN0IDMR7       EQU     $015F
004C3F 7F4C3F -> $0160                CANRXIDR0       EQU     $0160
004C3F 7F4C3F -> $0160                CAN0RXIDR0      EQU     $0160
004C3F 7F4C3F -> $0161                CANRXIDR1       EQU     $0161
004C3F 7F4C3F -> $0161                CAN0RXIDR1      EQU     $0161
004C3F 7F4C3F -> $0162                CANRXIDR2       EQU     $0162
004C3F 7F4C3F -> $0162                CAN0RXIDR2      EQU     $0162
004C3F 7F4C3F -> $0163                CANRXIDR3       EQU     $0163
004C3F 7F4C3F -> $0163                CAN0RXIDR3      EQU     $0163
004C3F 7F4C3F -> $0164                CANRXDSR0       EQU     $0164
004C3F 7F4C3F -> $0164                CAN0RXDSR0      EQU     $0164
004C3F 7F4C3F -> $0165                CANRXDSR1       EQU     $0165
004C3F 7F4C3F -> $0165                CAN0RXDSR1      EQU     $0165
004C3F 7F4C3F -> $0166                CANRXDSR2       EQU     $0166
004C3F 7F4C3F -> $0166                CAN0RXDSR2      EQU     $0166
004C3F 7F4C3F -> $0167                CANRXDSR3       EQU     $0167
004C3F 7F4C3F -> $0167                CAN0RXDSR3      EQU     $0167
004C3F 7F4C3F -> $0168                CANRXDSR4       EQU     $0168
004C3F 7F4C3F -> $0168                CAN0RXDSR4      EQU     $0168
004C3F 7F4C3F -> $0169                CANRXDSR5       EQU     $0169
004C3F 7F4C3F -> $0169                CAN0RXDSR5      EQU     $0169
004C3F 7F4C3F -> $016A                CANRXDSR6       EQU     $016A
004C3F 7F4C3F -> $016A                CAN0RXDSR6      EQU     $016A
004C3F 7F4C3F -> $016B                CANRXDSR7       EQU     $016B
004C3F 7F4C3F -> $016B                CAN0RXDSR7      EQU     $016B
004C3F 7F4C3F -> $016C                CANRXDLR        EQU     $016C
004C3F 7F4C3F -> $016C                CAN0RXDLR       EQU     $016C
                                      ;$016D reserved
004C3F 7F4C3F -> $016E                CANRTSRH        EQU     $016E
004C3F 7F4C3F -> $016E                CAN0RTSRH       EQU     $016E
004C3F 7F4C3F -> $016F                CANRTSRL        EQU     $016F
004C3F 7F4C3F -> $016F                CAN0RTSRL       EQU     $016F
004C3F 7F4C3F -> $0170                CANTXIDR0       EQU     $0170
004C3F 7F4C3F -> $0170                CAN0TXIDR0      EQU     $0170
004C3F 7F4C3F -> $0171                CANTXIDR1       EQU     $0171
004C3F 7F4C3F -> $0171                CAN0TXIDR1      EQU     $0171
004C3F 7F4C3F -> $0172                CANTXIDR2       EQU     $0172
004C3F 7F4C3F -> $0172                CAN0TXIDR2      EQU     $0172
004C3F 7F4C3F -> $0172                CANTXIDR2       EQU     $0172
004C3F 7F4C3F -> $0172                CAN0TXIDR2      EQU     $0172
004C3F 7F4C3F -> $0173                CANTXIDR3       EQU     $0173
004C3F 7F4C3F -> $0173                CAN0TXIDR3      EQU     $0173
004C3F 7F4C3F -> $0174                CANTXDSR0       EQU     $0174
004C3F 7F4C3F -> $0174                CAN0TXDSR0      EQU     $0174
004C3F 7F4C3F -> $0175                CANTXDSR1       EQU     $0175
004C3F 7F4C3F -> $0175                CAN0TXDSR1      EQU     $0175
004C3F 7F4C3F -> $0176                CANTXDSR2       EQU     $0176
004C3F 7F4C3F -> $0176                CAN0TXDSR2      EQU     $0176
004C3F 7F4C3F -> $0177                CANTXDSR3       EQU     $0177
004C3F 7F4C3F -> $0177                CAN0TXDSR3      EQU     $0177
004C3F 7F4C3F -> $0178                CANTXDSR4       EQU     $0178
004C3F 7F4C3F -> $0178                CAN0TXDSR4      EQU     $0178
004C3F 7F4C3F -> $0179                CANTXDSR5       EQU     $0179
004C3F 7F4C3F -> $0179                CAN0TXDSR5      EQU     $0179
004C3F 7F4C3F -> $017A                CANTXDSR6       EQU     $017A
004C3F 7F4C3F -> $017A                CAN0TXDSR6      EQU     $017A
004C3F 7F4C3F -> $017B                CANTXDSR7       EQU     $017B
004C3F 7F4C3F -> $017B                CAN0TXDSR7      EQU     $017B
004C3F 7F4C3F -> $017C                CANTXDLR        EQU     $017C
004C3F 7F4C3F -> $017C                CAN0TXDLR       EQU     $017C
004C3F 7F4C3F -> $017D                CANTXTBPR       EQU     $017D
004C3F 7F4C3F -> $017D                CAN0TXTBPR      EQU     $017D
004C3F 7F4C3F -> $017E                CANTXTSRH       EQU     $017E
004C3F 7F4C3F -> $017E                CAN0TXTSRH      EQU     $017E
004C3F 7F4C3F -> $017F                CANTXTSRL       EQU     $017F
004C3F 7F4C3F -> $017F                CAN0TXTSRL      EQU     $017F
004C3F 7F4C3F -> $0180                CAN1CTL0        EQU     $0180
                                      ;RXFRM          EQU     $80
                                      ;RXACT          EQU     $40
                                      ;CSWAI          EQU     $20
                                      ;SYNCH          EQU     $10
                                      ;TIMEN          EQU     $08
                                      ;WUPE           EQU     $04
                                      ;SLPRQ          EQU     $02
                                      ;INITRQ         EQU     $01
004C3F 7F4C3F -> $0181                CAN1CTL1        EQU     $0181
                                      ;CANE           EQU     $80
                                      ;CLKSRC         EQU     $40
                                      ;LOOPB          EQU     $20
                                      ;LISTEN         EQU     $10
                                      ;WUPM           EQU     $04
                                      ;SLPAK          EQU     $02
                                      ;INITAK         EQU     $01
004C3F 7F4C3F -> $0182                CAN1BTR0        EQU     $0182
                                      ;SJW1           EQU     $80
                                      ;SJW0           EQU     $40
                                      ;BRP5           EQU     $20
                                      ;BRP4           EQU     $10
                                      ;BRP3           EQU     $08
                                      ;BRP2           EQU     $04
                                      ;BRP1           EQU     $02
                                      ;BRP0           EQU     $01
004C3F 7F4C3F -> $0183                CAN1BTR1        EQU     $0183
                                      ;SAMP           EQU     $80
                                      ;TSEG22         EQU     $40
                                      ;TSEG21         EQU     $20
                                      ;TSEG20         EQU     $10
                                      ;TSEG13         EQU     $08
                                      ;TSEG12         EQU     $04
                                      ;TSEG11         EQU     $02
                                      ;TESG10         EQU     $01
004C3F 7F4C3F -> $0184                CAN1RFLG        EQU     $0184
                                      ;WUPIF          EQU     $80
                                      ;CSCIF          EQU     $40
                                      ;RSTAT1         EQU     $20
                                      ;RSTAT0         EQU     $10
                                      ;TSTAT1         EQU     $08
                                      ;TSTAT0         EQU     $04
                                      ;OVRIF          EQU     $02
                                      ;RXF            EQU     $01
004C3F 7F4C3F -> $0185                CAN1RIER        EQU     $0185
                                      ;WUPIE          EQU     $80
                                      ;CSCIE          EQU     $40
                                      ;RSTATE1        EQU     $20
                                      ;RSTATE0        EQU     $10
                                      ;TSTATE1        EQU     $08
                                      ;TSTATE0        EQU     $04
                                      ;OVRIE          EQU     $02
                                      ;RXFIE          EQU     $01
004C3F 7F4C3F -> $0186                CAN1TFLG        EQU     $0186
                                      ;TXE2           EQU     $04
                                      ;TXE1           EQU     $02
                                      ;TXE0           EQU     $01
004C3F 7F4C3F -> $0187                CAN1TIER        EQU     $0187
                                      ;TXEIE2         EQU     $04
                                      ;TXEIE1         EQU     $02
                                      ;TXEIE0         EQU     $01
004C3F 7F4C3F -> $0188                CAN1TARQ        EQU     $0188
                                      ;ABTRQ2         EQU     $04
                                      ;ABTRQ1         EQU     $02
                                      ;ABTRQ0         EQU     $01
004C3F 7F4C3F -> $0189                CAN1TAAK        EQU     $0189
                                      ;ABTAK2         EQU     $04
                                      ;ABTAK1         EQU     $02
                                      ;ABTAK0         EQU     $01
004C3F 7F4C3F -> $018A                CAN1TBSEL       EQU     $018A
                                      ;TX2            EQU     $04
                                      ;TX1            EQU     $02
                                      ;TX0            EQU     $01
004C3F 7F4C3F -> $018B                CAN1IDAC        EQU     $018B
                                      ;IDAM1          EQU     $20
                                      ;IDAM0          EQU     $10
                                      ;IDHIT2         EQU     $04
                                      ;IDHIT1         EQU     $02
                                      ;IDHIT0         EQU     $01
                                      ;$18C  reserved
004C3F 7F4C3F -> $018D                CAN1MISC        EQU     $018D
                                      ;BOHOLD         EQU     $01
004C3F 7F4C3F -> $018E                CAN1RXERR       EQU     $018E
004C3F 7F4C3F -> $018F                CAN1TXERR       EQU     $018F
004C3F 7F4C3F -> $0190                CAN1IDAR0       EQU     $0190
004C3F 7F4C3F -> $0191                CAN1IDAR1       EQU     $0191
004C3F 7F4C3F -> $0192                CAN1IDAR2       EQU     $0192
004C3F 7F4C3F -> $0193                CAN1IDAR3       EQU     $0193
004C3F 7F4C3F -> $0194                CAN1IDMR0       EQU     $0194
004C3F 7F4C3F -> $0195                CAN1IDMR1       EQU     $0195
004C3F 7F4C3F -> $0196                CAN1IDMR2       EQU     $0196
004C3F 7F4C3F -> $0197                CAN1IDMR3       EQU     $0197
004C3F 7F4C3F -> $0198                CAN1IDAR4       EQU     $0198
004C3F 7F4C3F -> $0199                CAN1IDAR5       EQU     $0199
004C3F 7F4C3F -> $019A                CAN1IDAR6       EQU     $019A
004C3F 7F4C3F -> $019B                CAN1IDAR7       EQU     $019B
004C3F 7F4C3F -> $019C                CAN1IDMR4       EQU     $019C
004C3F 7F4C3F -> $019D                CAN1IDMR5       EQU     $019D
004C3F 7F4C3F -> $019E                CAN1IDMR6       EQU     $019E
004C3F 7F4C3F -> $019F                CAN1IDMR7       EQU     $019F
004C3F 7F4C3F -> $01A0                CAN1RXIDR0      EQU     $01A0
004C3F 7F4C3F -> $01A1                CAN1RXIDR1      EQU     $01A1
004C3F 7F4C3F -> $01A2                CAN1RXIDR2      EQU     $01A2
004C3F 7F4C3F -> $01A3                CAN1RXIDR3      EQU     $01A3
004C3F 7F4C3F -> $01A4                CAN1RXDSR0      EQU     $01A4
004C3F 7F4C3F -> $01A5                CAN1RXDSR1      EQU     $01A5
004C3F 7F4C3F -> $01A6                CAN1RXDSR2      EQU     $01A6
004C3F 7F4C3F -> $01A7                CAN1RXDSR3      EQU     $01A7
004C3F 7F4C3F -> $01A8                CAN1RXDSR4      EQU     $01A8
004C3F 7F4C3F -> $01A9                CAN1RXDSR5      EQU     $01A9
004C3F 7F4C3F -> $01AA                CAN1RXDSR6      EQU     $01AA
004C3F 7F4C3F -> $01AB                CAN1RXDSR7      EQU     $01AB
004C3F 7F4C3F -> $01AC                CAN1RXDLR       EQU     $01AC
                                      ;$01AD reserved
004C3F 7F4C3F -> $01AE                CAN1RTSRH       EQU     $01AE
004C3F 7F4C3F -> $01AF                CAN1RTSRL       EQU     $01AF
004C3F 7F4C3F -> $01B0                CAN1TXIDR0      EQU     $01B0
004C3F 7F4C3F -> $01B1                CAN1TXIDR1      EQU     $01B1
004C3F 7F4C3F -> $01B2                CAN1TXIDR2      EQU     $01B2
004C3F 7F4C3F -> $01B2                CAN1TXIDR2      EQU     $01B2
004C3F 7F4C3F -> $01B3                CAN1TXIDR3      EQU     $01B3
004C3F 7F4C3F -> $01B4                CAN1TXDSR0      EQU     $01B4
004C3F 7F4C3F -> $01B5                CAN1TXDSR1      EQU     $01B5
004C3F 7F4C3F -> $01B6                CAN1TXDSR2      EQU     $01B6
004C3F 7F4C3F -> $01B7                CAN1XDSR3       EQU     $01B7
004C3F 7F4C3F -> $01B7                CAN1TXDSR3      EQU     $01B7
004C3F 7F4C3F -> $01B8                CAN1TXDSR4      EQU     $01B8
004C3F 7F4C3F -> $01B9                CAN1TXDSR5      EQU     $01B9
004C3F 7F4C3F -> $01BA                CAN1TXDSR6      EQU     $01BA
004C3F 7F4C3F -> $01BB                CAN1TXDSR7      EQU     $01BB
004C3F 7F4C3F -> $01BC                CAN1TXDLR       EQU     $01BC
004C3F 7F4C3F -> $01BD                CAN1TXTBPR      EQU     $01BD
004C3F 7F4C3F -> $01BE                CAN1TXTSRH      EQU     $01BE
004C3F 7F4C3F -> $01BF                CAN1TXTSRL      EQU     $01BF
004C3F 7F4C3F -> $01C0                CAN2CTL0        EQU     $01C0
                                      ;RXFRM          EQU     $80
                                      ;RXACT          EQU     $40
                                      ;CSWAI          EQU     $20
                                      ;SYNCH          EQU     $10
                                      ;TIMEN          EQU     $08
                                      ;WUPE           EQU     $04
                                      ;SLPRQ          EQU     $02
                                      ;INITRQ         EQU     $01
004C3F 7F4C3F -> $01C1                CAN2CTL1        EQU     $01C1
                                      ;CANE           EQU     $80
                                      ;CLKSRC         EQU     $40
                                      ;LOOPB          EQU     $20
                                      ;LISTEN         EQU     $10
                                      ;WUPM           EQU     $04
                                      ;SLPAK          EQU     $02
                                      ;INITAK         EQU     $01
004C3F 7F4C3F -> $01C2                CAN2BTR0        EQU     $01C2
                                      ;SJW1           EQU     $80
                                      ;SJW0           EQU     $40
                                      ;BRP5           EQU     $20
                                      ;BRP4           EQU     $10
                                      ;BRP3           EQU     $08
                                      ;BRP2           EQU     $04
                                      ;BRP1           EQU     $02
                                      ;BRP0           EQU     $01
004C3F 7F4C3F -> $01C3                CAN2BTR1        EQU     $01C3
                                      ;SAMP           EQU     $80
                                      ;TSEG22         EQU     $40
                                      ;TSEG21         EQU     $20
                                      ;TSEG20         EQU     $10
                                      ;TSEG13         EQU     $08
                                      ;TSEG12         EQU     $04
                                      ;TSEG11         EQU     $02
                                      ;TESG10         EQU     $01
004C3F 7F4C3F -> $01C4                CAN2RFLG        EQU     $01C4
                                      ;WUPIF          EQU     $80
                                      ;CSCIF          EQU     $40
                                      ;RSTAT1         EQU     $20
                                      ;RSTAT0         EQU     $10
                                      ;TSTAT1         EQU     $08
                                      ;TSTAT0         EQU     $04
                                      ;OVRIF          EQU     $02
                                      ;RXF            EQU     $01
004C3F 7F4C3F -> $01C5                CAN2RIER        EQU     $01C5
                                      ;WUPIE          EQU     $80
                                      ;CSCIE          EQU     $40
                                      ;RSTATE1        EQU     $20
                                      ;RSTATE0        EQU     $10
                                      ;TSTATE1        EQU     $08
                                      ;TSTATE0        EQU     $04
                                      ;OVRIE          EQU     $02
                                      ;RXFIE          EQU     $01
004C3F 7F4C3F -> $01C6                CAN2TFLG        EQU     $01C6
                                      ;TXE2           EQU     $04
                                      ;TXE1           EQU     $02
                                      ;TXE0           EQU     $01
004C3F 7F4C3F -> $01C7                CAN2TIER        EQU     $01C7
                                      ;TXEIE2         EQU     $04
                                      ;TXEIE1         EQU     $02
                                      ;TXEIE0         EQU     $01
004C3F 7F4C3F -> $01C8                CAN2TARQ        EQU     $01C8
                                      ;ABTRQ2         EQU     $04
                                      ;ABTRQ1         EQU     $02
                                      ;ABTRQ0         EQU     $01
004C3F 7F4C3F -> $01C9                CAN2TAAK        EQU     $01C9
                                      ;ABTAK2         EQU     $04
                                      ;ABTAK1         EQU     $02
                                      ;ABTAK0         EQU     $01
004C3F 7F4C3F -> $01CA                CAN2TBSEL       EQU     $01CA
                                      ;TX2            EQU     $04
                                      ;TX1            EQU     $02
                                      ;TX0            EQU     $01
004C3F 7F4C3F -> $01CB                CAN2IDAC        EQU     $01CB
                                      ;IDAM1          EQU     $20
                                      ;IDAM0          EQU     $10
                                      ;IDHIT2         EQU     $04
                                      ;IDHIT1         EQU     $02
                                      ;IDHIT0         EQU     $01
                                      ;$01CC  reserved
004C3F 7F4C3F -> $01CD                CAN2MISC        EQU     $01CD
                                      ;BOHOLD         EQU     $01
004C3F 7F4C3F -> $01CE                CAN2RXERR       EQU     $01CE
004C3F 7F4C3F -> $01CF                CAN2TXERR       EQU     $01CF
004C3F 7F4C3F -> $01D0                CAN2IDAR0       EQU     $01D0
004C3F 7F4C3F -> $01D1                CAN2IDAR1       EQU     $01D1
004C3F 7F4C3F -> $01D2                CAN2IDAR2       EQU     $01D2
004C3F 7F4C3F -> $01D3                CAN2IDAR3       EQU     $01D3
004C3F 7F4C3F -> $01D4                CAN2IDMR0       EQU     $01D4
004C3F 7F4C3F -> $01D5                CAN2IDMR1       EQU     $01D5
004C3F 7F4C3F -> $01D6                CAN2IDMR2       EQU     $01D6
004C3F 7F4C3F -> $01D7                CAN2IDMR3       EQU     $01D7
004C3F 7F4C3F -> $01D8                CAN2IDAR4       EQU     $01D8
004C3F 7F4C3F -> $01D9                CAN2IDAR5       EQU     $01D9
004C3F 7F4C3F -> $01DA                CAN2IDAR6       EQU     $01DA
004C3F 7F4C3F -> $01DB                CAN2IDAR7       EQU     $01DB
004C3F 7F4C3F -> $01DC                CAN2IDMR4       EQU     $01DC
004C3F 7F4C3F -> $01DD                CAN2IDMR5       EQU     $01DD
004C3F 7F4C3F -> $01DE                CAN2IDMR6       EQU     $01DE
004C3F 7F4C3F -> $01DF                CAN2IDMR7       EQU     $01DF
004C3F 7F4C3F -> $01E0                CAN2RXIDR0      EQU     $01E0
004C3F 7F4C3F -> $01E1                CAN2RXIDR1      EQU     $01E1
004C3F 7F4C3F -> $01E2                CAN2RXIDR2      EQU     $01E2
004C3F 7F4C3F -> $01E3                CAN2RXIDR3      EQU     $01E3
004C3F 7F4C3F -> $01E4                CAN2RXDSR0      EQU     $01E4
004C3F 7F4C3F -> $01E5                CAN2RXDSR1      EQU     $01E5
004C3F 7F4C3F -> $01E6                CAN2RXDSR2      EQU     $01E6
004C3F 7F4C3F -> $01E7                CAN2RXDSR3      EQU     $01E7
004C3F 7F4C3F -> $01E8                CAN2RXDSR4      EQU     $01E8
004C3F 7F4C3F -> $01E9                CAN2RXDSR5      EQU     $01E9
004C3F 7F4C3F -> $01EA                CAN2RXDSR6      EQU     $01EA
004C3F 7F4C3F -> $01EB                CAN2RXDSR7      EQU     $01EB
004C3F 7F4C3F -> $01EC                CAN2RXDLR       EQU     $01EC
                                      ;$01ED reserved
004C3F 7F4C3F -> $01EE                CAN2RTSRH       EQU     $01EE
004C3F 7F4C3F -> $01EF                CAN2RTSRL       EQU     $01EF
004C3F 7F4C3F -> $01F0                CAN2TXIDR0      EQU     $01F0
004C3F 7F4C3F -> $01F1                CAN2TXIDR1      EQU     $01F1
004C3F 7F4C3F -> $01F2                CAN2TXIDR2      EQU     $01F2
004C3F 7F4C3F -> $01F2                CAN2TXIDR2      EQU     $01F2
004C3F 7F4C3F -> $01F3                CAN2TXIDR3      EQU     $01F3
004C3F 7F4C3F -> $01F4                CAN2TXDSR0      EQU     $01F4
004C3F 7F4C3F -> $01F5                CAN2TXDSR1      EQU     $01F5
004C3F 7F4C3F -> $01F6                CAN2TXDSR2      EQU     $01F6
004C3F 7F4C3F -> $01F7                CAN2XDSR3       EQU     $01F7
004C3F 7F4C3F -> $01F7                CAN2TXDSR3      EQU     $01F7
004C3F 7F4C3F -> $01F8                CAN2TXDSR4      EQU     $01F8
004C3F 7F4C3F -> $01F9                CAN2TXDSR5      EQU     $01F9
004C3F 7F4C3F -> $01FA                CAN2TXDSR6      EQU     $01FA
004C3F 7F4C3F -> $01FB                CAN2TXDSR7      EQU     $01FB
004C3F 7F4C3F -> $01FC                CAN2TXDLR       EQU     $01FC
004C3F 7F4C3F -> $01FD                CAN2TXTBPR      EQU     $01FD
004C3F 7F4C3F -> $01FE                CAN2TXTSRH      EQU     $01FE
004C3F 7F4C3F -> $01FF                CAN2TXTSRL      EQU     $01FF
004C3F 7F4C3F -> $0200                CAN3CTL0        EQU     $0200
                                      ;RXFRM          EQU     $80
                                      ;RXACT          EQU     $40
                                      ;CSWAI          EQU     $20
                                      ;SYNCH          EQU     $10
                                      ;TIMEN          EQU     $08
                                      ;WUPE           EQU     $04
                                      ;SLPRQ          EQU     $02
                                      ;INITRQ         EQU     $01
004C3F 7F4C3F -> $0201                CAN3CTL1        EQU     $0201
                                      ;CANE           EQU     $80
                                      ;CLKSRC         EQU     $40
                                      ;LOOPB          EQU     $20
                                      ;LISTEN         EQU     $10
                                      ;WUPM           EQU     $04
                                      ;SLPAK          EQU     $02
                                      ;INITAK         EQU     $01
004C3F 7F4C3F -> $0202                CAN3BTR0        EQU     $0202
                                      ;SJW1           EQU     $80
                                      ;SJW0           EQU     $40
                                      ;BRP5           EQU     $20
                                      ;BRP4           EQU     $10
                                      ;BRP3           EQU     $08
                                      ;BRP2           EQU     $04
                                      ;BRP1           EQU     $02
                                      ;BRP0           EQU     $01
004C3F 7F4C3F -> $0203                CAN3BTR1        EQU     $0203
                                      ;SAMP           EQU     $80
                                      ;TSEG22         EQU     $40
                                      ;TSEG21         EQU     $20
                                      ;TSEG20         EQU     $10
                                      ;TSEG13         EQU     $08
                                      ;TSEG12         EQU     $04
                                      ;TSEG11         EQU     $02
                                      ;TESG10         EQU     $01
004C3F 7F4C3F -> $0204                CAN3RFLG        EQU     $0204
                                      ;WUPIF          EQU     $80
                                      ;CSCIF          EQU     $40
                                      ;RSTAT1         EQU     $20
                                      ;RSTAT0         EQU     $10
                                      ;TSTAT1         EQU     $08
                                      ;TSTAT0         EQU     $04
                                      ;OVRIF          EQU     $02
                                      ;RXF            EQU     $01
004C3F 7F4C3F -> $0205                CAN3RIER        EQU     $0205
                                      ;WUPIE          EQU     $80
                                      ;CSCIE          EQU     $40
                                      ;RSTATE1        EQU     $20
                                      ;RSTATE0        EQU     $10
                                      ;TSTATE1        EQU     $08
                                      ;TSTATE0        EQU     $04
                                      ;OVRIE          EQU     $02
                                      ;RXFIE          EQU     $01
004C3F 7F4C3F -> $0206                CAN3TFLG        EQU     $0206
                                      ;TXE2           EQU     $04
                                      ;TXE1           EQU     $02
                                      ;TXE0           EQU     $01
004C3F 7F4C3F -> $0207                CAN3TIER        EQU     $0207
                                      ;TXEIE2         EQU     $04
                                      ;TXEIE1         EQU     $02
                                      ;TXEIE0         EQU     $01
004C3F 7F4C3F -> $0208                CAN3TARQ        EQU     $0208
                                      ;ABTRQ2         EQU     $04
                                      ;ABTRQ1         EQU     $02
                                      ;ABTRQ0         EQU     $01
004C3F 7F4C3F -> $0209                CAN3TAAK        EQU     $0209
                                      ;ABTAK2         EQU     $04
                                      ;ABTAK1         EQU     $02
                                      ;ABTAK0         EQU     $01
004C3F 7F4C3F -> $020A                CAN3TBSEL       EQU     $020A
                                      ;TX2            EQU     $04
                                      ;TX1            EQU     $02
                                      ;TX0            EQU     $01
004C3F 7F4C3F -> $020B                CAN3IDAC        EQU     $020B
                                      ;IDAM1          EQU     $20
                                      ;IDAM0          EQU     $10
                                      ;IDHIT2         EQU     $04
                                      ;IDHIT1         EQU     $02
                                      ;IDHIT0         EQU     $01
                                      ;$020C  reserved
004C3F 7F4C3F -> $020D                CAN3MISC        EQU     $020D
                                      ;BOHOLD         EQU     $01
004C3F 7F4C3F -> $020E                CAN3RXERR       EQU     $020E
004C3F 7F4C3F -> $020F                CAN3TXERR       EQU     $020F
004C3F 7F4C3F -> $0210                CAN3IDAR0       EQU     $0210
004C3F 7F4C3F -> $0211                CAN3IDAR1       EQU     $0211
004C3F 7F4C3F -> $0212                CAN3IDAR2       EQU     $0212
004C3F 7F4C3F -> $0213                CAN3IDAR3       EQU     $0213
004C3F 7F4C3F -> $0214                CAN3IDMR0       EQU     $0214
004C3F 7F4C3F -> $0215                CAN3IDMR1       EQU     $0215
004C3F 7F4C3F -> $0216                CAN3IDMR2       EQU     $0216
004C3F 7F4C3F -> $0217                CAN3IDMR3       EQU     $0217
004C3F 7F4C3F -> $0218                CAN3IDAR4       EQU     $0218
004C3F 7F4C3F -> $0219                CAN3IDAR5       EQU     $0219
004C3F 7F4C3F -> $021A                CAN3IDAR6       EQU     $021A
004C3F 7F4C3F -> $021B                CAN3IDAR7       EQU     $021B
004C3F 7F4C3F -> $021C                CAN3IDMR4       EQU     $021C
004C3F 7F4C3F -> $021D                CAN3IDMR5       EQU     $021D
004C3F 7F4C3F -> $021E                CAN3IDMR6       EQU     $021E
004C3F 7F4C3F -> $021F                CAN3IDMR7       EQU     $021F
004C3F 7F4C3F -> $0220                CAN3RXIDR0      EQU     $0220
004C3F 7F4C3F -> $0221                CAN3RXIDR1      EQU     $0221
004C3F 7F4C3F -> $0222                CAN3RXIDR2      EQU     $0222
004C3F 7F4C3F -> $0223                CAN3RXIDR3      EQU     $0223
004C3F 7F4C3F -> $0224                CAN3RXDSR0      EQU     $0224
004C3F 7F4C3F -> $0225                CAN3RXDSR1      EQU     $0225
004C3F 7F4C3F -> $0226                CAN3RXDSR2      EQU     $0226
004C3F 7F4C3F -> $0227                CAN3RXDSR3      EQU     $0227
004C3F 7F4C3F -> $0228                CAN3RXDSR4      EQU     $0228
004C3F 7F4C3F -> $0229                CAN3RXDSR5      EQU     $0229
004C3F 7F4C3F -> $022A                CAN3RXDSR6      EQU     $022A
004C3F 7F4C3F -> $022B                CAN3RXDSR7      EQU     $022B
004C3F 7F4C3F -> $022C                CAN3RXDLR       EQU     $022C
                                      ;$022D reserved
004C3F 7F4C3F -> $022E                CAN3RTSRH       EQU     $022E
004C3F 7F4C3F -> $022F                CAN3RTSRL       EQU     $022F
004C3F 7F4C3F -> $0230                CAN3TXIDR0      EQU     $0230
004C3F 7F4C3F -> $0231                CAN3TXIDR1      EQU     $0231
004C3F 7F4C3F -> $0232                CAN3TXIDR2      EQU     $0232
004C3F 7F4C3F -> $0232                CAN3TXIDR2      EQU     $0232
004C3F 7F4C3F -> $0233                CAN3TXIDR3      EQU     $0233
004C3F 7F4C3F -> $0234                CAN3TXDSR0      EQU     $0234
004C3F 7F4C3F -> $0235                CAN3TXDSR1      EQU     $0235
004C3F 7F4C3F -> $0236                CAN3TXDSR2      EQU     $0236
004C3F 7F4C3F -> $0237                CAN3XDSR3       EQU     $0237
004C3F 7F4C3F -> $0237                CAN3TXDSR3      EQU     $0237
004C3F 7F4C3F -> $0238                CAN3TXDSR4      EQU     $0238
004C3F 7F4C3F -> $0239                CAN3TXDSR5      EQU     $0239
004C3F 7F4C3F -> $023A                CAN3TXDSR6      EQU     $023A
004C3F 7F4C3F -> $023B                CAN3TXDSR7      EQU     $023B
004C3F 7F4C3F -> $023C                CAN3TXDLR       EQU     $023C
004C3F 7F4C3F -> $023D                CAN3TXTBPR      EQU     $023D
004C3F 7F4C3F -> $023E                CAN3TXTSRH      EQU     $023E
004C3F 7F4C3F -> $023F                CAN3TXTSRL      EQU     $023F
004C3F 7F4C3F -> $0240                PTT             EQU     $0240
004C3F 7F4C3F -> $0080                PTT7            EQU     $80
004C3F 7F4C3F -> $0040                PTT6            EQU     $40
004C3F 7F4C3F -> $0020                PTT5            EQU     $20
004C3F 7F4C3F -> $0010                PTT4            EQU     $10
004C3F 7F4C3F -> $0008                PTT3            EQU     $08
004C3F 7F4C3F -> $0004                PTT2            EQU     $04
004C3F 7F4C3F -> $0002                PTT1            EQU     $02
004C3F 7F4C3F -> $0001                PTT0            EQU     $01
004C3F 7F4C3F -> $0080                PT7             EQU     $80
004C3F 7F4C3F -> $0040                PT6             EQU     $40
004C3F 7F4C3F -> $0020                PT5             EQU     $20
004C3F 7F4C3F -> $0010                PT4             EQU     $10
004C3F 7F4C3F -> $0008                PT3             EQU     $08
004C3F 7F4C3F -> $0004                PT2             EQU     $04
004C3F 7F4C3F -> $0002                PT1             EQU     $02
004C3F 7F4C3F -> $0001                PT0             EQU     $01
004C3F 7F4C3F -> $0241                PTIT            EQU     $0241
004C3F 7F4C3F -> $0080                PTIT7           EQU     $80
004C3F 7F4C3F -> $0040                PTIT6           EQU     $40
004C3F 7F4C3F -> $0020                PTIT5           EQU     $20
004C3F 7F4C3F -> $0010                PTIT4           EQU     $10
004C3F 7F4C3F -> $0008                PTIT3           EQU     $08
004C3F 7F4C3F -> $0004                PTIT2           EQU     $04
004C3F 7F4C3F -> $0002                PTIT1           EQU     $02
004C3F 7F4C3F -> $0001                PTIT0           EQU     $01
004C3F 7F4C3F -> $0242                DDRT            EQU     $0242
004C3F 7F4C3F -> $0080                DDRT7           EQU     $80
004C3F 7F4C3F -> $0040                DDRT6           EQU     $40
004C3F 7F4C3F -> $0020                DDRT5           EQU     $20
004C3F 7F4C3F -> $0010                DDRT4           EQU     $10
004C3F 7F4C3F -> $0008                DDRT3           EQU     $08
004C3F 7F4C3F -> $0004                DDRT2           EQU     $04
004C3F 7F4C3F -> $0002                DDRT1           EQU     $02
004C3F 7F4C3F -> $0001                DDRT0           EQU     $01
004C3F 7F4C3F -> $0243                RDRT            EQU     $0243
004C3F 7F4C3F -> $0080                RDRT7           EQU     $80
004C3F 7F4C3F -> $0040                RDRT6           EQU     $40
004C3F 7F4C3F -> $0020                RDRT5           EQU     $20
004C3F 7F4C3F -> $0010                RDRT4           EQU     $10
004C3F 7F4C3F -> $0008                RDRT3           EQU     $08
004C3F 7F4C3F -> $0004                RDRT2           EQU     $04
004C3F 7F4C3F -> $0002                RDRT1           EQU     $02
004C3F 7F4C3F -> $0001                RDRT0           EQU     $01
004C3F 7F4C3F -> $0244                PERT            EQU     $0244
004C3F 7F4C3F -> $0080                PERT7           EQU     $80
004C3F 7F4C3F -> $0040                PERT6           EQU     $40
004C3F 7F4C3F -> $0020                PERT5           EQU     $20
004C3F 7F4C3F -> $0010                PERT4           EQU     $10
004C3F 7F4C3F -> $0008                PERT3           EQU     $08
004C3F 7F4C3F -> $0004                PERT2           EQU     $04
004C3F 7F4C3F -> $0002                PERT1           EQU     $02
004C3F 7F4C3F -> $0001                PERT0           EQU     $01
004C3F 7F4C3F -> $0245                PPST            EQU     $0245
004C3F 7F4C3F -> $0080                PPST7           EQU     $80
004C3F 7F4C3F -> $0040                PPST6           EQU     $40
004C3F 7F4C3F -> $0020                PPST5           EQU     $20
004C3F 7F4C3F -> $0010                PPST4           EQU     $10
004C3F 7F4C3F -> $0008                PPST3           EQU     $08
004C3F 7F4C3F -> $0004                PPST2           EQU     $04
004C3F 7F4C3F -> $0002                PPST1           EQU     $02
004C3F 7F4C3F -> $0001                PPST0           EQU     $01
                                      ;$0246 to $0247 reserved
004C3F 7F4C3F -> $0248                PTS             EQU     $0248
004C3F 7F4C3F -> $0080                PTS7            EQU     $80
004C3F 7F4C3F -> $0040                PTS6            EQU     $40
004C3F 7F4C3F -> $0020                PTS5            EQU     $20
004C3F 7F4C3F -> $0010                PTS4            EQU     $10
004C3F 7F4C3F -> $0008                PTS3            EQU     $08
004C3F 7F4C3F -> $0004                PTS2            EQU     $04
004C3F 7F4C3F -> $0002                PTS1            EQU     $02
004C3F 7F4C3F -> $0001                PTS0            EQU     $01
004C3F 7F4C3F -> $0080                PS7             EQU     $80
004C3F 7F4C3F -> $0040                PS6             EQU     $40
004C3F 7F4C3F -> $0020                PS5             EQU     $20
004C3F 7F4C3F -> $0010                PS4             EQU     $10
004C3F 7F4C3F -> $0008                PS3             EQU     $08
004C3F 7F4C3F -> $0004                PS2             EQU     $04
004C3F 7F4C3F -> $0002                PS1             EQU     $02
004C3F 7F4C3F -> $0001                PS0             EQU     $01
004C3F 7F4C3F -> $0249                PTIS            EQU     $0249
004C3F 7F4C3F -> $0080                PTIS7           EQU     $80
004C3F 7F4C3F -> $0040                PTIS6           EQU     $40
004C3F 7F4C3F -> $0020                PTIS5           EQU     $20
004C3F 7F4C3F -> $0010                PTIS4           EQU     $10
004C3F 7F4C3F -> $0008                PTIS3           EQU     $08
004C3F 7F4C3F -> $0004                PTIS2           EQU     $04
004C3F 7F4C3F -> $0002                PTIS1           EQU     $02
004C3F 7F4C3F -> $0001                PTIS0           EQU     $01
004C3F 7F4C3F -> $024A                DDRS            EQU     $024A
004C3F 7F4C3F -> $0080                DDRS7           EQU     $80
004C3F 7F4C3F -> $0040                DDRS6           EQU     $40
004C3F 7F4C3F -> $0020                DDRS5           EQU     $20
004C3F 7F4C3F -> $0010                DDRS4           EQU     $10
004C3F 7F4C3F -> $0008                DDRS3           EQU     $08
004C3F 7F4C3F -> $0004                DDRS2           EQU     $04
004C3F 7F4C3F -> $0002                DDRS1           EQU     $02
004C3F 7F4C3F -> $0001                DDRS0           EQU     $01
004C3F 7F4C3F -> $024B                RDRS            EQU     $024B
004C3F 7F4C3F -> $0080                RDRS7           EQU     $80
004C3F 7F4C3F -> $0040                RDRS6           EQU     $40
004C3F 7F4C3F -> $0020                RDRS5           EQU     $20
004C3F 7F4C3F -> $0010                RDRS4           EQU     $10
004C3F 7F4C3F -> $0008                RDRS3           EQU     $08
004C3F 7F4C3F -> $0004                RDRS2           EQU     $04
004C3F 7F4C3F -> $0002                RDRS1           EQU     $02
004C3F 7F4C3F -> $0001                RDRS0           EQU     $01
004C3F 7F4C3F -> $024C                PERS            EQU     $024C
004C3F 7F4C3F -> $0080                PERS7           EQU     $80
004C3F 7F4C3F -> $0040                PERS6           EQU     $40
004C3F 7F4C3F -> $0020                PERS5           EQU     $20
004C3F 7F4C3F -> $0010                PERS4           EQU     $10
004C3F 7F4C3F -> $0008                PERS3           EQU     $08
004C3F 7F4C3F -> $0004                PERS2           EQU     $04
004C3F 7F4C3F -> $0002                PERS1           EQU     $02
004C3F 7F4C3F -> $0001                PERS0           EQU     $01
004C3F 7F4C3F -> $024D                PPSS            EQU     $024D
004C3F 7F4C3F -> $0080                PPSS7           EQU     $80
004C3F 7F4C3F -> $0040                PPSS6           EQU     $40
004C3F 7F4C3F -> $0020                PPSS5           EQU     $20
004C3F 7F4C3F -> $0010                PPSS4           EQU     $10
004C3F 7F4C3F -> $0008                PPSS3           EQU     $08
004C3F 7F4C3F -> $0004                PPSS2           EQU     $04
004C3F 7F4C3F -> $0002                PPSS1           EQU     $02
004C3F 7F4C3F -> $0001                PPSS0           EQU     $01
004C3F 7F4C3F -> $024E                WOMS            EQU     $024E
004C3F 7F4C3F -> $0080                WOMS7           EQU     $80
004C3F 7F4C3F -> $0040                WOMS6           EQU     $40
004C3F 7F4C3F -> $0020                WOMS5           EQU     $20
004C3F 7F4C3F -> $0010                WOMS4           EQU     $10
004C3F 7F4C3F -> $0008                WOMS3           EQU     $08
004C3F 7F4C3F -> $0004                WOMS2           EQU     $04
004C3F 7F4C3F -> $0002                WOMS1           EQU     $02
004C3F 7F4C3F -> $0001                WOMS0           EQU     $01
                                      ;$024F reserved
004C3F 7F4C3F -> $0250                PTM             EQU     $0250
004C3F 7F4C3F -> $0080                PTM7            EQU     $80
004C3F 7F4C3F -> $0040                PTM6            EQU     $40
004C3F 7F4C3F -> $0020                PTM5            EQU     $20
004C3F 7F4C3F -> $0010                PTM4            EQU     $10
004C3F 7F4C3F -> $0008                PTM3            EQU     $08
004C3F 7F4C3F -> $0004                PTM2            EQU     $04
004C3F 7F4C3F -> $0002                PTM1            EQU     $02
004C3F 7F4C3F -> $0001                PTM0            EQU     $01
004C3F 7F4C3F -> $0080                PM7             EQU     $80
004C3F 7F4C3F -> $0040                PM6             EQU     $40
004C3F 7F4C3F -> $0020                PM5             EQU     $20
004C3F 7F4C3F -> $0010                PM4             EQU     $10
004C3F 7F4C3F -> $0008                PM3             EQU     $08
004C3F 7F4C3F -> $0004                PM2             EQU     $04
004C3F 7F4C3F -> $0002                PM1             EQU     $02
004C3F 7F4C3F -> $0001                PM0             EQU     $01
004C3F 7F4C3F -> $0251                PTIM            EQU     $0251
004C3F 7F4C3F -> $0080                PTIM7           EQU     $80
004C3F 7F4C3F -> $0040                PTIM6           EQU     $40
004C3F 7F4C3F -> $0020                PTIM5           EQU     $20
004C3F 7F4C3F -> $0010                PTIM4           EQU     $10
004C3F 7F4C3F -> $0008                PTIM3           EQU     $08
004C3F 7F4C3F -> $0004                PTIM2           EQU     $04
004C3F 7F4C3F -> $0002                PTIM1           EQU     $02
004C3F 7F4C3F -> $0001                PTIM0           EQU     $01
004C3F 7F4C3F -> $0252                DDRM            EQU     $0252
004C3F 7F4C3F -> $0080                DDRM7           EQU     $80
004C3F 7F4C3F -> $0040                DDRM6           EQU     $40
004C3F 7F4C3F -> $0020                DDRM5           EQU     $20
004C3F 7F4C3F -> $0010                DDRM4           EQU     $10
004C3F 7F4C3F -> $0008                DDRM3           EQU     $08
004C3F 7F4C3F -> $0004                DDRM2           EQU     $04
004C3F 7F4C3F -> $0002                DDRM1           EQU     $02
004C3F 7F4C3F -> $0001                DDRM0           EQU     $01
004C3F 7F4C3F -> $0253                RDRM            EQU     $0253
004C3F 7F4C3F -> $0080                RDRM7           EQU     $80
004C3F 7F4C3F -> $0040                RDRM6           EQU     $40
004C3F 7F4C3F -> $0020                RDRM5           EQU     $20
004C3F 7F4C3F -> $0010                RDRM4           EQU     $10
004C3F 7F4C3F -> $0008                RDRM3           EQU     $08
004C3F 7F4C3F -> $0004                RDRM2           EQU     $04
004C3F 7F4C3F -> $0002                RDRM1           EQU     $02
004C3F 7F4C3F -> $0001                RDRM0           EQU     $01
004C3F 7F4C3F -> $0254                PERM            EQU     $0254
004C3F 7F4C3F -> $0080                PERM7           EQU     $80
004C3F 7F4C3F -> $0040                PERM6           EQU     $40
004C3F 7F4C3F -> $0020                PERM5           EQU     $20
004C3F 7F4C3F -> $0010                PERM4           EQU     $10
004C3F 7F4C3F -> $0008                PERM3           EQU     $08
004C3F 7F4C3F -> $0004                PERM2           EQU     $04
004C3F 7F4C3F -> $0002                PERM1           EQU     $02
004C3F 7F4C3F -> $0001                PERM0           EQU     $01
004C3F 7F4C3F -> $0255                PPSM            EQU     $0255
004C3F 7F4C3F -> $0080                PPSM7           EQU     $80
004C3F 7F4C3F -> $0040                PPSM6           EQU     $40
004C3F 7F4C3F -> $0020                PPSM5           EQU     $20
004C3F 7F4C3F -> $0010                PPSM4           EQU     $10
004C3F 7F4C3F -> $0008                PPSM3           EQU     $08
004C3F 7F4C3F -> $0004                PPSM2           EQU     $04
004C3F 7F4C3F -> $0002                PPSM1           EQU     $02
004C3F 7F4C3F -> $0001                PPSM0           EQU     $01
004C3F 7F4C3F -> $0256                WOMM            EQU     $0256
004C3F 7F4C3F -> $0080                WOMM7           EQU     $80
004C3F 7F4C3F -> $0040                WOMM6           EQU     $40
004C3F 7F4C3F -> $0020                WOMM5           EQU     $20
004C3F 7F4C3F -> $0010                WOMM4           EQU     $10
004C3F 7F4C3F -> $0008                WOMM3           EQU     $08
004C3F 7F4C3F -> $0004                WOMM2           EQU     $04
004C3F 7F4C3F -> $0002                WOMM1           EQU     $02
004C3F 7F4C3F -> $0001                WOMM0           EQU     $01
004C3F 7F4C3F -> $0257                MODRR           EQU     $0257
004C3F 7F4C3F -> $0040                MODRR6          EQU     $40
004C3F 7F4C3F -> $0020                MODRR5          EQU     $20
004C3F 7F4C3F -> $0010                MODRR4          EQU     $10
004C3F 7F4C3F -> $0008                MODRR3          EQU     $08
004C3F 7F4C3F -> $0004                MODRR2          EQU     $04
004C3F 7F4C3F -> $0002                MODRR1          EQU     $02
004C3F 7F4C3F -> $0001                MODRR0          EQU     $01
004C3F 7F4C3F -> $0258                PTP             EQU     $0258
004C3F 7F4C3F -> $0080                PTP7            EQU     $80
004C3F 7F4C3F -> $0040                PTP6            EQU     $40
004C3F 7F4C3F -> $0020                PTP5            EQU     $20
004C3F 7F4C3F -> $0010                PTP4            EQU     $10
004C3F 7F4C3F -> $0008                PTP3            EQU     $08
004C3F 7F4C3F -> $0004                PTP2            EQU     $04
004C3F 7F4C3F -> $0002                PTP1            EQU     $02
004C3F 7F4C3F -> $0001                PTP0            EQU     $01
004C3F 7F4C3F -> $0080                PP7             EQU     $80
004C3F 7F4C3F -> $0040                PP6             EQU     $40
004C3F 7F4C3F -> $0020                PP5             EQU     $20
004C3F 7F4C3F -> $0010                PP4             EQU     $10
004C3F 7F4C3F -> $0008                PP3             EQU     $08
004C3F 7F4C3F -> $0004                PP2             EQU     $04
004C3F 7F4C3F -> $0002                PP1             EQU     $02
004C3F 7F4C3F -> $0001                PP0             EQU     $01
004C3F 7F4C3F -> $0259                PTIP            EQU     $0259
004C3F 7F4C3F -> $0080                PTIP7           EQU     $80
004C3F 7F4C3F -> $0040                PTIP6           EQU     $40
004C3F 7F4C3F -> $0020                PTIP5           EQU     $20
004C3F 7F4C3F -> $0010                PTIP4           EQU     $10
004C3F 7F4C3F -> $0008                PTIP3           EQU     $08
004C3F 7F4C3F -> $0004                PTIP2           EQU     $04
004C3F 7F4C3F -> $0002                PTIP1           EQU     $02
004C3F 7F4C3F -> $0001                PTIP0           EQU     $01
004C3F 7F4C3F -> $025A                DDRP            EQU     $025A
004C3F 7F4C3F -> $0080                DDRP7           EQU     $80
004C3F 7F4C3F -> $0040                DDRP6           EQU     $40
004C3F 7F4C3F -> $0020                DDRP5           EQU     $20
004C3F 7F4C3F -> $0010                DDRP4           EQU     $10
004C3F 7F4C3F -> $0008                DDRP3           EQU     $08
004C3F 7F4C3F -> $0004                DDRP2           EQU     $04
004C3F 7F4C3F -> $0002                DDRP1           EQU     $02
004C3F 7F4C3F -> $0001                DDRP0           EQU     $01
004C3F 7F4C3F -> $025B                RDRP            EQU     $025B
004C3F 7F4C3F -> $0080                RDRP7           EQU     $80
004C3F 7F4C3F -> $0040                RDRP6           EQU     $40
004C3F 7F4C3F -> $0020                RDRP5           EQU     $20
004C3F 7F4C3F -> $0010                RDRP4           EQU     $10
004C3F 7F4C3F -> $0008                RDRP3           EQU     $08
004C3F 7F4C3F -> $0004                RDRP2           EQU     $04
004C3F 7F4C3F -> $0002                RDRP1           EQU     $02
004C3F 7F4C3F -> $0001                RDRP0           EQU     $01
004C3F 7F4C3F -> $025C                PERP            EQU     $025C
004C3F 7F4C3F -> $0080                PERP7           EQU     $80
004C3F 7F4C3F -> $0040                PERP6           EQU     $40
004C3F 7F4C3F -> $0020                PERP5           EQU     $20
004C3F 7F4C3F -> $0010                PERP4           EQU     $10
004C3F 7F4C3F -> $0008                PERP3           EQU     $08
004C3F 7F4C3F -> $0004                PERP2           EQU     $04
004C3F 7F4C3F -> $0002                PERP1           EQU     $02
004C3F 7F4C3F -> $0001                PERP0           EQU     $01
004C3F 7F4C3F -> $025D                PPSP            EQU     $025D
004C3F 7F4C3F -> $0080                PPSP7           EQU     $80
004C3F 7F4C3F -> $0040                PPSP6           EQU     $40
004C3F 7F4C3F -> $0020                PPSP5           EQU     $20
004C3F 7F4C3F -> $0010                PPSP4           EQU     $10
004C3F 7F4C3F -> $0008                PPSP3           EQU     $08
004C3F 7F4C3F -> $0004                PPSP2           EQU     $04
004C3F 7F4C3F -> $0002                PPSP1           EQU     $02
004C3F 7F4C3F -> $0001                PPSP0           EQU     $01
004C3F 7F4C3F -> $025E                PIEP            EQU     $025E
004C3F 7F4C3F -> $0080                PIEP7           EQU     $80
004C3F 7F4C3F -> $0040                PIEP6           EQU     $40
004C3F 7F4C3F -> $0020                PIEP5           EQU     $20
004C3F 7F4C3F -> $0010                PIEP4           EQU     $10
004C3F 7F4C3F -> $0008                PIEP3           EQU     $08
004C3F 7F4C3F -> $0004                PIEP2           EQU     $04
004C3F 7F4C3F -> $0002                PIEP1           EQU     $02
004C3F 7F4C3F -> $0001                PIEP0           EQU     $01
004C3F 7F4C3F -> $025F                PIFP            EQU     $025F
004C3F 7F4C3F -> $0080                PIFP7           EQU     $80
004C3F 7F4C3F -> $0040                PIFP6           EQU     $40
004C3F 7F4C3F -> $0020                PIFP5           EQU     $20
004C3F 7F4C3F -> $0010                PIFP4           EQU     $10
004C3F 7F4C3F -> $0008                PIFP3           EQU     $08
004C3F 7F4C3F -> $0004                PIFP2           EQU     $04
004C3F 7F4C3F -> $0002                PIFP1           EQU     $02
004C3F 7F4C3F -> $0001                PIFP0           EQU     $01
004C3F 7F4C3F -> $0260                PTH             EQU     $0260
004C3F 7F4C3F -> $0080                PTH7            EQU     $80
004C3F 7F4C3F -> $0040                PTH6            EQU     $40
004C3F 7F4C3F -> $0020                PTH5            EQU     $20
004C3F 7F4C3F -> $0010                PTH4            EQU     $10
004C3F 7F4C3F -> $0008                PTH3            EQU     $08
004C3F 7F4C3F -> $0004                PTH2            EQU     $04
004C3F 7F4C3F -> $0002                PTH1            EQU     $02
004C3F 7F4C3F -> $0001                PTH0            EQU     $01
004C3F 7F4C3F -> $0080                PH7             EQU     $80
004C3F 7F4C3F -> $0040                PH6             EQU     $40
004C3F 7F4C3F -> $0020                PH5             EQU     $20
004C3F 7F4C3F -> $0010                PH4             EQU     $10
004C3F 7F4C3F -> $0008                PH3             EQU     $08
004C3F 7F4C3F -> $0004                PH2             EQU     $04
004C3F 7F4C3F -> $0002                PH1             EQU     $02
004C3F 7F4C3F -> $0001                PH0             EQU     $01
004C3F 7F4C3F -> $0261                PTIH            EQU     $0261
004C3F 7F4C3F -> $0080                PTIH7           EQU     $80
004C3F 7F4C3F -> $0040                PTIH6           EQU     $40
004C3F 7F4C3F -> $0020                PTIH5           EQU     $20
004C3F 7F4C3F -> $0010                PTIH4           EQU     $10
004C3F 7F4C3F -> $0008                PTIH3           EQU     $08
004C3F 7F4C3F -> $0004                PTIH2           EQU     $04
004C3F 7F4C3F -> $0002                PTIH1           EQU     $02
004C3F 7F4C3F -> $0001                PTIH0           EQU     $01
004C3F 7F4C3F -> $0262                DDRH            EQU     $0262
004C3F 7F4C3F -> $0080                DDRH7           EQU     $80
004C3F 7F4C3F -> $0040                DDRH6           EQU     $40
004C3F 7F4C3F -> $0020                DDRH5           EQU     $20
004C3F 7F4C3F -> $0010                DDRH4           EQU     $10
004C3F 7F4C3F -> $0008                DDRH3           EQU     $08
004C3F 7F4C3F -> $0004                DDRH2           EQU     $04
004C3F 7F4C3F -> $0002                DDRH1           EQU     $02
004C3F 7F4C3F -> $0001                DDRH0           EQU     $01
004C3F 7F4C3F -> $0263                RDRH            EQU     $0263
004C3F 7F4C3F -> $0080                RDRH7           EQU     $80
004C3F 7F4C3F -> $0040                RDRH6           EQU     $40
004C3F 7F4C3F -> $0020                RDRH5           EQU     $20
004C3F 7F4C3F -> $0010                RDRH4           EQU     $10
004C3F 7F4C3F -> $0008                RDRH3           EQU     $08
004C3F 7F4C3F -> $0004                RDRH2           EQU     $04
004C3F 7F4C3F -> $0002                RDRH1           EQU     $02
004C3F 7F4C3F -> $0001                RDRH0           EQU     $01
004C3F 7F4C3F -> $0264                PERH            EQU     $0264
004C3F 7F4C3F -> $0080                PERH7           EQU     $80
004C3F 7F4C3F -> $0040                PERH6           EQU     $40
004C3F 7F4C3F -> $0020                PERH5           EQU     $20
004C3F 7F4C3F -> $0010                PERH4           EQU     $10
004C3F 7F4C3F -> $0008                PERH3           EQU     $08
004C3F 7F4C3F -> $0004                PERH2           EQU     $04
004C3F 7F4C3F -> $0002                PERH1           EQU     $02
004C3F 7F4C3F -> $0001                PERH0           EQU     $01
004C3F 7F4C3F -> $0265                PPSH            EQU     $0265
004C3F 7F4C3F -> $0080                PPSH7           EQU     $80
004C3F 7F4C3F -> $0040                PPSH6           EQU     $40
004C3F 7F4C3F -> $0020                PPSH5           EQU     $20
004C3F 7F4C3F -> $0010                PPSH4           EQU     $10
004C3F 7F4C3F -> $0008                PPSH3           EQU     $08
004C3F 7F4C3F -> $0004                PPSH2           EQU     $04
004C3F 7F4C3F -> $0002                PPSH1           EQU     $02
004C3F 7F4C3F -> $0001                PPSH0           EQU     $01
004C3F 7F4C3F -> $0266                PIEH            EQU     $0266
004C3F 7F4C3F -> $0080                PIEH7           EQU     $80
004C3F 7F4C3F -> $0040                PIEH6           EQU     $40
004C3F 7F4C3F -> $0020                PIEH5           EQU     $20
004C3F 7F4C3F -> $0010                PIEH4           EQU     $10
004C3F 7F4C3F -> $0008                PIEH3           EQU     $08
004C3F 7F4C3F -> $0004                PIEH2           EQU     $04
004C3F 7F4C3F -> $0002                PIEH1           EQU     $02
004C3F 7F4C3F -> $0001                PIEH0           EQU     $01
004C3F 7F4C3F -> $0267                PIFH            EQU     $0267
004C3F 7F4C3F -> $0080                PIFH7           EQU     $80
004C3F 7F4C3F -> $0040                PIFH6           EQU     $40
004C3F 7F4C3F -> $0020                PIFH5           EQU     $20
004C3F 7F4C3F -> $0010                PIFH4           EQU     $10
004C3F 7F4C3F -> $0008                PIFH3           EQU     $08
004C3F 7F4C3F -> $0004                PIFH2           EQU     $04
004C3F 7F4C3F -> $0002                PIFH1           EQU     $02
004C3F 7F4C3F -> $0001                PIFH0           EQU     $01
004C3F 7F4C3F -> $0268                PTJ             EQU     $0268
004C3F 7F4C3F -> $0080                PTJ7            EQU     $80
004C3F 7F4C3F -> $0040                PTJ6            EQU     $40
004C3F 7F4C3F -> $0020                PTJ5            EQU     $20
004C3F 7F4C3F -> $0010                PTJ4            EQU     $10
004C3F 7F4C3F -> $0008                PTJ3            EQU     $08
004C3F 7F4C3F -> $0004                PTJ2            EQU     $04
004C3F 7F4C3F -> $0002                PTJ1            EQU     $02
004C3F 7F4C3F -> $0001                PTJ0            EQU     $01
004C3F 7F4C3F -> $0080                PJ7             EQU     $80
004C3F 7F4C3F -> $0040                PJ6             EQU     $40
004C3F 7F4C3F -> $0020                PJ5             EQU     $20
004C3F 7F4C3F -> $0010                PJ4             EQU     $10
004C3F 7F4C3F -> $0008                PJ3             EQU     $08
004C3F 7F4C3F -> $0004                PJ2             EQU     $04
004C3F 7F4C3F -> $0002                PJ1             EQU     $02
004C3F 7F4C3F -> $0001                PJ0             EQU     $01
004C3F 7F4C3F -> $0269                PTIJ            EQU     $0269
004C3F 7F4C3F -> $0080                PTIJ7           EQU     $80
004C3F 7F4C3F -> $0040                PTIJ6           EQU     $40
004C3F 7F4C3F -> $0020                PTIJ5           EQU     $20
004C3F 7F4C3F -> $0010                PTIJ4           EQU     $10
004C3F 7F4C3F -> $0008                PTIJ3           EQU     $08
004C3F 7F4C3F -> $0004                PTIJ2           EQU     $04
004C3F 7F4C3F -> $0002                PTIJ1           EQU     $02
004C3F 7F4C3F -> $0001                PTIJ0           EQU     $01
004C3F 7F4C3F -> $026A                DDRJ            EQU     $026A
004C3F 7F4C3F -> $0080                DDRJ7           EQU     $80
004C3F 7F4C3F -> $0040                DDRJ6           EQU     $40
004C3F 7F4C3F -> $0020                DDRJ5           EQU     $20
004C3F 7F4C3F -> $0010                DDRJ4           EQU     $10
004C3F 7F4C3F -> $0008                DDRJ3           EQU     $08
004C3F 7F4C3F -> $0004                DDRJ2           EQU     $04
004C3F 7F4C3F -> $0002                DDRJ1           EQU     $02
004C3F 7F4C3F -> $0001                DDRJ0           EQU     $01
004C3F 7F4C3F -> $026B                RDRJ            EQU     $026B
004C3F 7F4C3F -> $0080                RDRJ7           EQU     $80
004C3F 7F4C3F -> $0040                RDRJ6           EQU     $40
004C3F 7F4C3F -> $0020                RDRJ5           EQU     $20
004C3F 7F4C3F -> $0010                RDRJ4           EQU     $10
004C3F 7F4C3F -> $0008                RDRJ3           EQU     $08
004C3F 7F4C3F -> $0004                RDRJ2           EQU     $04
004C3F 7F4C3F -> $0002                RDRJ1           EQU     $02
004C3F 7F4C3F -> $0001                RDRJ0           EQU     $01
004C3F 7F4C3F -> $026C                PERJ            EQU     $026C
004C3F 7F4C3F -> $0080                PERJ7           EQU     $80
004C3F 7F4C3F -> $0040                PERJ6           EQU     $40
004C3F 7F4C3F -> $0020                PERJ5           EQU     $20
004C3F 7F4C3F -> $0010                PERJ4           EQU     $10
004C3F 7F4C3F -> $0008                PERJ3           EQU     $08
004C3F 7F4C3F -> $0004                PERJ2           EQU     $04
004C3F 7F4C3F -> $0002                PERJ1           EQU     $02
004C3F 7F4C3F -> $0001                PERJ0           EQU     $01
004C3F 7F4C3F -> $026D                PPSJ            EQU     $026D
004C3F 7F4C3F -> $0080                PPSJ7           EQU     $80
004C3F 7F4C3F -> $0040                PPSJ6           EQU     $40
004C3F 7F4C3F -> $0020                PPSJ5           EQU     $20
004C3F 7F4C3F -> $0010                PPSJ4           EQU     $10
004C3F 7F4C3F -> $0008                PPSJ3           EQU     $08
004C3F 7F4C3F -> $0004                PPSJ2           EQU     $04
004C3F 7F4C3F -> $0002                PPSJ1           EQU     $02
004C3F 7F4C3F -> $0001                PPSJ0           EQU     $01
004C3F 7F4C3F -> $026E                PIEJ            EQU     $026E
004C3F 7F4C3F -> $0080                PIEJ7           EQU     $80
004C3F 7F4C3F -> $0040                PIEJ6           EQU     $40
004C3F 7F4C3F -> $0020                PIEJ5           EQU     $20
004C3F 7F4C3F -> $0010                PIEJ4           EQU     $10
004C3F 7F4C3F -> $0008                PIEJ3           EQU     $08
004C3F 7F4C3F -> $0004                PIEJ2           EQU     $04
004C3F 7F4C3F -> $0002                PIEJ1           EQU     $02
004C3F 7F4C3F -> $0001                PIEJ0           EQU     $01
004C3F 7F4C3F -> $026F                PIFJ            EQU     $026F
004C3F 7F4C3F -> $0080                PIFJ7           EQU     $80
004C3F 7F4C3F -> $0040                PIFJ6           EQU     $40
004C3F 7F4C3F -> $0020                PIFJ5           EQU     $20
004C3F 7F4C3F -> $0010                PIFJ4           EQU     $10
004C3F 7F4C3F -> $0008                PIFJ3           EQU     $08
004C3F 7F4C3F -> $0004                PIFJ2           EQU     $04
004C3F 7F4C3F -> $0002                PIFJ1           EQU     $02
004C3F 7F4C3F -> $0001                PIFJ0           EQU     $01
004C3F 7F4C3F -> $0270                PT0AD0          EQU     $0270
004C3F 7F4C3F -> $0080                PT0AD07         EQU     $80
004C3F 7F4C3F -> $0040                PT0AD06         EQU     $40
004C3F 7F4C3F -> $0020                PT0AD05         EQU     $20
004C3F 7F4C3F -> $0010                PT0AD04         EQU     $10
004C3F 7F4C3F -> $0008                PT0AD03         EQU     $08
004C3F 7F4C3F -> $0004                PT0AD02         EQU     $04
004C3F 7F4C3F -> $0002                PT0AD01         EQU     $02
004C3F 7F4C3F -> $0001                PT0AD00         EQU     $01
004C3F 7F4C3F -> $0271                PT1AD0          EQU     $0271
004C3F 7F4C3F -> $0080                PT1AD07         EQU     $80
004C3F 7F4C3F -> $0040                PT1AD06         EQU     $40
004C3F 7F4C3F -> $0020                PT1AD05         EQU     $20
004C3F 7F4C3F -> $0010                PT1AD04         EQU     $10
004C3F 7F4C3F -> $0008                PT1AD03         EQU     $08
004C3F 7F4C3F -> $0004                PT1AD02         EQU     $04
004C3F 7F4C3F -> $0002                PT1AD01         EQU     $02
004C3F 7F4C3F -> $0001                PT1AD00         EQU     $01
004C3F 7F4C3F -> $0272                DDR0AD0         EQU     $0272
004C3F 7F4C3F -> $0080                DDR0AD07        EQU     $80
004C3F 7F4C3F -> $0040                DDR0AD06        EQU     $40
004C3F 7F4C3F -> $0020                DDR0AD05        EQU     $20
004C3F 7F4C3F -> $0010                DDR0AD04        EQU     $10
004C3F 7F4C3F -> $0008                DDR0AD03        EQU     $08
004C3F 7F4C3F -> $0004                DDR0AD02        EQU     $04
004C3F 7F4C3F -> $0002                DDR0AD01        EQU     $02
004C3F 7F4C3F -> $0001                DDR0AD00        EQU     $01
004C3F 7F4C3F -> $0273                DDR1AD0         EQU     $0273
004C3F 7F4C3F -> $0080                DDR1AD07        EQU     $80
004C3F 7F4C3F -> $0040                DDR1AD06        EQU     $40
004C3F 7F4C3F -> $0020                DDR1AD05        EQU     $20
004C3F 7F4C3F -> $0010                DDR1AD04        EQU     $10
004C3F 7F4C3F -> $0008                DDR1AD03        EQU     $08
004C3F 7F4C3F -> $0004                DDR1AD02        EQU     $04
004C3F 7F4C3F -> $0002                DDR1AD01        EQU     $02
004C3F 7F4C3F -> $0001                DDR1AD00        EQU     $01
004C3F 7F4C3F -> $0274                RDR0AD0         EQU     $0274
004C3F 7F4C3F -> $0080                RDR0AD07        EQU     $80
004C3F 7F4C3F -> $0040                RDR0AD06        EQU     $40
004C3F 7F4C3F -> $0020                RDR0AD05        EQU     $20
004C3F 7F4C3F -> $0010                RDR0AD04        EQU     $10
004C3F 7F4C3F -> $0008                RDR0AD03        EQU     $08
004C3F 7F4C3F -> $0004                RDR0AD02        EQU     $04
004C3F 7F4C3F -> $0002                RDR0AD01        EQU     $02
004C3F 7F4C3F -> $0001                RDR0AD00        EQU     $01
004C3F 7F4C3F -> $0275                RDR1AD0         EQU     $0275
004C3F 7F4C3F -> $0080                RDR1AD07        EQU     $80
004C3F 7F4C3F -> $0040                RDR1AD06        EQU     $40
004C3F 7F4C3F -> $0020                RDR1AD05        EQU     $20
004C3F 7F4C3F -> $0010                RDR1AD04        EQU     $10
004C3F 7F4C3F -> $0008                RDR1AD03        EQU     $08
004C3F 7F4C3F -> $0004                RDR1AD02        EQU     $04
004C3F 7F4C3F -> $0002                RDR1AD01        EQU     $02
004C3F 7F4C3F -> $0001                RDR1AD00        EQU     $01
004C3F 7F4C3F -> $0276                PER0AD0         EQU     $0276
004C3F 7F4C3F -> $0080                PER0AD07        EQU     $80
004C3F 7F4C3F -> $0040                PER0AD06        EQU     $40
004C3F 7F4C3F -> $0020                PER0AD05        EQU     $20
004C3F 7F4C3F -> $0010                PER0AD04        EQU     $10
004C3F 7F4C3F -> $0008                PER0AD03        EQU     $08
004C3F 7F4C3F -> $0004                PER0AD02        EQU     $04
004C3F 7F4C3F -> $0002                PER0AD01        EQU     $02
004C3F 7F4C3F -> $0001                PER0AD00        EQU     $01
004C3F 7F4C3F -> $0277                PER1AD0         EQU     $0277
004C3F 7F4C3F -> $0080                PER1AD07        EQU     $80
004C3F 7F4C3F -> $0040                PER1AD06        EQU     $40
004C3F 7F4C3F -> $0020                PER1AD05        EQU     $20
004C3F 7F4C3F -> $0010                PER1AD04        EQU     $10
004C3F 7F4C3F -> $0008                PER1AD03        EQU     $08
004C3F 7F4C3F -> $0004                PER1AD02        EQU     $04
004C3F 7F4C3F -> $0002                PER1AD01        EQU     $02
004C3F 7F4C3F -> $0001                PER1AD00        EQU     $01
004C3F 7F4C3F -> $0278                PT0AD1          EQU     $0278
004C3F 7F4C3F -> $0080                PT0AD17         EQU     $80
004C3F 7F4C3F -> $0040                PT0AD16         EQU     $40
004C3F 7F4C3F -> $0020                PT0AD15         EQU     $20
004C3F 7F4C3F -> $0010                PT0AD14         EQU     $10
004C3F 7F4C3F -> $0008                PT0AD13         EQU     $08
004C3F 7F4C3F -> $0004                PT0AD12         EQU     $04
004C3F 7F4C3F -> $0002                PT0AD11         EQU     $02
004C3F 7F4C3F -> $0001                PT0AD10         EQU     $01
004C3F 7F4C3F -> $0279                PT1AD1          EQU     $0279
004C3F 7F4C3F -> $0080                PT1AD17         EQU     $80
004C3F 7F4C3F -> $0040                PT1AD16         EQU     $40
004C3F 7F4C3F -> $0020                PT1AD15         EQU     $20
004C3F 7F4C3F -> $0010                PT1AD14         EQU     $10
004C3F 7F4C3F -> $0008                PT1AD13         EQU     $08
004C3F 7F4C3F -> $0004                PT1AD12         EQU     $04
004C3F 7F4C3F -> $0002                PT1AD11         EQU     $02
004C3F 7F4C3F -> $0001                PT1AD10         EQU     $01
004C3F 7F4C3F -> $027A                DDR0AD1         EQU     $027A
004C3F 7F4C3F -> $0080                DDR0AD17        EQU     $80
004C3F 7F4C3F -> $0040                DDR0AD16        EQU     $40
004C3F 7F4C3F -> $0020                DDR0AD15        EQU     $20
004C3F 7F4C3F -> $0010                DDR0AD14        EQU     $10
004C3F 7F4C3F -> $0008                DDR0AD13        EQU     $08
004C3F 7F4C3F -> $0004                DDR0AD12        EQU     $04
004C3F 7F4C3F -> $0002                DDR0AD11        EQU     $02
004C3F 7F4C3F -> $0001                DDR0AD10        EQU     $01
004C3F 7F4C3F -> $027B                DDR1AD1         EQU     $027B
004C3F 7F4C3F -> $0080                DDR1AD17        EQU     $80
004C3F 7F4C3F -> $0040                DDR1AD16        EQU     $40
004C3F 7F4C3F -> $0020                DDR1AD15        EQU     $20
004C3F 7F4C3F -> $0010                DDR1AD14        EQU     $10
004C3F 7F4C3F -> $0008                DDR1AD13        EQU     $08
004C3F 7F4C3F -> $0004                DDR1AD12        EQU     $04
004C3F 7F4C3F -> $0002                DDR1AD11        EQU     $02
004C3F 7F4C3F -> $0001                DDR1AD10        EQU     $01
004C3F 7F4C3F -> $027C                RDR0AD1         EQU     $027C
004C3F 7F4C3F -> $0080                RDR0AD17        EQU     $80
004C3F 7F4C3F -> $0040                RDR0AD16        EQU     $40
004C3F 7F4C3F -> $0020                RDR0AD15        EQU     $20
004C3F 7F4C3F -> $0010                RDR0AD14        EQU     $10
004C3F 7F4C3F -> $0008                RDR0AD13        EQU     $08
004C3F 7F4C3F -> $0004                RDR0AD12        EQU     $04
004C3F 7F4C3F -> $0002                RDR0AD11        EQU     $02
004C3F 7F4C3F -> $0001                RDR0AD10        EQU     $01
004C3F 7F4C3F -> $027D                RDR1AD1         EQU     $027D
004C3F 7F4C3F -> $0080                RDR1AD17        EQU     $80
004C3F 7F4C3F -> $0040                RDR1AD16        EQU     $40
004C3F 7F4C3F -> $0020                RDR1AD15        EQU     $20
004C3F 7F4C3F -> $0010                RDR1AD14        EQU     $10
004C3F 7F4C3F -> $0008                RDR1AD13        EQU     $08
004C3F 7F4C3F -> $0004                RDR1AD12        EQU     $04
004C3F 7F4C3F -> $0002                RDR1AD11        EQU     $02
004C3F 7F4C3F -> $0001                RDR1AD10        EQU     $01
004C3F 7F4C3F -> $027E                PER0AD1         EQU     $027E
004C3F 7F4C3F -> $0080                PER0AD17        EQU     $80
004C3F 7F4C3F -> $0040                PER0AD16        EQU     $40
004C3F 7F4C3F -> $0020                PER0AD15        EQU     $20
004C3F 7F4C3F -> $0010                PER0AD14        EQU     $10
004C3F 7F4C3F -> $0008                PER0AD13        EQU     $08
004C3F 7F4C3F -> $0004                PER0AD12        EQU     $04
004C3F 7F4C3F -> $0002                PER0AD11        EQU     $02
004C3F 7F4C3F -> $0001                PER0AD10        EQU     $01
004C3F 7F4C3F -> $027F                PER1AD1         EQU     $027F
004C3F 7F4C3F -> $0080                PER1AD17        EQU     $80
004C3F 7F4C3F -> $0040                PER1AD16        EQU     $40
004C3F 7F4C3F -> $0020                PER1AD15        EQU     $20
004C3F 7F4C3F -> $0010                PER1AD14        EQU     $10
004C3F 7F4C3F -> $0008                PER1AD13        EQU     $08
004C3F 7F4C3F -> $0004                PER1AD12        EQU     $04
004C3F 7F4C3F -> $0002                PER1AD11        EQU     $02
004C3F 7F4C3F -> $0001                PER1AD10        EQU     $01
004C3F 7F4C3F -> $0280                CAN4CTL0        EQU     $0280
                                      ;RXFRM          EQU     $80
                                      ;RXACT          EQU     $40
                                      ;CSWAI          EQU     $20
                                      ;SYNCH          EQU     $10
                                      ;TIMEN          EQU     $08
                                      ;WUPE           EQU     $04
                                      ;SLPRQ          EQU     $02
                                      ;INITRQ         EQU     $01
004C3F 7F4C3F -> $0281                CAN4CTL1        EQU     $0281
                                      ;CANE           EQU     $80
                                      ;CLKSRC         EQU     $40
                                      ;LOOPB          EQU     $20
                                      ;LISTEN         EQU     $10
                                      ;WUPM           EQU     $04
                                      ;SLPAK          EQU     $02
                                      ;INITAK         EQU     $01
004C3F 7F4C3F -> $0282                CAN4BTR0        EQU     $0282
                                      ;SJW1           EQU     $80
                                      ;SJW0           EQU     $40
                                      ;BRP5           EQU     $20
                                      ;BRP4           EQU     $10
                                      ;BRP3           EQU     $08
                                      ;BRP2           EQU     $04
                                      ;BRP1           EQU     $02
                                      ;BRP0           EQU     $01
004C3F 7F4C3F -> $0283                CAN4BTR1        EQU     $0283
                                      ;SAMP           EQU     $80
                                      ;TSEG22         EQU     $40
                                      ;TSEG21         EQU     $20
                                      ;TSEG20         EQU     $10
                                      ;TSEG13         EQU     $08
                                      ;TSEG12         EQU     $04
                                      ;TSEG11         EQU     $02
                                      ;TESG10         EQU     $01
004C3F 7F4C3F -> $0284                CAN4RFLG        EQU     $0284
                                      ;WUPIF          EQU     $80
                                      ;CSCIF          EQU     $40
                                      ;RSTAT1         EQU     $20
                                      ;RSTAT0         EQU     $10
                                      ;TSTAT1         EQU     $08
                                      ;TSTAT0         EQU     $04
                                      ;OVRIF          EQU     $02
                                      ;RXF            EQU     $01
004C3F 7F4C3F -> $0285                CAN4RIER        EQU     $0285
                                      ;WUPIE          EQU     $80
                                      ;CSCIE          EQU     $40
                                      ;RSTATE1        EQU     $20
                                      ;RSTATE0        EQU     $10
                                      ;TSTATE1        EQU     $08
                                      ;TSTATE0        EQU     $04
                                      ;OVRIE          EQU     $02
                                      ;RXFIE          EQU     $01
004C3F 7F4C3F -> $0286                CAN4TFLG        EQU     $0286
                                      ;TXE2           EQU     $04
                                      ;TXE1           EQU     $02
                                      ;TXE0           EQU     $01
004C3F 7F4C3F -> $0287                CAN4TIER        EQU     $0287
                                      ;TXEIE2         EQU     $04
                                      ;TXEIE1         EQU     $02
                                      ;TXEIE0         EQU     $01
004C3F 7F4C3F -> $0288                CAN4TARQ        EQU     $0288
                                      ;ABTRQ2         EQU     $04
                                      ;ABTRQ1         EQU     $02
                                      ;ABTRQ0         EQU     $01
004C3F 7F4C3F -> $0289                CAN4TAAK        EQU     $0289
                                      ;ABTAK2         EQU     $04
                                      ;ABTAK1         EQU     $02
                                      ;ABTAK0         EQU     $01
004C3F 7F4C3F -> $028A                CAN4TBSEL       EQU     $028A
                                      ;TX2            EQU     $04
                                      ;TX1            EQU     $02
                                      ;TX0            EQU     $01
004C3F 7F4C3F -> $028B                CAN4IDAC        EQU     $028B
                                      ;IDAM1          EQU     $20
                                      ;IDAM0          EQU     $10
                                      ;IDHIT2         EQU     $04
                                      ;IDHIT1         EQU     $02
                                      ;IDHIT0         EQU     $01
                                      ;$028C  reserved
004C3F 7F4C3F -> $028D                CAN4MISC        EQU     $028D
                                      ;BOHOLD         EQU     $01
004C3F 7F4C3F -> $028E                CAN4RXERR       EQU     $028E
004C3F 7F4C3F -> $028F                CAN4TXERR       EQU     $028F
004C3F 7F4C3F -> $0290                CAN4IDAR0       EQU     $0290
004C3F 7F4C3F -> $0291                CAN4IDAR1       EQU     $0291
004C3F 7F4C3F -> $0292                CAN4IDAR2       EQU     $0292
004C3F 7F4C3F -> $0293                CAN4IDAR3       EQU     $0293
004C3F 7F4C3F -> $0294                CAN4IDMR0       EQU     $0294
004C3F 7F4C3F -> $0295                CAN4IDMR1       EQU     $0295
004C3F 7F4C3F -> $0296                CAN4IDMR2       EQU     $0296
004C3F 7F4C3F -> $0297                CAN4IDMR3       EQU     $0297
004C3F 7F4C3F -> $0298                CAN4IDAR4       EQU     $0298
004C3F 7F4C3F -> $0299                CAN4IDAR5       EQU     $0299
004C3F 7F4C3F -> $029A                CAN4IDAR6       EQU     $029A
004C3F 7F4C3F -> $029B                CAN4IDAR7       EQU     $029B
004C3F 7F4C3F -> $029C                CAN4IDMR4       EQU     $029C
004C3F 7F4C3F -> $029D                CAN4IDMR5       EQU     $029D
004C3F 7F4C3F -> $029E                CAN4IDMR6       EQU     $029E
004C3F 7F4C3F -> $029F                CAN4IDMR7       EQU     $029F
004C3F 7F4C3F -> $02A0                CAN4RXIDR0      EQU     $02A0
004C3F 7F4C3F -> $02A1                CAN4RXIDR1      EQU     $02A1
004C3F 7F4C3F -> $02A2                CAN4RXIDR2      EQU     $02A2
004C3F 7F4C3F -> $02A3                CAN4RXIDR3      EQU     $02A3
004C3F 7F4C3F -> $02A4                CAN4RXDSR0      EQU     $02A4
004C3F 7F4C3F -> $02A5                CAN4RXDSR1      EQU     $02A5
004C3F 7F4C3F -> $02A6                CAN4RXDSR2      EQU     $02A6
004C3F 7F4C3F -> $02A7                CAN4RXDSR3      EQU     $02A7
004C3F 7F4C3F -> $02A8                CAN4RXDSR4      EQU     $02A8
004C3F 7F4C3F -> $02A9                CAN4RXDSR5      EQU     $02A9
004C3F 7F4C3F -> $02AA                CAN4RXDSR6      EQU     $02AA
004C3F 7F4C3F -> $02AB                CAN4RXDSR7      EQU     $02AB
004C3F 7F4C3F -> $02AC                CAN4RXDLR       EQU     $02AC
                                      ;$02AD reserved
004C3F 7F4C3F -> $02AE                CAN4RTSRH       EQU     $02AE
004C3F 7F4C3F -> $02AF                CAN4RTSRL       EQU     $02AF
004C3F 7F4C3F -> $02B0                CAN4TXIDR0      EQU     $02B0
004C3F 7F4C3F -> $02B1                CAN4TXIDR1      EQU     $02B1
004C3F 7F4C3F -> $02B2                CAN4TXIDR2      EQU     $02B2
004C3F 7F4C3F -> $02B2                CAN4TXIDR2      EQU     $02B2
004C3F 7F4C3F -> $02B3                CAN4TXIDR3      EQU     $02B3
004C3F 7F4C3F -> $02B4                CAN4TXDSR0      EQU     $02B4
004C3F 7F4C3F -> $02B5                CAN4TXDSR1      EQU     $02B5
004C3F 7F4C3F -> $02B6                CAN4TXDSR2      EQU     $02B6
004C3F 7F4C3F -> $02B7                CAN4XDSR3       EQU     $02B7
004C3F 7F4C3F -> $02B7                CAN4TXDSR3      EQU     $02B7
004C3F 7F4C3F -> $02B8                CAN4TXDSR4      EQU     $02B8
004C3F 7F4C3F -> $02B9                CAN4TXDSR5      EQU     $02B9
004C3F 7F4C3F -> $02BA                CAN4TXDSR6      EQU     $02BA
004C3F 7F4C3F -> $02BB                CAN4TXDSR7      EQU     $02BB
004C3F 7F4C3F -> $02BC                CAN4TXDLR       EQU     $02BC
004C3F 7F4C3F -> $02BD                CAN4TXTBPR      EQU     $02BD
004C3F 7F4C3F -> $02BE                CAN4TXTSRH      EQU     $02BE
004C3F 7F4C3F -> $02BF                CAN4TXTSRL      EQU     $02BF
004C3F 7F4C3F -> $02C0                ATD0CTL0        EQU     $02C0
004C3F 7F4C3F -> $02C0                ATDCTL0         EQU     $02C0
                                      ;WRAP3          EQU     $08
                                      ;WRAP2          EQU     $04
                                      ;WRAP1          EQU     $02
                                      ;WRAP0          EQU     $01
004C3F 7F4C3F -> $02C1                ATD0CTL1        EQU     $02C1
004C3F 7F4C3F -> $02C1                ATDCTL1         EQU     $02C1
                                      ;ETRIGSEL       EQU     $80
                                      ;SRES1          EQU     $40
                                      ;SRES0          EQU     $20
                                      ;DIS            EQU     $10
                                      ;ETRIGCH3       EQU     $08
                                      ;ETRIGCH2       EQU     $04
                                      ;ETRIGCH1       EQU     $02
                                      ;ETRIGCH0       EQU     $01
004C3F 7F4C3F -> $02C2                ATD0CTL2        EQU     $02C2
004C3F 7F4C3F -> $02C2                ATDCTL2         EQU     $02C2
                                      ;AFFC            EQU     $40
                                      ;ICLKSTP         EQU     $20
                                      ;ETRIGLE         EQU     $10
                                      ;ETRIGP          EQU     $08
                                      ;ETRIGE          EQU     $04
                                      ;ASCIE           EQU     $02
                                      ;ASCIF           EQU     $01
004C3F 7F4C3F -> $02C3                ATD0CTL3        EQU     $02C3
004C3F 7F4C3F -> $02C3                ATDCTL3         EQU     $02C3
                                      ;DJM             EQU     $80
                                      ;S8C             EQU     $40
                                      ;S4C             EQU     $20
                                      ;S2C             EQU     $10
                                      ;S1C             EQU     $08
                                      ;FIFO            EQU     $04
                                      ;FRZ1            EQU     $02
                                      ;FRZ0            EQU     $01
004C3F 7F4C3F -> $02C4                ATD0CTL4        EQU     $02C4
004C3F 7F4C3F -> $02C4                ATDCTL4         EQU     $02C4
                                      ;SMP2           EQU     $80
                                      ;SMP1            EQU     $40
                                      ;SMP0            EQU     $20
                                      ;PRS4            EQU     $10
                                      ;PRS3            EQU     $08
                                      ;PRS2            EQU     $04
                                      ;PRS1            EQU     $02
                                      ;PRS0            EQU     $01
004C3F 7F4C3F -> $02C5                ATD0CTL5        EQU     $02C5
004C3F 7F4C3F -> $02C5                ATDCTL5         EQU     $02C5
                                      ;SC              EQU     $40
                                      ;SCAN            EQU     $20
                                      ;MULT            EQU     $10
                                      ;CD              EQU     $08
                                      ;CC              EQU     $04
                                      ;CB              EQU     $02
                                      ;CA              EQU     $01
004C3F 7F4C3F -> $02C6                ATD0STAT0       EQU     $02C6
004C3F 7F4C3F -> $02C6                ATDSTAT0        EQU     $02C6
                                      ;SCF             EQU     $80
                                      ;ETORF           EQU     $20
                                      ;FIFOR           EQU     $10
                                      ;CC2             EQU     $04
                                      ;CC1             EQU     $02
                                      ;CC0             EQU     $01
                                      ;$02C7 reserved
004C3F 7F4C3F -> $02C8                ATD0CMPEH       EQU     $02C8
004C3F 7F4C3F -> $02C8                ATDCMPEH        EQU     $02C8
                                      ;CMPE15         EQU     $80
                                      ;CMPE14         EQU     $40
                                      ;CMPE13         EQU     $20
                                      ;CMPE12         EQU     $10
                                      ;CMPE11         EQU     $08
                                      ;CMPE10         EQU     $04
                                      ;CMPE9          EQU     $02
                                      ;CMPE8          EQU     $01
004C3F 7F4C3F -> $02C9                ATD0CMPEL       EQU     $02C9
004C3F 7F4C3F -> $02C9                ATDCMPEL        EQU     $02C9
                                      ;CMPE7          EQU     $80
                                      ;CMPE6          EQU     $40
                                      ;CMPE5          EQU     $20
                                      ;CMPE4          EQU     $10
                                      ;CMPE3          EQU     $08
                                      ;CMPE2          EQU     $04
                                      ;CMPE1          EQU     $02
                                      ;CMPE0          EQU     $01
004C3F 7F4C3F -> $02CA                ATD0STAT2H      EQU     $02CA
004C3F 7F4C3F -> $02CA                ATDSTAT2H       EQU     $02CA
                                      ;CCF15          EQU     $80
                                      ;CCF14          EQU     $40
                                      ;CCF13          EQU     $20
                                      ;CCF12          EQU     $10
                                      ;CCF11          EQU     $08
                                      ;CCF10          EQU     $04
                                      ;CCF9           EQU     $02
                                      ;CCF8           EQU     $01
004C3F 7F4C3F -> $02CB                ATD0STAT2L      EQU     $02CB
004C3F 7F4C3F -> $02CB                ATDSTAT2L       EQU     $02CB
                                      ;CCF7           EQU     $80
                                      ;CCF6           EQU     $40
                                      ;CCF5           EQU     $20
                                      ;CCF4           EQU     $10
                                      ;CCF3           EQU     $08
                                      ;CCF2           EQU     $04
                                      ;CCF1           EQU     $02
                                      ;CCF0           EQU     $01
004C3F 7F4C3F -> $02CC                ATD0DIENH       EQU     $02CC
004C3F 7F4C3F -> $02CC                ATDDIENH        EQU     $02CC
                                      ;IEN15          EQU     $80
                                      ;IEN14          EQU     $40
                                      ;IEN13          EQU     $20
                                      ;IEN12          EQU     $10
                                      ;IEN11          EQU     $08
                                      ;IEN10          EQU     $04
                                      ;IEN9           EQU     $02
                                      ;IEN8           EQU     $01
004C3F 7F4C3F -> $02CD                ATD0DIENL       EQU     $02CD
004C3F 7F4C3F -> $02CD                ATDDIENL        EQU     $02CD
                                      ;IEN7           EQU     $80
                                      ;IEN6           EQU     $40
                                      ;IEN5           EQU     $20
                                      ;IEN4           EQU     $10
                                      ;IEN3           EQU     $08
                                      ;IEN2           EQU     $04
                                      ;IEN1           EQU     $02
                                      ;IEN0           EQU     $01
004C3F 7F4C3F -> $02CE                ATD0CMPHTH      EQU     $02CE
004C3F 7F4C3F -> $02CE                ATDCMPHTH       EQU     $02CE
                                      ;CMPHT15        EQU     $80
                                      ;CMPHT14        EQU     $40
                                      ;CMPHT13        EQU     $20
                                      ;CMPHT12        EQU     $10
                                      ;CMPHT11        EQU     $08
                                      ;CMPHT10        EQU     $04
                                      ;CMPHT9         EQU     $02
                                      ;CMPHT8         EQU     $01
004C3F 7F4C3F -> $02CF                ATD0CMPHTL      EQU     $02CF
004C3F 7F4C3F -> $02CF                ATDCMPHTL       EQU     $02CF
                                      ;CMPHT0         EQU     $01
                                      ;CMPHT1         EQU     $02
                                      ;CMPHT2         EQU     $04
                                      ;CMPHT3         EQU     $08
                                      ;CMPHT4         EQU     $10
                                      ;CMPHT5         EQU     $20
                                      ;CMPHT6         EQU     $40
                                      ;CMPHT7         EQU     $80
004C3F 7F4C3F -> $02D0                ATD0DR0         EQU     $02D0
004C3F 7F4C3F -> $02D0                ATDDR0          EQU     $02D0
004C3F 7F4C3F -> $02D0                ATD0DR0H        EQU     $02D0
004C3F 7F4C3F -> $02D1                ATD0DR0L        EQU     $02D1
004C3F 7F4C3F -> $02D2                ATD0DR1         EQU     $02D2
004C3F 7F4C3F -> $02D2                ATDDR1          EQU     $02D2
004C3F 7F4C3F -> $02D2                ATD0DR1H        EQU     $02D2
004C3F 7F4C3F -> $02D3                ATD0DR1L        EQU     $02D3
004C3F 7F4C3F -> $02D4                ATD0DR2         EQU     $02D4
004C3F 7F4C3F -> $02D4                ATDDR2          EQU     $02D4
004C3F 7F4C3F -> $02D4                ATD0DR2H        EQU     $02D4
004C3F 7F4C3F -> $02D5                ATD0DR2L        EQU     $02D5
004C3F 7F4C3F -> $02D6                ATD0DR3         EQU     $02D6
004C3F 7F4C3F -> $02D6                ATDDR3          EQU     $02D6
004C3F 7F4C3F -> $02D6                ATD0DR3H        EQU     $02D6
004C3F 7F4C3F -> $02D7                ATD0DR3L        EQU     $02D7
004C3F 7F4C3F -> $02D8                ATD0DR4         EQU     $02D8
004C3F 7F4C3F -> $02D8                ATDDR4          EQU     $02D8
004C3F 7F4C3F -> $02D8                ATD0DR4H        EQU     $02D8
004C3F 7F4C3F -> $02D9                ATD0DR4L        EQU     $02D9
004C3F 7F4C3F -> $02DA                ATD0DR5         EQU     $02DA
004C3F 7F4C3F -> $02DA                ATDDR5          EQU     $02DA
004C3F 7F4C3F -> $02DA                ATD0DR5H        EQU     $02DA
004C3F 7F4C3F -> $02DB                ATD0DR5L        EQU     $02DB
004C3F 7F4C3F -> $02DC                ATD0DR6         EQU     $02DC
004C3F 7F4C3F -> $02DC                ATDDR6          EQU     $02DC
004C3F 7F4C3F -> $02DC                ATD0DR6H        EQU     $02DC
004C3F 7F4C3F -> $02DD                ATD0DR6L        EQU     $02DD
004C3F 7F4C3F -> $02DE                ATD0DR7         EQU     $02DE
004C3F 7F4C3F -> $02DE                ATDDR7          EQU     $02DE
004C3F 7F4C3F -> $02DE                ATD0DR7H        EQU     $02DE
004C3F 7F4C3F -> $02DF                ATD0DR7L        EQU     $02DF
004C3F 7F4C3F -> $02E0                ATD0DR8         EQU     $02E0
004C3F 7F4C3F -> $02E0                ATDDR8          EQU     $02E0
004C3F 7F4C3F -> $02E0                ATD0DR8H        EQU     $02E0
004C3F 7F4C3F -> $02E1                ATD0DR8L        EQU     $02E1
004C3F 7F4C3F -> $02E2                ATD0DR9         EQU     $02E2
004C3F 7F4C3F -> $02E2                ATDDR9          EQU     $02E2
004C3F 7F4C3F -> $02E2                ATD0DR9H        EQU     $02E2
004C3F 7F4C3F -> $02E3                ATD0DR9L        EQU     $02E3
004C3F 7F4C3F -> $02E3                ATD0DR10        EQU     $02E3
004C3F 7F4C3F -> $02E3                ATDDR10         EQU     $02E3
004C3F 7F4C3F -> $02E3                ATD0DR10H       EQU     $02E3
004C3F 7F4C3F -> $02E5                ATD0DR10L       EQU     $02E5
004C3F 7F4C3F -> $02E6                ATD0DR11        EQU     $02E6
004C3F 7F4C3F -> $02E6                ATDDR11         EQU     $02E6
004C3F 7F4C3F -> $02E6                ATD0DR11H       EQU     $02E6
004C3F 7F4C3F -> $02E7                ATD0DR11L       EQU     $02E7
004C3F 7F4C3F -> $02E8                ATD0DR12        EQU     $02E8
004C3F 7F4C3F -> $02E8                ATDDR12         EQU     $02E8
004C3F 7F4C3F -> $02E8                ATD0DR12H       EQU     $02E8
004C3F 7F4C3F -> $02E9                ATD0DR12L       EQU     $02E9
004C3F 7F4C3F -> $02EA                ATD0DR13        EQU     $02EA
004C3F 7F4C3F -> $02EA                ATDDR13         EQU     $02EA
004C3F 7F4C3F -> $02EA                ATD0DR13H       EQU     $02EA
004C3F 7F4C3F -> $02EB                ATD0DR13L       EQU     $02EB
004C3F 7F4C3F -> $02EC                ATD0DR14        EQU     $02EC
004C3F 7F4C3F -> $02EC                ATDDR14         EQU     $02EC
004C3F 7F4C3F -> $02EC                ATD0DR14H       EQU     $02EC
004C3F 7F4C3F -> $02ED                ATD0DR14L       EQU     $02ED
004C3F 7F4C3F -> $02EE                ATD0DR15        EQU     $02EE
004C3F 7F4C3F -> $02EE                ATDDR15         EQU     $02EE
004C3F 7F4C3F -> $02EE                ATD0DR15H       EQU     $02EE
004C3F 7F4C3F -> $02EF                ATD0DR15L       EQU     $02EF
004C3F 7F4C3F -> $02F0                VREGHTCL        EQU     $02F0
004C3F 7F4C3F -> $0020                VSEL            EQU     $20
004C3F 7F4C3F -> $0010                VAE             EQU     $10
004C3F 7F4C3F -> $0008                HTEN            EQU     $08
004C3F 7F4C3F -> $0004                HTDS            EQU     $04
004C3F 7F4C3F -> $0002                HTIE            EQU     $02
004C3F 7F4C3F -> $0001                HTIF            EQU     $01
004C3F 7F4C3F -> $02F1                VREGCTRL        EQU     $02F1
004C3F 7F4C3F -> $0004                LVDS            EQU     $04
004C3F 7F4C3F -> $0002                LVIE            EQU     $02
004C3F 7F4C3F -> $0001                LVIF            EQU     $01
004C3F 7F4C3F -> $02F2                VREGAPICTL      EQU     $02F2
004C3F 7F4C3F -> $0080                APICLK          EQU     $80
004C3F 7F4C3F -> $0010                APIES           EQU     $10
004C3F 7F4C3F -> $0008                APIEA           EQU     $08
004C3F 7F4C3F -> $0004                APIFE           EQU     $04
004C3F 7F4C3F -> $0002                APIE            EQU     $02
004C3F 7F4C3F -> $0001                APIF            EQU     $01
004C3F 7F4C3F -> $02F3                VREGAPITR       EQU     $02F3
004C3F 7F4C3F -> $0080                APITR5          EQU     $80
004C3F 7F4C3F -> $0040                APITR4          EQU     $40
004C3F 7F4C3F -> $0020                APITR3          EQU     $20
004C3F 7F4C3F -> $0010                APITR2          EQU     $10
004C3F 7F4C3F -> $0008                APITR1          EQU     $08
004C3F 7F4C3F -> $0004                APITR0          EQU     $04
004C3F 7F4C3F -> $02F4                VREGAPIRH       EQU     $02F4
004C3F 7F4C3F -> $0080                APIR15          EQU     $80
004C3F 7F4C3F -> $0040                APIR14          EQU     $40
004C3F 7F4C3F -> $0020                APIR13          EQU     $20
004C3F 7F4C3F -> $0010                APIR12          EQU     $10
004C3F 7F4C3F -> $0008                APIR11          EQU     $08
004C3F 7F4C3F -> $0004                APIR10          EQU     $04
004C3F 7F4C3F -> $0002                APIR9           EQU     $02
004C3F 7F4C3F -> $0001                APIR8           EQU     $01
004C3F 7F4C3F -> $02F5                VREGAPIRL       EQU     $02F5
004C3F 7F4C3F -> $0080                APIR7           EQU     $80
004C3F 7F4C3F -> $0040                APIR6           EQU     $40
004C3F 7F4C3F -> $0020                APIR5           EQU     $20
004C3F 7F4C3F -> $0010                APIR4           EQU     $10
004C3F 7F4C3F -> $0008                APIR3           EQU     $08
004C3F 7F4C3F -> $0004                APIR2           EQU     $04
004C3F 7F4C3F -> $0002                APIR1           EQU     $02
004C3F 7F4C3F -> $0001                APIR0           EQU     $01
                                      ;$02F6 reserved
004C3F 7F4C3F -> $02F7                VREGHTTR        EQU     $02F7
004C3F 7F4C3F -> $0080                HTOEN           EQU     $80
004C3F 7F4C3F -> $000F                HTTR            EQU     $0F
                                      ;$02F8 to $02FF reserved
004C3F 7F4C3F -> $0300                PWME            EQU     $0300
004C3F 7F4C3F -> $0080                PWME7           EQU     $80
004C3F 7F4C3F -> $0040                PWME6           EQU     $40
004C3F 7F4C3F -> $0020                PWME5           EQU     $20
004C3F 7F4C3F -> $0010                PWME4           EQU     $10
004C3F 7F4C3F -> $0008                PWME3           EQU     $08
004C3F 7F4C3F -> $0004                PWME2           EQU     $04
004C3F 7F4C3F -> $0002                PWME1           EQU     $02
004C3F 7F4C3F -> $0001                PWME0           EQU     $01
004C3F 7F4C3F -> $0301                PWMPOL          EQU     $0301
004C3F 7F4C3F -> $0080                PPOL7           EQU     $80
004C3F 7F4C3F -> $0040                PPOL6           EQU     $40
004C3F 7F4C3F -> $0020                PPOL5           EQU     $20
004C3F 7F4C3F -> $0010                PPOL4           EQU     $10
004C3F 7F4C3F -> $0008                PPOL3           EQU     $08
004C3F 7F4C3F -> $0004                PPOL2           EQU     $04
004C3F 7F4C3F -> $0002                PPOL1           EQU     $02
004C3F 7F4C3F -> $0001                PPOL0           EQU     $01
004C3F 7F4C3F -> $0302                PWMCLK          EQU     $0302
004C3F 7F4C3F -> $0080                PCLK7           EQU     $80
004C3F 7F4C3F -> $0040                PCLK6           EQU     $40
004C3F 7F4C3F -> $0020                PCLK5           EQU     $20
004C3F 7F4C3F -> $0010                PCLK4           EQU     $10
004C3F 7F4C3F -> $0008                PCLK3           EQU     $08
004C3F 7F4C3F -> $0004                PCLK2           EQU     $04
004C3F 7F4C3F -> $0002                PCLK1           EQU     $02
004C3F 7F4C3F -> $0001                PCLK0           EQU     $01
004C3F 7F4C3F -> $0303                PWMPRCLK        EQU     $0303
004C3F 7F4C3F -> $0040                PCKB2           EQU     $40
004C3F 7F4C3F -> $0020                PCKB1           EQU     $20
004C3F 7F4C3F -> $0010                PCKB0           EQU     $10
004C3F 7F4C3F -> $0004                PCKA2           EQU     $04
004C3F 7F4C3F -> $0002                PCKA1           EQU     $02
004C3F 7F4C3F -> $0001                PCKA0           EQU     $01
004C3F 7F4C3F -> $0304                PWMCAE          EQU     $0304
004C3F 7F4C3F -> $0080                CAE7            EQU     $80
004C3F 7F4C3F -> $0040                CAE6            EQU     $40
004C3F 7F4C3F -> $0020                CAE5            EQU     $20
004C3F 7F4C3F -> $0010                CAE4            EQU     $10
004C3F 7F4C3F -> $0008                CAE3            EQU     $08
004C3F 7F4C3F -> $0004                CAE2            EQU     $04
004C3F 7F4C3F -> $0002                CAE1            EQU     $02
004C3F 7F4C3F -> $0001                CAE0            EQU     $01
004C3F 7F4C3F -> $0305                PWMCTL          EQU     $0305
004C3F 7F4C3F -> $0080                CON67           EQU     $80
004C3F 7F4C3F -> $0040                CON45           EQU     $40
004C3F 7F4C3F -> $0020                CON23           EQU     $20
004C3F 7F4C3F -> $0010                CON01           EQU     $10
004C3F 7F4C3F -> $0008                PSWAI           EQU     $08
004C3F 7F4C3F -> $0004                PFRZ            EQU     $04
004C3F 7F4C3F -> $0306                PWMTST          EQU     $0306
004C3F 7F4C3F -> $0307                PWMPRSC         EQU     $0307
004C3F 7F4C3F -> $030A                PWMSCNTA        EQU     $030A
004C3F 7F4C3F -> $030B                PWMSCNTB        EQU     $030B
004C3F 7F4C3F -> $030C                PWMCNT0         EQU     $030C
004C3F 7F4C3F -> $030D                PWMCNT1         EQU     $030D
004C3F 7F4C3F -> $030E                PWMCNT2         EQU     $030E
004C3F 7F4C3F -> $030F                PWMCNT3         EQU     $030F
004C3F 7F4C3F -> $0310                PWMCNT4         EQU     $0310
004C3F 7F4C3F -> $0311                PWMCNT5         EQU     $0311
004C3F 7F4C3F -> $0312                PWMCNT6         EQU     $0312
004C3F 7F4C3F -> $0313                PWMCNT7         EQU     $0313
004C3F 7F4C3F -> $0314                PWMPER0         EQU     $0314
004C3F 7F4C3F -> $0315                PWMPER1         EQU     $0315
004C3F 7F4C3F -> $0316                PWMPER2         EQU     $0316
004C3F 7F4C3F -> $0317                PWMPER3         EQU     $0317
004C3F 7F4C3F -> $0318                PWMPER4         EQU     $0318
004C3F 7F4C3F -> $0319                PWMPER5         EQU     $0319
004C3F 7F4C3F -> $031A                PWMPER6         EQU     $031A
004C3F 7F4C3F -> $031B                PWMPER7         EQU     $031B
004C3F 7F4C3F -> $031C                PWMDTY0         EQU     $031C
004C3F 7F4C3F -> $031D                PWMDTY1         EQU     $031D
004C3F 7F4C3F -> $031E                PWMDTY2         EQU     $031E
004C3F 7F4C3F -> $031F                PWMDTY3         EQU     $031F
004C3F 7F4C3F -> $0320                PWMDTY4         EQU     $0320
004C3F 7F4C3F -> $0321                PWMDTY5         EQU     $0321
004C3F 7F4C3F -> $0322                PWMDTY6         EQU     $0322
004C3F 7F4C3F -> $0323                PWMDTY7         EQU     $0323
004C3F 7F4C3F -> $0324                PWMSDN          EQU     $0324
004C3F 7F4C3F -> $0080                PWMIF           EQU     $80
004C3F 7F4C3F -> $0040                PWMIE           EQU     $40
004C3F 7F4C3F -> $0020                PWMRSTRT        EQU     $20
004C3F 7F4C3F -> $0010                PWMLVL          EQU     $10
004C3F 7F4C3F -> $0004                PWM7IN          EQU     $04
004C3F 7F4C3F -> $0002                PWM7INL         EQU     $02
004C3F 7F4C3F -> $0001                PWM7ENA         EQU     $01
                                      ;$0325 to $032F reserved
004C3F 7F4C3F -> $0330                SCI6BDH         EQU     $0330
                                      ;IREN           EQU     $80
                                      ;TNP1           EQU     $40
                                      ;TNP0           EQU     $20
                                      ;SBR12          EQU     $10
                                      ;SBR11          EQU     $08
                                      ;SBR10          EQU     $04
                                      ;SBR9           EQU     $02
                                      ;SBR8           EQU     $01
004C3F 7F4C3F -> $0330                SCI6ASR1        EQU     $0330
                                      ;RXEDGIF        EQU     $80
                                      ;BERRV          EQU     $04
                                      ;BERRIF         EQU     $02
                                      ;BKDIF          EQU     $01
004C3F 7F4C3F -> $0331                SCI6BDL         EQU     $0331
                                      ;SBR7           EQU     $80
                                      ;SBR6           EQU     $40
                                      ;SBR5           EQU     $20
                                      ;SBR4           EQU     $10
                                      ;SBR3           EQU     $08
                                      ;SBR2           EQU     $04
                                      ;SBR1           EQU     $02
                                      ;SBR0           EQU     $01
004C3F 7F4C3F -> $0331                SCI6ACR1        EQU     $0331
                                      ;RXEDGIE        EQU     $80
                                      ;BERRIE         EQU     $02
                                      ;BKDIE          EQU     $01
004C3F 7F4C3F -> $0332                SCI6CR1         EQU     $0332
                                      ;LOOPS          EQU     $80
                                      ;SCISWAI        EQU     $40
                                      ;RSRC           EQU     $20
                                      ;M              EQU     $10
                                      ;WAKE           EQU     $08
                                      ;ILT            EQU     $04
                                      ;PE             EQU     $02
                                      ;PT             EQU     $01
004C3F 7F4C3F -> $0332                SCI6ACR2        EQU     $0332
                                      ;BERRM1         EQU     $04
                                      ;BERRM0         EQU     $02
                                      ;BKDFE          EQU     $01
004C3F 7F4C3F -> $0333                SCI6CR2         EQU     $0333
                                      ;TXIE           EQU     $80
                                      ;TCIE           EQU     $40
                                      ;RIE            EQU     $20
                                      ;ILIE           EQU     $10
                                      ;TE             EQU     $08
                                      ;RE             EQU     $04
                                      ;RWU            EQU     $02
                                      ;SBK            EQU     $01
004C3F 7F4C3F -> $0334                SCI6SR1         EQU     $0334
                                      ;TDRE           EQU     $80
                                      ;TC             EQU     $40
                                      ;RDRFF          EQU     $20
                                      ;IDLE           EQU     $10
                                      ;OR             EQU     $08
                                      ;NF             EQU     $04
                                      ;FE             EQU     $02
                                      ;PF             EQU     $01
004C3F 7F4C3F -> $0335                SCI6SR2         EQU     $0335
                                      ;BRK13          EQU     $04
                                      ;TXDIR          EQU     $02
                                      ;RAF            EQU     $01
004C3F 7F4C3F -> $0336                SCI6DRH         EQU     $0336
                                      ;R8             EQU     $80
                                      ;T8             EQU     $40
004C3F 7F4C3F -> $0337                SCI6DRL         EQU     $0337
004C3F 7F4C3F -> $0338                SCI7BDH         EQU     $0338
                                      ;IREN           EQU     $80
                                      ;TNP1           EQU     $40
                                      ;TNP0           EQU     $20
                                      ;SBR12          EQU     $10
                                      ;SBR11          EQU     $08
                                      ;SBR10          EQU     $04
                                      ;SBR9           EQU     $02
                                      ;SBR8           EQU     $01
004C3F 7F4C3F -> $0338                SCI7ASR1        EQU     $0338
                                      ;RXEDGIF        EQU     $80
                                      ;BERRV          EQU     $04
                                      ;BERRIF         EQU     $02
                                      ;BKDIF          EQU     $01
004C3F 7F4C3F -> $0339                SCI7BDL         EQU     $0339
                                      ;SBR7           EQU     $80
                                      ;SBR6           EQU     $40
                                      ;SBR5           EQU     $20
                                      ;SBR4           EQU     $10
                                      ;SBR3           EQU     $08
                                      ;SBR2           EQU     $04
                                      ;SBR1           EQU     $02
                                      ;SBR0           EQU     $01
004C3F 7F4C3F -> $0339                SCI7ACR1        EQU     $0339
                                      ;RXEDGIE        EQU     $80
                                      ;BERRIE         EQU     $02
                                      ;BKDIE          EQU     $01
004C3F 7F4C3F -> $033A                SCI7CR1         EQU     $033A
                                      ;LOOPS          EQU     $80
                                      ;SCISWAI        EQU     $40
                                      ;RSRC           EQU     $20
                                      ;M              EQU     $10
                                      ;WAKE           EQU     $08
                                      ;ILT            EQU     $04
                                      ;PE             EQU     $02
                                      ;PT             EQU     $01
004C3F 7F4C3F -> $033A                SCI7ACR2        EQU     $033A
                                      ;BERRM1         EQU     $04
                                      ;BERRM0         EQU     $02
                                      ;BKDFE          EQU     $01
004C3F 7F4C3F -> $033B                SCI7CR2         EQU     $033B
                                      ;TXIE           EQU     $80
                                      ;TCIE           EQU     $40
                                      ;RIE            EQU     $20
                                      ;ILIE           EQU     $10
                                      ;TE             EQU     $08
                                      ;RE             EQU     $04
                                      ;RWU            EQU     $02
                                      ;SBK            EQU     $01
004C3F 7F4C3F -> $033C                SCI7SR1         EQU     $033C
                                      ;TDRE           EQU     $80
                                      ;TC             EQU     $40
                                      ;RDRFF          EQU     $20
                                      ;IDLE           EQU     $10
                                      ;OR             EQU     $08
                                      ;NF             EQU     $04
                                      ;FE             EQU     $02
                                      ;PF             EQU     $01
004C3F 7F4C3F -> $335D                SCI7SR2         EQU     $0335D
                                      ;BRK13          EQU     $04
                                      ;TXDIR          EQU     $02
                                      ;RAF            EQU     $01
004C3F 7F4C3F -> $033E                SCI7DRH         EQU     $033E
                                      ;R8             EQU     $80
                                      ;T8             EQU     $40
004C3F 7F4C3F -> $033F                SCI7DRL         EQU     $033F
004C3F 7F4C3F -> $0340                PITCFLMT        EQU     $0340
004C3F 7F4C3F -> $0080                PITE            EQU     $80
004C3F 7F4C3F -> $0040                PITSWAI         EQU     $40
004C3F 7F4C3F -> $0020                PITFRZ          EQU     $20
004C3F 7F4C3F -> $0002                PFLMT1          EQU     $02
004C3F 7F4C3F -> $0001                PFLMT0          EQU     $01
004C3F 7F4C3F -> $0341                PITFLT          EQU     $0341
004C3F 7F4C3F -> $0080                PFLT7           EQU     $80
004C3F 7F4C3F -> $0040                PFLT6           EQU     $40
004C3F 7F4C3F -> $0020                PFLT5           EQU     $20
004C3F 7F4C3F -> $0010                PFLT4           EQU     $10
004C3F 7F4C3F -> $0008                PFLT3           EQU     $08
004C3F 7F4C3F -> $0004                PFLT2           EQU     $04
004C3F 7F4C3F -> $0002                PFLT1           EQU     $02
004C3F 7F4C3F -> $0001                PFLT0           EQU     $01
004C3F 7F4C3F -> $0342                PITCE           EQU     $0342
004C3F 7F4C3F -> $0080                PCE7            EQU     $80
004C3F 7F4C3F -> $0040                PCE6            EQU     $40
004C3F 7F4C3F -> $0020                PCE5            EQU     $20
004C3F 7F4C3F -> $0010                PCE4            EQU     $10
004C3F 7F4C3F -> $0008                PCE3            EQU     $08
004C3F 7F4C3F -> $0004                PCE2            EQU     $04
004C3F 7F4C3F -> $0002                PCE1            EQU     $02
004C3F 7F4C3F -> $0001                PCE0            EQU     $01
004C3F 7F4C3F -> $0343                PITMUX          EQU     $0343
004C3F 7F4C3F -> $0080                PMUX7           EQU     $80
004C3F 7F4C3F -> $0040                PMUX6           EQU     $40
004C3F 7F4C3F -> $0020                PMUX5           EQU     $20
004C3F 7F4C3F -> $0010                PMUX4           EQU     $10
004C3F 7F4C3F -> $0008                PMUX3           EQU     $08
004C3F 7F4C3F -> $0004                PMUX2           EQU     $04
004C3F 7F4C3F -> $0002                PMUX1           EQU     $02
004C3F 7F4C3F -> $0001                PMUX0           EQU     $01
004C3F 7F4C3F -> $0344                PITINTE         EQU     $0344
004C3F 7F4C3F -> $0080                PINTE7          EQU     $80
004C3F 7F4C3F -> $0040                PINTE6          EQU     $40
004C3F 7F4C3F -> $0020                PINTE5          EQU     $20
004C3F 7F4C3F -> $0010                PINTE4          EQU     $10
004C3F 7F4C3F -> $0008                PINTE3          EQU     $08
004C3F 7F4C3F -> $0004                PINTE2          EQU     $04
004C3F 7F4C3F -> $0002                PINTE1          EQU     $02
004C3F 7F4C3F -> $0001                PINTE0          EQU     $01
004C3F 7F4C3F -> $0345                PITTF           EQU     $0345
004C3F 7F4C3F -> $0080                PTF7            EQU     $80
004C3F 7F4C3F -> $0040                PTF6            EQU     $40
004C3F 7F4C3F -> $0020                PTF5            EQU     $20
004C3F 7F4C3F -> $0010                PTF4            EQU     $10
004C3F 7F4C3F -> $0008                PTF3            EQU     $08
004C3F 7F4C3F -> $0004                PTF2            EQU     $04
004C3F 7F4C3F -> $0002                PTF1            EQU     $02
004C3F 7F4C3F -> $0001                PTF0            EQU     $01
004C3F 7F4C3F -> $0346                PITMTLD0        EQU     $0346
004C3F 7F4C3F -> $0080                PMTLD7          EQU     $80
004C3F 7F4C3F -> $0040                PMTLD6          EQU     $40
004C3F 7F4C3F -> $0020                PMTLD5          EQU     $20
004C3F 7F4C3F -> $0010                PMTLD4          EQU     $10
004C3F 7F4C3F -> $0008                PMTLD3          EQU     $08
004C3F 7F4C3F -> $0004                PMTLD2          EQU     $04
004C3F 7F4C3F -> $0002                PMTLD1          EQU     $02
004C3F 7F4C3F -> $0001                PMTLD0          EQU     $01
004C3F 7F4C3F -> $0347                PITMTLD1        EQU     $0347
                                      ;PMTLD7         EQU     $80
                                      ;PMTLD6         EQU     $40
                                      ;PMTLD5         EQU     $20
                                      ;PMTLD4         EQU     $10
                                      ;PMTLD3         EQU     $08
                                      ;PMTLD2         EQU     $04
                                      ;PMTLD1         EQU     $02
                                      ;PMTLD0         EQU     $01
004C3F 7F4C3F -> $0348                PITLD0          EQU     $0348
004C3F 7F4C3F -> $034A                PITCNT0         EQU     $034A
004C3F 7F4C3F -> $034C                PITLD1          EQU     $034C
004C3F 7F4C3F -> $034E                PITCNT1         EQU     $034E
004C3F 7F4C3F -> $0350                PITLD2          EQU     $0350
004C3F 7F4C3F -> $0352                PITCNT2         EQU     $0352
004C3F 7F4C3F -> $0354                PITLD3          EQU     $0354
004C3F 7F4C3F -> $0356                PITCNT3         EQU     $0356
004C3F 7F4C3F -> $0358                PITLD4          EQU     $0358
004C3F 7F4C3F -> $035A                PITCNT4         EQU     $035A
004C3F 7F4C3F -> $035C                PITLD5          EQU     $035C
004C3F 7F4C3F -> $035E                PITCNT5         EQU     $035E
004C3F 7F4C3F -> $0360                PITLD6          EQU     $0360
004C3F 7F4C3F -> $0362                PITCNT6         EQU     $0362
004C3F 7F4C3F -> $0364                PITLD7          EQU     $0364
004C3F 7F4C3F -> $0366                PITCNT7         EQU     $0366
004C3F 7F4C3F -> $0368                PTR             EQU     $0368
004C3F 7F4C3F -> $0080                PTR7            EQU     $80
004C3F 7F4C3F -> $0040                PTR6            EQU     $40
004C3F 7F4C3F -> $0020                PTR5            EQU     $20
004C3F 7F4C3F -> $0010                PTR4            EQU     $10
004C3F 7F4C3F -> $0008                PTR3            EQU     $08
004C3F 7F4C3F -> $0004                PTR2            EQU     $04
004C3F 7F4C3F -> $0002                PTR1            EQU     $02
004C3F 7F4C3F -> $0001                PTR0            EQU     $01
004C3F 7F4C3F -> $0369                PTIR            EQU     $0369
004C3F 7F4C3F -> $0080                PTIR7           EQU     $80
004C3F 7F4C3F -> $0040                PTIR6           EQU     $40
004C3F 7F4C3F -> $0020                PTIR5           EQU     $20
004C3F 7F4C3F -> $0010                PTIR4           EQU     $10
004C3F 7F4C3F -> $0008                PTIR3           EQU     $08
004C3F 7F4C3F -> $0004                PTIR2           EQU     $04
004C3F 7F4C3F -> $0002                PTIR1           EQU     $02
004C3F 7F4C3F -> $0001                PTIR0           EQU     $01
004C3F 7F4C3F -> $036A                DDRR            EQU     $036A
004C3F 7F4C3F -> $0080                DDRR7           EQU     $80
004C3F 7F4C3F -> $0040                DDRR6           EQU     $40
004C3F 7F4C3F -> $0020                DDRR5           EQU     $20
004C3F 7F4C3F -> $0010                DDRR4           EQU     $10
004C3F 7F4C3F -> $0008                DDRR3           EQU     $08
004C3F 7F4C3F -> $0004                DDRR2           EQU     $04
004C3F 7F4C3F -> $0002                DDRR1           EQU     $02
004C3F 7F4C3F -> $0001                DDRR0           EQU     $01
004C3F 7F4C3F -> $036B                RDRR            EQU     $036B
004C3F 7F4C3F -> $0080                RDRR7           EQU     $80
004C3F 7F4C3F -> $0040                RDRR6           EQU     $40
004C3F 7F4C3F -> $0020                RDRR5           EQU     $20
004C3F 7F4C3F -> $0010                RDRR4           EQU     $10
004C3F 7F4C3F -> $0008                RDRR3           EQU     $08
004C3F 7F4C3F -> $0004                RDRR2           EQU     $04
004C3F 7F4C3F -> $0002                RDRR1           EQU     $02
004C3F 7F4C3F -> $0001                RDRR0           EQU     $01
004C3F 7F4C3F -> $036C                PERR            EQU     $036C
004C3F 7F4C3F -> $0080                PERR7           EQU     $80
004C3F 7F4C3F -> $0040                PERR6           EQU     $40
004C3F 7F4C3F -> $0020                PERR5           EQU     $20
004C3F 7F4C3F -> $0010                PERR4           EQU     $10
004C3F 7F4C3F -> $0008                PERR3           EQU     $08
004C3F 7F4C3F -> $0004                PERR2           EQU     $04
004C3F 7F4C3F -> $0002                PERR1           EQU     $02
004C3F 7F4C3F -> $0001                PERR0           EQU     $01
004C3F 7F4C3F -> $036D                PPSR            EQU     $036D
004C3F 7F4C3F -> $0080                PPSR7           EQU     $80
004C3F 7F4C3F -> $0040                PPSR6           EQU     $40
004C3F 7F4C3F -> $0020                PPSR5           EQU     $20
004C3F 7F4C3F -> $0010                PPSR4           EQU     $10
004C3F 7F4C3F -> $0008                PPSR3           EQU     $08
004C3F 7F4C3F -> $0004                PPSR2           EQU     $04
004C3F 7F4C3F -> $0002                PPSR1           EQU     $02
004C3F 7F4C3F -> $0001                PPSR0           EQU     $01
004C3F 7F4C3F -> $036F                PTRRR           EQU     $036F
004C3F 7F4C3F -> $0080                PTRRR7          EQU     $80
004C3F 7F4C3F -> $0040                PTRRR6          EQU     $40
004C3F 7F4C3F -> $0020                PTRRR5          EQU     $20
004C3F 7F4C3F -> $0010                PTRRR4          EQU     $10
004C3F 7F4C3F -> $0008                PTRRR3          EQU     $08
004C3F 7F4C3F -> $0004                PTRRR2          EQU     $04
004C3F 7F4C3F -> $0002                PTRRR1          EQU     $02
004C3F 7F4C3F -> $0001                PTRRR0          EQU     $01
004C3F 7F4C3F -> $0370                PTL             EQU     $0370
004C3F 7F4C3F -> $0080                PTL7            EQU     $80
004C3F 7F4C3F -> $0040                PTL6            EQU     $40
004C3F 7F4C3F -> $0020                PTL5            EQU     $20
004C3F 7F4C3F -> $0010                PTL4            EQU     $10
004C3F 7F4C3F -> $0008                PTL3            EQU     $08
004C3F 7F4C3F -> $0004                PTL2            EQU     $04
004C3F 7F4C3F -> $0002                PTL1            EQU     $02
004C3F 7F4C3F -> $0001                PTL0            EQU     $01
004C3F 7F4C3F -> $0371                PTIL            EQU     $0371
004C3F 7F4C3F -> $0080                PTIL7           EQU     $80
004C3F 7F4C3F -> $0040                PTIL6           EQU     $40
004C3F 7F4C3F -> $0020                PTIL5           EQU     $20
004C3F 7F4C3F -> $0010                PTIL4           EQU     $10
004C3F 7F4C3F -> $0008                PTIL3           EQU     $08
004C3F 7F4C3F -> $0004                PTIL2           EQU     $04
004C3F 7F4C3F -> $0002                PTIL1           EQU     $02
004C3F 7F4C3F -> $0001                PTIL0           EQU     $01
004C3F 7F4C3F -> $0372                DDRL            EQU     $0372
004C3F 7F4C3F -> $0080                DDRL7           EQU     $80
004C3F 7F4C3F -> $0040                DDRL6           EQU     $40
004C3F 7F4C3F -> $0020                DDRL5           EQU     $20
004C3F 7F4C3F -> $0010                DDRL4           EQU     $10
004C3F 7F4C3F -> $0008                DDRL3           EQU     $08
004C3F 7F4C3F -> $0004                DDRL2           EQU     $04
004C3F 7F4C3F -> $0002                DDRL1           EQU     $02
004C3F 7F4C3F -> $0001                DDRL0           EQU     $01
004C3F 7F4C3F -> $0373                RDRL            EQU     $0373
004C3F 7F4C3F -> $0080                RDRL7           EQU     $80
004C3F 7F4C3F -> $0040                RDRL6           EQU     $40
004C3F 7F4C3F -> $0020                RDRL5           EQU     $20
004C3F 7F4C3F -> $0010                RDRL4           EQU     $10
004C3F 7F4C3F -> $0008                RDRL3           EQU     $08
004C3F 7F4C3F -> $0004                RDRL2           EQU     $04
004C3F 7F4C3F -> $0002                RDRL1           EQU     $02
004C3F 7F4C3F -> $0001                RDRL0           EQU     $01
004C3F 7F4C3F -> $0374                PERL            EQU     $0374
004C3F 7F4C3F -> $0080                PERL7           EQU     $80
004C3F 7F4C3F -> $0040                PERL6           EQU     $40
004C3F 7F4C3F -> $0020                PERL5           EQU     $20
004C3F 7F4C3F -> $0010                PERL4           EQU     $10
004C3F 7F4C3F -> $0008                PERL3           EQU     $08
004C3F 7F4C3F -> $0004                PERL2           EQU     $04
004C3F 7F4C3F -> $0002                PERL1           EQU     $02
004C3F 7F4C3F -> $0001                PERL0           EQU     $01
004C3F 7F4C3F -> $0375                PPSL            EQU     $0375
004C3F 7F4C3F -> $0080                PPSL7           EQU     $80
004C3F 7F4C3F -> $0040                PPSL6           EQU     $40
004C3F 7F4C3F -> $0020                PPSL5           EQU     $20
004C3F 7F4C3F -> $0010                PPSL4           EQU     $10
004C3F 7F4C3F -> $0008                PPSL3           EQU     $08
004C3F 7F4C3F -> $0004                PPSL2           EQU     $04
004C3F 7F4C3F -> $0002                PPSL1           EQU     $02
004C3F 7F4C3F -> $0001                PPSL0           EQU     $01
004C3F 7F4C3F -> $0376                WOML            EQU     $0376
004C3F 7F4C3F -> $0080                WOML7           EQU     $80
004C3F 7F4C3F -> $0040                WOML6           EQU     $40
004C3F 7F4C3F -> $0020                WOML5           EQU     $20
004C3F 7F4C3F -> $0010                WOML4           EQU     $10
004C3F 7F4C3F -> $0008                WOML3           EQU     $08
004C3F 7F4C3F -> $0004                WOML2           EQU     $04
004C3F 7F4C3F -> $0002                WOML1           EQU     $02
004C3F 7F4C3F -> $0001                WOML0           EQU     $01
004C3F 7F4C3F -> $0377                PTLRR           EQU     $0377
004C3F 7F4C3F -> $0080                PTLRR7          EQU     $80
004C3F 7F4C3F -> $0040                PTLRR6          EQU     $40
004C3F 7F4C3F -> $0020                PTLRR5          EQU     $20
004C3F 7F4C3F -> $0010                PTLRR4          EQU     $10
004C3F 7F4C3F -> $0378                PTF             EQU     $0378
004C3F 7F4C3F -> $0080                PTF7            EQU     $80
004C3F 7F4C3F -> $0040                PTF6            EQU     $40
004C3F 7F4C3F -> $0020                PTF5            EQU     $20
004C3F 7F4C3F -> $0010                PTF4            EQU     $10
004C3F 7F4C3F -> $0008                PTF3            EQU     $08
004C3F 7F4C3F -> $0004                PTF2            EQU     $04
004C3F 7F4C3F -> $0002                PTF1            EQU     $02
004C3F 7F4C3F -> $0001                PTF0            EQU     $01
004C3F 7F4C3F -> $0379                PTIF            EQU     $0379
004C3F 7F4C3F -> $0080                PTIF7           EQU     $80
004C3F 7F4C3F -> $0040                PTIF6           EQU     $40
004C3F 7F4C3F -> $0020                PTIF5           EQU     $20
004C3F 7F4C3F -> $0010                PTIF4           EQU     $10
004C3F 7F4C3F -> $0008                PTIF3           EQU     $08
004C3F 7F4C3F -> $0004                PTIF2           EQU     $04
004C3F 7F4C3F -> $0002                PTIF1           EQU     $02
004C3F 7F4C3F -> $0001                PTIF0           EQU     $01
004C3F 7F4C3F -> $037A                DDRF            EQU     $037A
004C3F 7F4C3F -> $0080                DDRF7           EQU     $80
004C3F 7F4C3F -> $0040                DDRF6           EQU     $40
004C3F 7F4C3F -> $0020                DDRF5           EQU     $20
004C3F 7F4C3F -> $0010                DDRF4           EQU     $10
004C3F 7F4C3F -> $0008                DDRF3           EQU     $08
004C3F 7F4C3F -> $0004                DDRF2           EQU     $04
004C3F 7F4C3F -> $0002                DDRF1           EQU     $02
004C3F 7F4C3F -> $0001                DDRF0           EQU     $01
004C3F 7F4C3F -> $037B                RDRF            EQU     $037B
004C3F 7F4C3F -> $0080                RDRF7           EQU     $80
004C3F 7F4C3F -> $0040                RDRF6           EQU     $40
004C3F 7F4C3F -> $0020                RDRF5           EQU     $20
004C3F 7F4C3F -> $0010                RDRF4           EQU     $10
004C3F 7F4C3F -> $0008                RDRF3           EQU     $08
004C3F 7F4C3F -> $0004                RDRF2           EQU     $04
004C3F 7F4C3F -> $0002                RDRF1           EQU     $02
004C3F 7F4C3F -> $0001                RDRF0           EQU     $01
004C3F 7F4C3F -> $037C                PERF            EQU     $037C
004C3F 7F4C3F -> $0080                PERF7           EQU     $80
004C3F 7F4C3F -> $0040                PERF6           EQU     $40
004C3F 7F4C3F -> $0020                PERF5           EQU     $20
004C3F 7F4C3F -> $0010                PERF4           EQU     $10
004C3F 7F4C3F -> $0008                PERF3           EQU     $08
004C3F 7F4C3F -> $0004                PERF2           EQU     $04
004C3F 7F4C3F -> $0002                PERF1           EQU     $02
004C3F 7F4C3F -> $0001                PERF0           EQU     $01
004C3F 7F4C3F -> $037D                PPSF            EQU     $037D
004C3F 7F4C3F -> $0080                PPSF7           EQU     $80
004C3F 7F4C3F -> $0040                PPSF6           EQU     $40
004C3F 7F4C3F -> $0020                PPSF5           EQU     $20
004C3F 7F4C3F -> $0010                PPSF4           EQU     $10
004C3F 7F4C3F -> $0008                PPSF3           EQU     $08
004C3F 7F4C3F -> $0004                PPSF2           EQU     $04
004C3F 7F4C3F -> $0002                PPSF1           EQU     $02
004C3F 7F4C3F -> $0001                PPSF0           EQU     $01
004C3F 7F4C3F -> $037F                PTFRR           EQU     $037F
004C3F 7F4C3F -> $0020                PTFRR5          EQU     $20
004C3F 7F4C3F -> $0010                PTFRR4          EQU     $10
004C3F 7F4C3F -> $0008                PTFRR3          EQU     $08
004C3F 7F4C3F -> $0004                PTFRR2          EQU     $04
004C3F 7F4C3F -> $0002                PTFRR1          EQU     $02
004C3F 7F4C3F -> $0001                PTFRR0          EQU     $01
004C3F 7F4C3F -> $0380                XGMCTL          EQU     $0380
004C3F 7F4C3F -> $8000                XGEM            EQU     $8000
004C3F 7F4C3F -> $4000                XGFRZM          EQU     $4000
004C3F 7F4C3F -> $2000                XGDBGM          EQU     $2000
004C3F 7F4C3F -> $1000                XGSSM           EQU     $1000
004C3F 7F4C3F -> $0800                XGFACTM         EQU     $0800
004C3F 7F4C3F -> $0200                XGSWEFM         EQU     $0200
004C3F 7F4C3F -> $0100                XGIEM           EQU     $0100
004C3F 7F4C3F -> $0080                XGE             EQU     $0080
004C3F 7F4C3F -> $0040                XGFRZ           EQU     $0040
004C3F 7F4C3F -> $0020                XGDBG           EQU     $0020
004C3F 7F4C3F -> $0010                XGSS            EQU     $0010
004C3F 7F4C3F -> $0008                XGFACT          EQU     $0008
004C3F 7F4C3F -> $0002                XGSWEF          EQU     $0002
004C3F 7F4C3F -> $0001                XGIE            EQU     $0001
004C3F 7F4C3F -> $0382                XGCHID          EQU     $0382
004C3F 7F4C3F -> $0383                XGCHPL          EQU     $0383
004C3F 7F4C3F -> $0385                XGISPSEL        EQU     $0385
004C3F 7F4C3F -> $0386                XGISP31         EQU     $0386
004C3F 7F4C3F -> $0386                XGISP74         EQU     $0386
004C3F 7F4C3F -> $0386                XGVBR           EQU     $0386
004C3F 7F4C3F -> $0388                XGIF_7F_78      EQU     $0388
004C3F 7F4C3F -> $0080                XGIF_7F         EQU     $80
004C3F 7F4C3F -> $0040                XGIF_7E         EQU     $40
004C3F 7F4C3F -> $0020                XGIF_7D         EQU     $20
004C3F 7F4C3F -> $0010                XGIF_7C         EQU     $10
004C3F 7F4C3F -> $0008                XGIF_7B         EQU     $08
004C3F 7F4C3F -> $0004                XGIF_7A         EQU     $04
004C3F 7F4C3F -> $0002                XGIF_79         EQU     $02
004C3F 7F4C3F -> $0001                XGIF_78         EQU     $01
004C3F 7F4C3F -> $0389                XGIF_77_70      EQU     $0389
004C3F 7F4C3F -> $0080                XGIF_77         EQU     $80
004C3F 7F4C3F -> $0040                XGIF_76         EQU     $40
004C3F 7F4C3F -> $0020                XGIF_75         EQU     $20
004C3F 7F4C3F -> $0010                XGIF_74         EQU     $10
004C3F 7F4C3F -> $0008                XGIF_73         EQU     $08
004C3F 7F4C3F -> $0004                XGIF_72         EQU     $04
004C3F 7F4C3F -> $0002                XGIF_71         EQU     $02
004C3F 7F4C3F -> $0001                XGIF_70         EQU     $01
004C3F 7F4C3F -> $038A                XGIF_6F_68      EQU     $038A
004C3F 7F4C3F -> $0080                XGIF_6F         EQU     $80
004C3F 7F4C3F -> $0040                XGIF_6E         EQU     $40
004C3F 7F4C3F -> $0020                XGIF_6D         EQU     $20
004C3F 7F4C3F -> $0010                XGIF_6C         EQU     $10
004C3F 7F4C3F -> $0008                XGIF_6B         EQU     $08
004C3F 7F4C3F -> $0004                XGIF_6A         EQU     $04
004C3F 7F4C3F -> $0002                XGIF_69         EQU     $02
004C3F 7F4C3F -> $0001                XGIF_68         EQU     $01
004C3F 7F4C3F -> $038B                XGIF_67_60      EQU     $038B
004C3F 7F4C3F -> $0080                XGIF_67         EQU     $80
004C3F 7F4C3F -> $0040                XGIF_66         EQU     $40
004C3F 7F4C3F -> $0020                XGIF_65         EQU     $20
004C3F 7F4C3F -> $0010                XGIF_64         EQU     $10
004C3F 7F4C3F -> $0008                XGIF_63         EQU     $08
004C3F 7F4C3F -> $0004                XGIF_62         EQU     $04
004C3F 7F4C3F -> $0002                XGIF_61         EQU     $02
004C3F 7F4C3F -> $0001                XGIF_60         EQU     $01
004C3F 7F4C3F -> $038C                XGIF_5F_58      EQU     $038C
004C3F 7F4C3F -> $0080                XGIF_5F         EQU     $80
004C3F 7F4C3F -> $0040                XGIF_5E         EQU     $40
004C3F 7F4C3F -> $0020                XGIF_5D         EQU     $20
004C3F 7F4C3F -> $0010                XGIF_5C         EQU     $10
004C3F 7F4C3F -> $0008                XGIF_5B         EQU     $08
004C3F 7F4C3F -> $0004                XGIF_5A         EQU     $04
004C3F 7F4C3F -> $0002                XGIF_59         EQU     $02
004C3F 7F4C3F -> $0001                XGIF_58         EQU     $01
004C3F 7F4C3F -> $038D                XGIF_57_50      EQU     $038D
004C3F 7F4C3F -> $0080                XGIF_57         EQU     $80
004C3F 7F4C3F -> $0040                XGIF_56         EQU     $40
004C3F 7F4C3F -> $0020                XGIF_55         EQU     $20
004C3F 7F4C3F -> $0010                XGIF_54         EQU     $10
004C3F 7F4C3F -> $0008                XGIF_53         EQU     $08
004C3F 7F4C3F -> $0004                XGIF_52         EQU     $04
004C3F 7F4C3F -> $0002                XGIF_51         EQU     $02
004C3F 7F4C3F -> $0001                XGIF_50         EQU     $01
004C3F 7F4C3F -> $038E                XGIF_4F_48      EQU     $038E
004C3F 7F4C3F -> $0080                XGIF_4F         EQU     $80
004C3F 7F4C3F -> $0040                XGIF_4E         EQU     $40
004C3F 7F4C3F -> $0020                XGIF_4D         EQU     $20
004C3F 7F4C3F -> $0010                XGIF_4C         EQU     $10
004C3F 7F4C3F -> $0008                XGIF_4B         EQU     $08
004C3F 7F4C3F -> $0004                XGIF_4A         EQU     $04
004C3F 7F4C3F -> $0002                XGIF_49         EQU     $02
004C3F 7F4C3F -> $0001                XGIF_48         EQU     $01
004C3F 7F4C3F -> $038F                XGIF_47_40      EQU     $038F
004C3F 7F4C3F -> $0080                XGIF_47         EQU     $80
004C3F 7F4C3F -> $0040                XGIF_46         EQU     $40
004C3F 7F4C3F -> $0020                XGIF_45         EQU     $20
004C3F 7F4C3F -> $0010                XGIF_44         EQU     $10
004C3F 7F4C3F -> $0008                XGIF_43         EQU     $08
004C3F 7F4C3F -> $0004                XGIF_42         EQU     $04
004C3F 7F4C3F -> $0002                XGIF_41         EQU     $02
004C3F 7F4C3F -> $0001                XGIF_40         EQU     $01
004C3F 7F4C3F -> $0390                XGIF_3F_38      EQU     $0390
004C3F 7F4C3F -> $0080                XGIF_3F         EQU     $80
004C3F 7F4C3F -> $0040                XGIF_3E         EQU     $40
004C3F 7F4C3F -> $0020                XGIF_3D         EQU     $20
004C3F 7F4C3F -> $0010                XGIF_3C         EQU     $10
004C3F 7F4C3F -> $0008                XGIF_3B         EQU     $08
004C3F 7F4C3F -> $0004                XGIF_3A         EQU     $04
004C3F 7F4C3F -> $0002                XGIF_39         EQU     $02
004C3F 7F4C3F -> $0001                XGIF_38         EQU     $01
004C3F 7F4C3F -> $0391                XGIF_37_30      EQU     $0391
004C3F 7F4C3F -> $0080                XGIF_37         EQU     $80
004C3F 7F4C3F -> $0040                XGIF_36         EQU     $40
004C3F 7F4C3F -> $0020                XGIF_35         EQU     $20
004C3F 7F4C3F -> $0010                XGIF_34         EQU     $10
004C3F 7F4C3F -> $0008                XGIF_33         EQU     $08
004C3F 7F4C3F -> $0004                XGIF_32         EQU     $04
004C3F 7F4C3F -> $0002                XGIF_31         EQU     $02
004C3F 7F4C3F -> $0001                XGIF_30         EQU     $01
004C3F 7F4C3F -> $0392                XGIF_2F_28      EQU     $0392
004C3F 7F4C3F -> $0080                XGIF_2F         EQU     $80
004C3F 7F4C3F -> $0040                XGIF_2E         EQU     $40
004C3F 7F4C3F -> $0020                XGIF_2D         EQU     $20
004C3F 7F4C3F -> $0010                XGIF_2C         EQU     $10
004C3F 7F4C3F -> $0008                XGIF_2B         EQU     $08
004C3F 7F4C3F -> $0004                XGIF_2A         EQU     $04
004C3F 7F4C3F -> $0002                XGIF_29         EQU     $02
004C3F 7F4C3F -> $0001                XGIF_28         EQU     $01
004C3F 7F4C3F -> $0393                XGIF_27_20      EQU     $0393
004C3F 7F4C3F -> $0080                XGIF_27         EQU     $80
004C3F 7F4C3F -> $0040                XGIF_26         EQU     $40
004C3F 7F4C3F -> $0020                XGIF_25         EQU     $20
004C3F 7F4C3F -> $0010                XGIF_24         EQU     $10
004C3F 7F4C3F -> $0008                XGIF_23         EQU     $08
004C3F 7F4C3F -> $0004                XGIF_22         EQU     $04
004C3F 7F4C3F -> $0002                XGIF_21         EQU     $02
004C3F 7F4C3F -> $0001                XGIF_20         EQU     $01
004C3F 7F4C3F -> $0394                XGIF_1F_18      EQU     $0394
004C3F 7F4C3F -> $0080                XGIF_1F         EQU     $80
004C3F 7F4C3F -> $0040                XGIF_1E         EQU     $40
004C3F 7F4C3F -> $0020                XGIF_1D         EQU     $20
004C3F 7F4C3F -> $0010                XGIF_1C         EQU     $10
004C3F 7F4C3F -> $0008                XGIF_1B         EQU     $08
004C3F 7F4C3F -> $0004                XGIF_1A         EQU     $04
004C3F 7F4C3F -> $0002                XGIF_19         EQU     $02
004C3F 7F4C3F -> $0001                XGIF_18         EQU     $01
004C3F 7F4C3F -> $0395                XGIF_17_10      EQU     $0395
004C3F 7F4C3F -> $0080                XGIF_17         EQU     $80
004C3F 7F4C3F -> $0040                XGIF_16         EQU     $40
004C3F 7F4C3F -> $0020                XGIF_15         EQU     $20
004C3F 7F4C3F -> $0010                XGIF_14         EQU     $10
004C3F 7F4C3F -> $0008                XGIF_13         EQU     $08
004C3F 7F4C3F -> $0004                XGIF_12         EQU     $04
004C3F 7F4C3F -> $0002                XGIF_11         EQU     $02
004C3F 7F4C3F -> $0001                XGIF_10         EQU     $01
004C3F 7F4C3F -> $0396                XGIF_0F_08      EQU     $0396
004C3F 7F4C3F -> $0080                XGIF_0F         EQU     $80
004C3F 7F4C3F -> $0040                XGIF_0E         EQU     $40
004C3F 7F4C3F -> $0020                XGIF_0D         EQU     $20
004C3F 7F4C3F -> $0010                XGIF_0C         EQU     $10
004C3F 7F4C3F -> $0008                XGIF_0B         EQU     $08
004C3F 7F4C3F -> $0004                XGIF_0A         EQU     $04
004C3F 7F4C3F -> $0002                XGIF_09         EQU     $02
004C3F 7F4C3F -> $0001                XGIF_08         EQU     $01
004C3F 7F4C3F -> $0397                XGIF_07_00      EQU     $0397
004C3F 7F4C3F -> $0080                XGIF_07         EQU     $80
004C3F 7F4C3F -> $0040                XGIF_06         EQU     $40
004C3F 7F4C3F -> $0020                XGIF_05         EQU     $20
004C3F 7F4C3F -> $0010                XGIF_04         EQU     $10
004C3F 7F4C3F -> $0008                XGIF_03         EQU     $08
004C3F 7F4C3F -> $0004                XGIF_02         EQU     $04
004C3F 7F4C3F -> $0002                XGIF_01         EQU     $02
004C3F 7F4C3F -> $0001                XGIF_00         EQU     $01
004C3F 7F4C3F -> $0398                XGSWT           EQU     $0398
004C3F 7F4C3F -> $039A                XGSEM           EQU     $039A
                                      ;$039C reserved
004C3F 7F4C3F -> $039D                XGCCR           EQU     $039D
004C3F 7F4C3F -> $0008                XGN             EQU     $08
004C3F 7F4C3F -> $0004                XGZ             EQU     $04
004C3F 7F4C3F -> $0002                XGV             EQU     $02
004C3F 7F4C3F -> $0001                XGC             EQU     $01
004C3F 7F4C3F -> $039E                XGPC            EQU     $039E
                                      ;$03A0 to $03A1 reserved
004C3F 7F4C3F -> $03A2                XGR1            EQU     $03A2
004C3F 7F4C3F -> $03A4                XGR2            EQU     $03A4
004C3F 7F4C3F -> $03A6                XGR3            EQU     $03A6
004C3F 7F4C3F -> $03A8                XGR4            EQU     $03A8
004C3F 7F4C3F -> $03AA                XGR5            EQU     $03AA
004C3F 7F4C3F -> $03AC                XGR6            EQU     $03AC
004C3F 7F4C3F -> $03AE                XGR7            EQU     $03AE
                                      ;$03B0 to $03CF reserved
004C3F 7F4C3F -> $03D0                TIM_TIOS        EQU     $03D0
                                      ;IOS7           EQU     $80
                                      ;IOS6           EQU     $40
                                      ;IOS5           EQU     $20
                                      ;IOS4           EQU     $10
                                      ;IOS3           EQU     $08
                                      ;IOS2           EQU     $04
                                      ;IOS1           EQU     $02
                                      ;IOS0           EQU     $01
004C3F 7F4C3F -> $03D1                TIM_TCFORC      EQU     $03D1
                                      ;FOC7           EQU     $80
                                      ;FOC6           EQU     $40
                                      ;FOC5           EQU     $20
                                      ;FOC4           EQU     $10
                                      ;FOC3           EQU     $08
                                      ;FOC2           EQU     $04
                                      ;FOC1           EQU     $02
                                      ;FOC0           EQU     $01
004C3F 7F4C3F -> $03D2                TIM_TOC7M       EQU     $03D2
                                      ;OC7M7          EQU     $80
                                      ;OC7M6          EQU     $40
                                      ;OC7M5          EQU     $20
                                      ;OC7M4          EQU     $10
                                      ;OC7M3          EQU     $08
                                      ;OC7M2          EQU     $04
                                      ;OC7M1          EQU     $02
                                      ;OC7M0          EQU     $01
004C3F 7F4C3F -> $03D3                TIM_TOC7D       EQU     $03D3
                                      ;OC7D7          EQU     $80
                                      ;OC7D6          EQU     $40
                                      ;OC7D5          EQU     $20
                                      ;OC7D4          EQU     $10
                                      ;OC7D3          EQU     $08
                                      ;OC7D2          EQU     $04
                                      ;OC7D1          EQU     $02
                                      ;OC7D0          EQU     $01
004C3F 7F4C3F -> $03D4                TIM_TCNT        EQU     $03D4
004C3F 7F4C3F -> $03D6                TIM_TSCR1       EQU     $03D6
                                      ;TEN            EQU     $80
                                      ;TSWAI          EQU     $40
                                      ;TSFRZ          EQU     $20
                                      ;TFFCA          EQU     $10
004C3F 7F4C3F -> $03D7                TIM_TTOV        EQU     $03D7
                                      ;TOV7           EQU     $80
                                      ;TOV6           EQU     $40
                                      ;TOV5           EQU     $20
                                      ;TOV4           EQU     $10
                                      ;TOV3           EQU     $08
                                      ;TOV2           EQU     $04
                                      ;TOV1           EQU     $02
                                      ;TOV0           EQU     $01
004C3F 7F4C3F -> $03D8                TIM_TCTL1       EQU     $03D8
                                      ;OM7            EQU     $80
                                      ;OL7            EQU     $40
                                      ;OM6            EQU     $20
                                      ;OL6            EQU     $10
                                      ;OM5            EQU     $08
                                      ;OL5            EQU     $04
                                      ;OM4            EQU     $02
                                      ;OL4            EQU     $01
004C3F 7F4C3F -> $03D9                TIM_TCTL2       EQU     $03D9
                                      ;OM3            EQU     $80
                                      ;OL3            EQU     $40
                                      ;OM2            EQU     $20
                                      ;OL2            EQU     $10
                                      ;OM1            EQU     $08
                                      ;OL1            EQU     $04
                                      ;OM0            EQU     $02
                                      ;OL0            EQU     $01
004C3F 7F4C3F -> $03DA                TIM_TCTL3       EQU     $03DA
                                      ;EDG7B          EQU     $80
                                      ;EDG7A          EQU     $40
                                      ;EDG6B          EQU     $20
                                      ;EDG6A          EQU     $10
                                      ;EDG5B          EQU     $08
                                      ;EDG5A          EQU     $04
                                      ;EDG4B          EQU     $02
                                      ;EDG4A          EQU     $01
004C3F 7F4C3F -> $03DB                TIM_TCTL4       EQU     $03DB
                                      ;EDG3B          EQU     $80
                                      ;EDG3A          EQU     $40
                                      ;EDG2B          EQU     $20
                                      ;EDG2A          EQU     $10
                                      ;EDG1B          EQU     $08
                                      ;EDG1A          EQU     $04
                                      ;EDG0B          EQU     $02
                                      ;EDG0A          EQU     $01
004C3F 7F4C3F -> $03DC                TIM_TIE         EQU     $03DC
                                      ;C7I            EQU     $80
                                      ;C6I            EQU     $40
                                      ;C5I            EQU     $20
                                      ;C4I            EQU     $10
                                      ;C3I            EQU     $08
                                      ;C2I            EQU     $04
                                      ;C1I            EQU     $02
                                      ;C0I            EQU     $01
004C3F 7F4C3F -> $03DD                TIM_TSCR2       EQU     $03DD
                                      ;TOI            EQU     $80
                                      ;TCRE           EQU     $08
                                      ;PR2            EQU     $04
                                      ;PR1            EQU     $02
                                      ;PR0            EQU     $01
004C3F 7F4C3F -> $03DE                TIM_TFLG1       EQU     $03DE
                                      ;C7F            EQU     $80
                                      ;C6F            EQU     $40
                                      ;C5F            EQU     $20
                                      ;C4F            EQU     $10
                                      ;C3F            EQU     $08
                                      ;C2F            EQU     $04
                                      ;C1F            EQU     $02
                                      ;C0F            EQU     $01
004C3F 7F4C3F -> $03DF                TIM_TFLG2       EQU     $03DF
                                      ;TOF            EQU     $80
004C3F 7F4C3F -> $03E0                TIM_TC0         EQU     $03E0
004C3F 7F4C3F -> $0052                TIM_TC1         EQU     $0052
004C3F 7F4C3F -> $0054                TIM_TC2         EQU     $0054
004C3F 7F4C3F -> $0056                TIM_TC3         EQU     $0056
004C3F 7F4C3F -> $0058                TIM_TC4         EQU     $0058
004C3F 7F4C3F -> $005A                TIM_TC5         EQU     $005A
004C3F 7F4C3F -> $005C                TIM_TC6         EQU     $005C
004C3F 7F4C3F -> $005E                TIM_TC7         EQU     $005E
004C3F 7F4C3F -> $03F0                TIM_PACTL       EQU     $03F0
                                      ;PAEN           EQU     $40
                                      ;PAMOD          EQU     $20
                                      ;PEDGE          EQU     $10
                                      ;CLK1           EQU     $08
                                      ;CLK0           EQU     $04
                                      ;PAOVI          EQU     $02
                                      ;PAI            EQU     $01
004C3F 7F4C3F -> $03F1                TIM_PAFLG       EQU     $03F1
                                      ;PAOVF          EQU     $02
                                      ;PAIF           EQU     $01
004C3F 7F4C3F -> $03F2                TIM_PACNT       EQU     $03F2
004C3F 7F4C3F -> $03F2                TIM_PACN1       EQU     $03F2
004C3F 7F4C3F -> $03F2                TIM_PACNH       EQU     $03F2
004C3F 7F4C3F -> $03F3                TIM_PACN0       EQU     $03F3
004C3F 7F4C3F -> $03F3                TIM_PACNL       EQU     $03F3
                                      ;$03F4 to $03FB reserved
004C3F 7F4C3F -> $03FC                TIM_OCPD        EQU     $03FC
                                      ;OCPD0          EQU     $01
                                      ;OCPD1          EQU     $02
                                      ;OCPD2          EQU     $04
                                      ;OCPD3          EQU     $08
                                      ;OCPD4          EQU     $10
                                      ;OCPD5          EQU     $20
                                      ;OCPD6          EQU     $40
                                      ;OCPD7          EQU     $80
                                      ;$03FD reserved
004C3F 7F4C3F -> $03FE                TIM_PTPSR       EQU     $03FE
                                      ;PTPS0          EQU     $01
                                      ;PTPS1          EQU     $02
                                      ;PTPS2          EQU     $04
                                      ;PTPS3          EQU     $08
                                      ;PTPS4          EQU     $10
                                      ;PTPS5          EQU     $20
                                      ;PTPS6          EQU     $40
                                      ;PTPS7          EQU     $80
                                      ;$03FF to $07FF reserved
                                      ;NVM locations
004C3F 7F4C3F -> $FF00                BAKEY0          EQU     $FF00
004C3F 7F4C3F -> $FF02                BAKEY1          EQU     $FF02
004C3F 7F4C3F -> $FF04                BAKEY2          EQU     $FF04
004C3F 7F4C3F -> $FF06                BAKEY3          EQU     $FF06
004C3F 7F4C3F -> $FF0C                NVFPROT         EQU     $FF0C
004C3F 7F4C3F -> $0080                FPOPEN          EQU     $80
004C3F 7F4C3F -> $0040                RNV6            EQU     $40
004C3F 7F4C3F -> $0020                FPHDIS          EQU     $20
004C3F 7F4C3F -> $0010                FPHS1           EQU     $10
004C3F 7F4C3F -> $0008                FPHS0           EQU     $08
004C3F 7F4C3F -> $0004                FPLDIS          EQU     $04
004C3F 7F4C3F -> $0002                FPLS1           EQU     $02
004C3F 7F4C3F -> $0001                FPLS0           EQU     $01
004C3F 7F4C3F -> $FF0D                NVEPROT         EQU     $FF0D
004C3F 7F4C3F -> $0080                EPOPEN          EQU     $80
004C3F 7F4C3F -> $0040                RNV6            EQU     $40
004C3F 7F4C3F -> $0020                RNV5            EQU     $20
004C3F 7F4C3F -> $0010                RNV4            EQU     $10
004C3F 7F4C3F -> $0008                EPDIS           EQU     $08
004C3F 7F4C3F -> $0004                EPS2            EQU     $04
004C3F 7F4C3F -> $0002                EPS1            EQU     $02
004C3F 7F4C3F -> $0001                EPS0            EQU     $01
004C3F 7F4C3F -> $FF0E                NVFOPT          EQU     $FF0E
004C3F 7F4C3F -> $0080                NV7             EQU     $80
004C3F 7F4C3F -> $0040                NV6             EQU     $40
004C3F 7F4C3F -> $0020                NV5             EQU     $20
004C3F 7F4C3F -> $0010                NV4             EQU     $10
004C3F 7F4C3F -> $0008                NV3             EQU     $08
004C3F 7F4C3F -> $0004                NV2             EQU     $04
004C3F 7F4C3F -> $0002                NV1             EQU     $02
004C3F 7F4C3F -> $0001                NV0             EQU     $01
004C3F 7F4C3F -> $FF0F                NVFSEC          EQU     $FF0F
004C3F 7F4C3F -> $0080                KEYEN1          EQU     $80
004C3F 7F4C3F -> $0040                KEYEN0          EQU     $40
004C3F 7F4C3F -> $0020                RNV5            EQU     $20
004C3F 7F4C3F -> $0010                RNV4            EQU     $10
004C3F 7F4C3F -> $0008                RNV3            EQU     $08
004C3F 7F4C3F -> $0004                RNV2            EQU     $04
004C3F 7F4C3F -> $0002                SEC1            EQU     $02
004C3F 7F4C3F -> $0001                SEC0            EQU     $01
                                      ;###############################################################################
                                      ;# S12CBase - GPIO - GPIO Handler (BEPM)                                       #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2014 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12(X) MCU   #
                                      ;#    families.                                                                #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module initializes all unused GPIO ports                            #
                                      ;#    Port AD:                                                                 #
                                      ;#     PAD00 - ATD0  0 (K5)               (analog       no pull  )             #
                                      ;#     PAD01 - ATD0  1 (K4)               (analog       no pull  )             #
                                      ;#     PAD02 - ATD0  2 (K3)               (analog       no pull  )             #
                                      ;#     PAD03 - ATD0  3 (K2)               (analog       no pull  )             #
                                      ;#     PAD04 - ATD0  4 (K1)               (analog       no pull  )             #
                                      ;#     PAD05 - ATD0  5 (RV10)             (analog       no pull  )             #
                                      ;#     PAD06 - ATD0  6 (RV9)              (analog       no pull  )             #
                                      ;#     PAD07 - ATD0  7 (K6)               (analog       no pull  )             #
                                      ;#     PAD08 - ATD0  8 (RV8)              (analog       no pull  )             #
                                      ;#     PAD09 - ATD0  9 (RV7)              (analog       no pull  )             #
                                      ;#     PAD10 - ATD0 10 (RV6)              (analog       no pull  )             #
                                      ;#     PAD11 - ATD0 11 (RV5)              (analog       no pull  )             #
                                      ;#     PAD12 - ATD0 12 (RV4)              (analog       no pull  )             #
                                      ;#     PAD13 - ATD0 13 (RV3)              (analog       no pull  )             #
                                      ;#     PAD14 - ATD0 14 (P3)               (analog       no pull  )             #
                                      ;#     PAD15 - ATD0 15 (P2)               (analog       no pull  )             #
                                      ;#     PAD16 - NC                         (input        pull-up  )             #
                                      ;#     PAD17 - NC                         (input        pull-up  )             #
                                      ;#     PAD18 - NC                         (input        pull-up  )             #
                                      ;#     PAD19 - NC                         (input        pull-up  )             #
                                      ;#     PAD20 - NC                         (input        pull-up  )             #
                                      ;#     PAD21 - NC                         (input        pull-up  )             #
                                      ;#     PAD22 - NC                         (input        pull-up  )             #
                                      ;#     PAD23 - NC                         (input        pull-up  )             #
                                      ;#     PAD24 - NC                         (input        pull-up  )             #
                                      ;#     PAD25 - NC                         (input        pull-up  )             #
                                      ;#     PAD26 - NC                         (input        pull-up  )             #
                                      ;#     PAD27 - NC                         (input        pull-up  )             #
                                      ;#     PAD28 - NC                         (input        pull-up  )             #
                                      ;#     PAD29 - NC                         (input        pull-up  )             #
                                      ;#     PAD30 - NC                         (input        pull-up  )             #
                                      ;#     PAD30 - NC                         (input        pull-up  )             #
                                      ;#    Port A:                                                                  #
                                      ;#     PA0 - SW7                          (input        pull-up  )             #
                                      ;#     PA1 - SW3                          (input        pull-up  )             #
                                      ;#     PA2 - SW6                          (input        pull-up  )             #
                                      ;#     PA3 - SW2                          (input        pull-up  )             #
                                      ;#     PA4 - SW5                          (input        pull-up  )             #
                                      ;#     PA5 - SW1                          (input        pull-up  )             #
                                      ;#     PA6 - SW2 (run/load)               (input        pull-up  )             #
                                      ;#     PA7 - SW4                          (input        pull-up  )             #
                                      ;#    Port B:                                                                  #
                                      ;#     PB0 - LED red (D9)                 (output       low      )             #
                                      ;#     PB1 - LED red (D23)                (output       low      )             #
                                      ;#     PB2 - LED red (D4)                 (output       low      )             #
                                      ;#     PB3 - LED red (D20)                (output       low      )             #
                                      ;#     PB4 - LED red (D10)                (output       low      )             #
                                      ;#     PB5 - LED red (D1)                 (output       low      )             #
                                      ;#     PB6 - LED red (D10)                (output       low      )             #
                                      ;#     PB7 - LED red (D2)                 (output       low      )             #
                                      ;#    Port C:                                                                  #
                                      ;#     PC0 - NC                           (input        pull-up  )             #
                                      ;#     PC1 - NC                           (input        pull-up  )             #
                                      ;#     PC2 - NC                           (input        pull-up  )             #
                                      ;#     PC3 - NC                           (input        pull-up  )             #
                                      ;#     PC4 - NC                           (input        pull-up  )             #
                                      ;#     PC5 - NC                           (input        pull-up  )             #
                                      ;#     PC6 - NC                           (input        pull-up  )             #
                                      ;#     PC7 - NC                           (input        pull-up  )             #
                                      ;#    Port D:                                                                  #
                                      ;#     PD0 - NC                           (input        pull-up  )             #
                                      ;#     PD1 - NC                           (input        pull-up  )             #
                                      ;#     PD2 - NC                           (input        pull-up  )             #
                                      ;#     PD3 - NC                           (input        pull-up  )             #
                                      ;#     PD4 - NC                           (input        pull-up  )             #
                                      ;#     PD5 - NC                           (input        pull-up  )             #
                                      ;#     PD6 - NC                           (input        pull-up  )             #
                                      ;#     PD7 - NC                           (input        pull-up  )             #
                                      ;#    Port E:                                                                  #
                                      ;#     PE0 - XIRQ (gear tooth sensor)     (input        pull-up  )             #
                                      ;#     PE1 - IRQ  (gear tooth sensor)     (input        pull-up  )             #
                                      ;#     PE2 - SD card detect               (input        pull_up  )             #
                                      ;#     PE3 - SW5                          (input        pull-up  )             #
                                      ;#     PE4 - SW2                          (input        pull-up  )             #
                                      ;#     PE5 - SW4 (MODA)                   (input        pull-up  )             #
                                      ;#     PE6 - SW1 (MODB)                   (input        pull-up  )             #
                                      ;#     PE7 - SW6                          (input        pull-up  )             #
                                      ;#    Port F:                                                                  #
                                      ;#     PF0 - NC                           (input        pull-up  )             #
                                      ;#     PF1 - NC                           (input        pull-up  )             #
                                      ;#     PF2 - NC                           (input        pull-up  )             #
                                      ;#     PF3 - NC                           (input        pull-up  )             #
                                      ;#     PF4 - NC                           (input        pull-up  )             #
                                      ;#     PF5 - NC                           (input        pull-up  )             #
                                      ;#     PF6 - NC                           (input        pull-up  )             #
                                      ;#     PF7 - NC                           (input        pull-up  )             #
                                      ;#    Port H:                                                                  #
                                      ;#     PH0 - SD data out     (MISO1)      (input        pull-down)             #
                                      ;#     PH1 - SD CMD          (MOSI1)      (output       low      )             #
                                      ;#     PH2 - SD CLK          (SCK1)       (output       low      )             #
                                      ;#     PH3 - SD CD           (SS1)        (output       low      )             #
                                      ;#     PH4 - Real time clock (MISO2)      (input        pull-down)             #
                                      ;#     PH5 - Real time clock (MOSI2)      (output       low      )             #
                                      ;#     PH6 - Real time clock (SCK2)       (output       low      )             #
                                      ;#     PH7 - Real time clock (SS2)        (output       low      )             #
                                      ;#    Port J:                                                                  #
                                      ;#     PJ0 - SCI2 RXD                     (input        pull-up  )             #
                                      ;#     PJ1 - SCI2 TXD                     (output       high     )             #
                                      ;#     PJ2 - NC                           (input        pull-up  )             #
                                      ;#     PJ3 - NC                           (input        pull-up  )             #
                                      ;#     PJ4 - NC                           (input        pull-up  )             #
                                      ;#     PJ5 - NC                           (input        pull-up  )             #
                                      ;#     PJ6 - SW4                          (input        pull-up  )             #
                                      ;#     PJ7 - SW2                          (input        pull-up  )             #
                                      ;#    Port K:                                                                  #
                                      ;#     PK0 - LED red (D22)                (output       low      )             #
                                      ;#     PK1 - LED red (D6)                 (output       low      )             #
                                      ;#     PK2 - LED red (D25)                (output       low      )             #
                                      ;#     PK3 - LED red (D2)                 (output       low      )             #
                                      ;#     PK4 - LED red (D19)                (output       low      )             #
                                      ;#     PK5 - LED red (D3)                 (output       low      )             #
                                      ;#     PK6 - NC                           (input        pull-up  )             #
                                      ;#     PK7 - LED red (D2)                 (output       low      )             #
                                      ;#    Port M:                                                                  #
                                      ;#     PM0 - RXCAN0                       (input        pull-up  )             #
                                      ;#     PM1 - TXCAN0                       (output       high     )             #
                                      ;#     PM2 - RXCAN1                       (input        pull-up  )             #
                                      ;#     PM3 - TXCAN1                       (output       high     )             #
                                      ;#     PM4 - SW3                          (input        pull-up  )             #
                                      ;#     PM5 - SW1                          (input        pull-up  )             #
                                      ;#     PM6 - SCI3 RXD                     (input        pull-up  )             #
                                      ;#     PM7 - SCI3 TXD                     (output       high     )             #
                                      ;#    Port L:                                                                  #
                                      ;#     PL0 - NC                           (input        pull-up  )             #
                                      ;#     PL1 - NC                           (input        pull-up  )             #
                                      ;#     PL2 - NC                           (input        pull-up  )             #
                                      ;#     PL3 - NC                           (input        pull-up  )             #
                                      ;#     PL4 - NC                           (input        pull-up  )             #
                                      ;#     PL5 - NC                           (input        pull-up  )             #
                                      ;#     PL6 - NC                           (input        pull-up  )             #
                                      ;#     PL7 - NC                           (input        pull-up  )             #
                                      ;#    Port P:                                                                  #
                                      ;#     PP0 - TIM1 OC4 (P8)                (output       low      )             #
                                      ;#     PP1 - TIM1 OC5 (P4)                (output       low      )             #
                                      ;#     PP2 - TIM1 OC6 (P7)                (output       low      )             #
                                      ;#     PP3 - TIM1 OC7 (P3)                (output       low      )             #
                                      ;#     PP4 - TIM1 OC4 (P3)                (output       low      )             #
                                      ;#     PP5 - TIM1 OC5 (P6)                (output       low      )             #
                                      ;#     PP6 - TIM1 OC6 (P2)                (output       low      )             #
                                      ;#     PP7 - TIM1 OC7 (P7)                (output       low      )             #
                                      ;#    Port R:                                                                  #
                                      ;#     PR0 - NC                           (input        pull-up  )             #
                                      ;#     PR1 - NC                           (input        pull-up  )             #
                                      ;#     PR2 - NC                           (input        pull-up  )             #
                                      ;#     PR3 - NC                           (input        pull-up  )             #
                                      ;#     PR4 - NC                           (input        pull-up  )             #
                                      ;#     PR5 - NC                           (input        pull-up  )             #
                                      ;#     PR6 - NC                           (input        pull-up  )             #
                                      ;#     PR7 - NC                           (input        pull-up  )             #
                                      ;#    Port S:                                                                  #
                                      ;#     PS0 - SCI0 RXD                     (input        pull-up  )             #
                                      ;#     PS1 - SCI0 TXD                     (output       high     )             #
                                      ;#     PS2 - SCI1 RXD                     (input        pull-up  )             #
                                      ;#     PS3 - SCI1 TXD                     (output       high     )             #
                                      ;#     PS4 - MISO0 (P8)                   (input        pull-down)             #
                                      ;#     PS5 - MOSI0 (P8)                   (output       low      )             #
                                      ;#     PS6 - SCK0  (P8)                   (output       low      )             #
                                      ;#     PS7 - SS0   (P8)                   (output       high     )             #
                                      ;#    Port T:                                                                  #
                                      ;#     PT0 - LED red (D7)                 (output       low      )             #
                                      ;#     PT1 - TIM0 IC1                     (input        pull-down)             #
                                      ;#     PT2 - LED red (D8)                 (output       low      )             #
                                      ;#     PT3 - TIM0 IC3                     (input        pull-down)             #
                                      ;#     PT4 - TIM0 IC4                     (input        pull-down)             #
                                      ;#     PT5 - TIM0 IC5                     (input        pull-down)             #
                                      ;#     PT6 - TIM0 IC6                     (input        pull-down)             #
                                      ;#     PT7 - TIM0 IC7                     (input        pull-down)             #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    REGDEF - Register Definitions                                            #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    December 28, 2014                                                        #
                                      ;#      - Initial release                                                      #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001001 0FD001                                                 ORG     GPIO_VARS_START, GPIO_VARS_START_LIN
001001 0FD001 -> $1001                GPIO_VARS_END           EQU     *
001001 0FD001 -> $FD001               GPIO_VARS_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
004457 7F4457                                                 ORG     GPIO_CODE_START, GPIO_CODE_START_LIN
004457 7F4457 -> $4457                GPIO_CODE_END           EQU     *
004457 7F4457 -> $7F4457              GPIO_CODE_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
004B78 7F4B78                                                 ORG     GPIO_TABS_START, GPIO_TABS_START_LIN
004B78 7F4B78 -> $4B78                GPIO_TABS_END           EQU     *
004B78 7F4B78 -> $7F4B78              GPIO_TABS_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - MMAP - Memory Map (BEPM)                                         #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2014 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12(X) MCU   #
                                      ;#    families.                                                                #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module performs all the necessary steps to initialize the device    #
                                      ;#    after each reset.                                                        #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    REGDEF - Register Definitions                                            #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    December 28, 2014                                                        #
                                      ;#      - Initial release                                                      #
                                      ;###############################################################################
                                      ;  Flash Memory Map:
                                      ;  -----------------
                                      ;                     S12XE
                                      ;                +-------------+ $0000
                                      ;                |  Registers  |
                                      ;         RAM->+ +-------------+ $0800
                                      ;              | |  Variables  |
                                      ;              | +-------------+
                                      ;              | |/////////////|
                                      ;       Flash->+ +-------------+ $4000
                                      ;              | |    Code     |
                                      ;              | +-------------+
                                      ;              | |   Tables    |
                                      ;              | +-------------+
                                      ;              | |/////////////|
                                      ;              | +-------------+ $FF10
                                      ;              | |   Vectors   |
                                      ;              + +-------------+
                                      ;
                                      ;  RAM Memory Map:
                                      ;  ---------------
                                      ;                     S12XE
                                      ;                +-------------+ $0000
                                      ;                |  Registers  |
                                      ;         RAM->+ +-------------+ $1000
                                      ;              | |  Variables  |
                                      ;              | +-------------+
                                      ;              | |    Code     |
                                      ;              | +-------------+
                                      ;              | |   Tables    |
                                      ;              | +-------------+
                                      ;              | |/////////////|
                                      ;              | +-------------+ $7F10
                                      ;              | |   Vectors   |
                                      ;              + +-------------+ $8000
                                      ;                |/////////////|
                                      ;                +-------------+
                                      ;
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;RAM or flash
                                      ;S12XEP100 or S12XEQ512
                                      ;###############################################################################
                                      ;# Security and Protection                                                     #
                                      ;###############################################################################
00FF08 7FFF08                                                 ORG     $FF08, $7FFF08  ;unprotect
00FF08 7FFF08 FF FF FF FF FF FF FF FF                         FILL    $FF, 8
00FF0D 7FFF0D                                                 ORG     $FF0D, $7FFF0D  ;unprotect
00FF0D 7FFF0D FF                                              DB      $FF
00FF0F 7FFF0F                                                 ORG     $FF0F, $7FFF0F  ;unsecure
00FF0F 7FFF0F FE                                              DB      $FE
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;# Memory Locations
                                      ;Register space
00FF10 7FFF10 -> $0000                MMAP_REG_GLOBAL_START   EQU     $00_0000
00FF10 7FFF10 -> $0800                MMAP_REG_GLOBAL_END     EQU     $0_0800
00FF10 7FFF10 -> $0000                MMAP_REG_START          EQU     $0000
00FF10 7FFF10 -> $0000                MMAP_REG_START_LIN      EQU     MMAP_REG_GLOBAL_START
00FF10 7FFF10 -> $0800                MMAP_REG_END            EQU     $0800
00FF10 7FFF10 -> $0000                MMAP_REG_END_LIN        EQU     MMAP_REG_GLOBAL_START
                                      ;EEE RAM
00FF10 7FFF10 -> $13F000              MMAP_EERAM_GLOBAL_START EQU     $13_F000
00FF10 7FFF10 -> $140000              MMAP_EERAM_GLOBAL_END   EQU     $14_0000
00FF10 7FFF10 -> $0800                MMAP_EERAM_START        EQU     $0800
00FF10 7FFF10 -> $13F800              MMAP_EERAM_START_LIN    EQU     $13_F800
00FF10 7FFF10 -> $0C00                MMAP_EERAM_WIN_START    EQU     $0C00
00FF10 7FFF10 -> $1000                MMAP_EERAM_END          EQU     $1000
00FF10 7FFF10 -> $140000              MMAP_EERAM_END_LIN      EQU     MMAP_EERAM_GLOBAL_END
                                      ;RAM
00FF10 7FFF10 -> $F8000               MMAP_RAM_GLOBAL_START   EQU     $0F_8000        ;32K
00FF10 7FFF10 -> $100000              MMAP_RAM_GLOBAL_END     EQU     $10_0000
00FF10 7FFF10 -> $1000                MMAP_RAM_START          EQU     $1000
00FF10 7FFF10 -> $FD000               MMAP_RAM_START_LIN      EQU     $0F_D000
00FF10 7FFF10 -> $2000                MMAP_RAM_WIN_START      EQU     $2000
00FF10 7FFF10 -> $4000                MMAP_RAM_END            EQU     $4000
00FF10 7FFF10 -> $100000              MMAP_RAM_END_LIN        EQU     MMAP_RAM_GLOBAL_END
                                      ;Flash
00FF10 7FFF10 -> $788000              MMAP_FLASH_GLOBAL_START EQU     $78_8000        ;512K
00FF10 7FFF10 -> $800000              MMAP_FLASH_GLOBAL_END   EQU     $80_0000
00FF10 7FFF10 -> $4000                MMAP_FLASH_FD_START     EQU     $4000
00FF10 7FFF10 -> $7F4000              MMAP_FLASH_FD_START_LIN EQU     $7F_4000
00FF10 7FFF10 -> $8000                MMAP_FLASH_WIN_START    EQU     $8000
00FF10 7FFF10 -> $C000                MMAP_FLASH_FE_START     EQU     $C000
00FF10 7FFF10 -> $7FC000              MMAP_FLASH_FE_START_LIN EQU     $7F_C000
00FF10 7FFF10 -> $10000               MMAP_FLASH_END          EQU     $10000
00FF10 7FFF10 -> $800000              MMAP_FLASH_END_LIN      EQU     MMAP_FLASH_GLOBAL_END
                                      ;#Memory sizes
00FF10 7FFF10 -> $0800                MMAP_REG_SIZE           EQU     MMAP_REG_END-MMAP_REG_START
00FF10 7FFF10 -> $1000                MMAP_EERAM_SIZE         EQU     MMAP_EERAM_GLOBAL_END-MMAP_EERAM_GLOBAL_START
00FF10 7FFF10 -> $8000                MMAP_RAM_SIZE           EQU     MMAP_RAM_GLOBAL_END-MMAP_RAM_GLOBAL_START
00FF10 7FFF10 -> $78000               MMAP_FLASH_SIZE         EQU     MMAP_FLASH_GLOBAL_END-MMAP_FLASH_GLOBAL_START
                                      ;#MPU desccriptors
00FF10 7FFF10 -> $0000                MMAP_D_REG_LOADDR       EQU     MMAP_REG_GLOBAL_START   ;register space
00FF10 7FFF10 -> $07FF                MMAP_D_REG_HIADDR       EQU     MMAP_REG_GLOBAL_END-1
00FF10 7FFF10 -> $0040                MMAP_D_REG_PROTECT      EQU     NEX                     ;read and write
00FF10 7FFF10 -> $00C0                MMAP_D_REG_BYTE0        EQU            (MSTR0|MSTR1|(MMAP_D_REG_LOADDR>>19))&$FF
00FF10 7FFF10 -> $0000                MMAP_D_REG_BYTE1        EQU                        ((MMAP_D_REG_LOADDR>>11))&$FF
00FF10 7FFF10 -> $0000                MMAP_D_REG_BYTE2        EQU                        ((MMAP_D_REG_LOADDR>>03))&$FF
00FF10 7FFF10 -> $0040                MMAP_D_REG_BYTE3        EQU     (MMAP_D_REG_PROTECT|(MMAP_D_REG_HIADDR>>19))&$FF
00FF10 7FFF10 -> $0000                MMAP_D_REG_BYTE4        EQU                        ((MMAP_D_REG_HIADDR>>11))&$FF
00FF10 7FFF10 -> $00FF                MMAP_D_REG_BYTE5        EQU                        ((MMAP_D_REG_HIADDR>>03))&$FF
00FF10 7FFF10 -> $0800                MMAP_D_URAM_LOADDR      EQU     MMAP_REG_GLOBAL_END     ;unimplemented RAM space
00FF10 7FFF10 -> $F7FFF               MMAP_D_URAM_HIADDR      EQU     MMAP_RAM_GLOBAL_START-1
00FF10 7FFF10 -> $00C0                MMAP_D_URAM_PROTECT     EQU     WP|NEX                  ;read omly
00FF10 7FFF10 -> $00C0                MMAP_D_URAM_BYTE0       EQU             (MSTR0|MSTR1|(MMAP_D_URAM_LOADDR>>19))&$FF
00FF10 7FFF10 -> $0001                MMAP_D_URAM_BYTE1       EQU                         ((MMAP_D_URAM_LOADDR>>11))&$FF
00FF10 7FFF10 -> $0000                MMAP_D_URAM_BYTE2       EQU                         ((MMAP_D_URAM_LOADDR>>03))&$FF
00FF10 7FFF10 -> $00C1                MMAP_D_URAM_BYTE3       EQU     (MMAP_D_URAM_PROTECT|(MMAP_D_URAM_HIADDR>>19))&$FF
00FF10 7FFF10 -> $00EF                MMAP_D_URAM_BYTE4       EQU                         ((MMAP_D_URAM_HIADDR>>11))&$FF
00FF10 7FFF10 -> $00FF                MMAP_D_URAM_BYTE5       EQU                         ((MMAP_D_URAM_HIADDR>>03))&$FF
00FF10 7FFF10 -> $F8000               MMAP_D_RAM_LOADDR       EQU     MMAP_RAM_GLOBAL_START   ;RAM
00FF10 7FFF10 -> $FFFFF               MMAP_D_RAM_HIADDR       EQU     MMAP_RAM_GLOBAL_END-1
00FF10 7FFF10 -> $0040                MMAP_D_RAM_PROTECT      EQU     NEX                     ;no execute
00FF10 7FFF10 -> $00C1                MMAP_D_RAM_BYTE0        EQU             (MSTR0|MSTR1|(MMAP_D_RAM_LOADDR>>19))&$FF
00FF10 7FFF10 -> $00F0                MMAP_D_RAM_BYTE1        EQU                         ((MMAP_D_RAM_LOADDR>>11))&$FF
00FF10 7FFF10 -> $0000                MMAP_D_RAM_BYTE2        EQU                         ((MMAP_D_RAM_LOADDR>>03))&$FF
00FF10 7FFF10 -> $0041                MMAP_D_RAM_BYTE3        EQU      (MMAP_D_RAM_PROTECT|(MMAP_D_RAM_HIADDR>>19))&$FF
00FF10 7FFF10 -> $00FF                MMAP_D_RAM_BYTE4        EQU                         ((MMAP_D_RAM_HIADDR>>11))&$FF
00FF10 7FFF10 -> $00FF                MMAP_D_RAM_BYTE5        EQU                         ((MMAP_D_RAM_HIADDR>>03))&$FF
00FF10 7FFF10 -> $100000              MMAP_D_UEERAM_LOADDR    EQU     MMAP_RAM_GLOBAL_END     ;unimplemented EERAM space
00FF10 7FFF10 -> $13EFFF              MMAP_D_UEERAM_HIADDR    EQU     MMAP_EERAM_GLOBAL_START-1
00FF10 7FFF10 -> $00C0                MMAP_D_UEERAM_PROTECT   EQU     WP|NEX                  ;read only
00FF10 7FFF10 -> $00C2                MMAP_D_UEERAM_BYTE0     EQU             (MSTR0|MSTR1|(MMAP_D_UEERAM_LOADDR>>19))&$FF
00FF10 7FFF10 -> $0000                MMAP_D_UEERAM_BYTE1     EQU                         ((MMAP_D_UEERAM_LOADDR>>11))&$FF
00FF10 7FFF10 -> $0000                MMAP_D_UEERAM_BYTE2     EQU                         ((MMAP_D_UEERAM_LOADDR>>03))&$FF
00FF10 7FFF10 -> $00C2                MMAP_D_UEERAM_BYTE3     EQU   (MMAP_D_UEERAM_PROTECT|(MMAP_D_UEERAM_HIADDR>>19))&$FF
00FF10 7FFF10 -> $007D                MMAP_D_UEERAM_BYTE4     EQU                         ((MMAP_D_UEERAM_HIADDR>>11))&$FF
00FF10 7FFF10 -> $00FF                MMAP_D_UEERAM_BYTE5     EQU                         ((MMAP_D_UEERAM_HIADDR>>03))&$FF
00FF10 7FFF10 -> $13F000              MMAP_D_EERAM_LOADDR     EQU     MMAP_EERAM_GLOBAL_START ;EERAM
00FF10 7FFF10 -> $13FFFF              MMAP_D_EERAM_HIADDR     EQU     MMAP_EERAM_GLOBAL_END-1
00FF10 7FFF10 -> $0000                MMAP_D_EERAM_PROTECT    EQU     0                       ;read, write and execute
00FF10 7FFF10 -> $00C2                MMAP_D_EERAM_BYTE0      EQU             (MSTR0|MSTR1|(MMAP_D_EERAM_LOADDR>>19))&$FF
00FF10 7FFF10 -> $007E                MMAP_D_EERAM_BYTE1      EQU                         ((MMAP_D_EERAM_LOADDR>>11))&$FF
00FF10 7FFF10 -> $0000                MMAP_D_EERAM_BYTE2      EQU                         ((MMAP_D_EERAM_LOADDR>>03))&$FF
00FF10 7FFF10 -> $0002                MMAP_D_EERAM_BYTE3      EQU    (MMAP_D_EERAM_PROTECT|(MMAP_D_EERAM_HIADDR>>19))&$FF
00FF10 7FFF10 -> $007F                MMAP_D_EERAM_BYTE4      EQU                         ((MMAP_D_EERAM_HIADDR>>11))&$FF
00FF10 7FFF10 -> $00FF                MMAP_D_EERAM_BYTE5      EQU                         ((MMAP_D_EERAM_HIADDR>>03))&$FF
00FF10 7FFF10 -> $140000              MMAP_D_UFLASH_LOADDR    EQU     MMAP_EERAM_GLOBAL_END   ;unimplemented flash space
00FF10 7FFF10 -> $787FFF              MMAP_D_UFLASH_HIADDR    EQU     MMAP_FLASH_GLOBAL_START-1
00FF10 7FFF10 -> $00C0                MMAP_D_UFLASH_PROTECT   EQU     WP|NEX                  ;read only
00FF10 7FFF10 -> $00C2                MMAP_D_UFLASH_BYTE0     EQU             (MSTR0|MSTR1|(MMAP_D_UFLASH_LOADDR>>19))&$FF
00FF10 7FFF10 -> $0080                MMAP_D_UFLASH_BYTE1     EQU                         ((MMAP_D_UFLASH_LOADDR>>11))&$FF
00FF10 7FFF10 -> $0000                MMAP_D_UFLASH_BYTE2     EQU                         ((MMAP_D_UFLASH_LOADDR>>03))&$FF
00FF10 7FFF10 -> $00CF                MMAP_D_UFLASH_BYTE3     EQU   (MMAP_D_UFLASH_PROTECT|(MMAP_D_UFLASH_HIADDR>>19))&$FF
00FF10 7FFF10 -> $000F                MMAP_D_UFLASH_BYTE4     EQU                         ((MMAP_D_UFLASH_HIADDR>>11))&$FF
00FF10 7FFF10 -> $00FF                MMAP_D_UFLASH_BYTE5     EQU                         ((MMAP_D_UFLASH_HIADDR>>03))&$FF
00FF10 7FFF10 -> $788000              MMAP_D_FLASH_LOADDR     EQU     MMAP_FLASH_GLOBAL_START ;Flash
00FF10 7FFF10 -> $7FFFFF              MMAP_D_FLASH_HIADDR     EQU     MMAP_FLASH_GLOBAL_END-1
00FF10 7FFF10 -> $0080                MMAP_D_FLASH_PROTECT    EQU     WP                      ;read and execute
00FF10 7FFF10 -> $00CF                MMAP_D_FLASH_BYTE0      EQU             (MSTR0|MSTR1|(MMAP_D_FLASH_LOADDR>>19))&$FF
00FF10 7FFF10 -> $0010                MMAP_D_FLASH_BYTE1      EQU                         ((MMAP_D_FLASH_LOADDR>>11))&$FF
00FF10 7FFF10 -> $0000                MMAP_D_FLASH_BYTE2      EQU                         ((MMAP_D_FLASH_LOADDR>>03))&$FF
00FF10 7FFF10 -> $008F                MMAP_D_FLASH_BYTE3      EQU    (MMAP_D_FLASH_PROTECT|(MMAP_D_FLASH_HIADDR>>19))&$FF
00FF10 7FFF10 -> $00FF                MMAP_D_FLASH_BYTE4      EQU                         ((MMAP_D_FLASH_HIADDR>>11))&$FF
00FF10 7FFF10 -> $00FF                MMAP_D_FLASH_BYTE5      EQU                         ((MMAP_D_FLASH_HIADDR>>03))&$FF
                                      ;# Vector table
00FF10 7FFF10 -> $FF10                VECTAB_START            EQU     $FF10
00FF10 7FFF10 -> $7FFF10              VECTAB_START_LIN        EQU     $7FFF10
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001001 0FD001                                                 ORG     MMAP_VARS_START, MMAP_VARS_START_LIN
001001 0FD001 -> $1001                MMAP_VARS_END           EQU     *
001001 0FD001 -> $FD001               MMAP_VARS_END_LIN       EQU     @
                                      ;#endif
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
004457 7F4457                                                 ORG     MMAP_CODE_START, MMAP_CODE_START_LIN
                                      ;#Trigger a fatal error if a reset accurs
004457 7F4457 -> $4457                MMAP_ISR_MPU            EQU     *
004457 7F4457 MACRO                                           RESET_FATAL     MMAP_STR_MPU
                                      ;#Perform a reset due to a fatal error (immediate error code)                    (RESET_FATAL)
                                      ; args: 1: message pointer                                                       (RESET_FATAL)
                                      ;          System is reset and initialized                                       (RESET_FATAL)
004457 7F4457 CE 4B 78                                        LDX     #\1                                              (RESET_FATAL)
00445A 7F445A 06 49 F1                                        JOB     RESET_FATAL_X                                    (RESET_FATAL)
00445D 7F445D -> $445D                MMAP_CODE_END           EQU     *
00445D 7F445D -> $7F445D              MMAP_CODE_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
004B78 7F4B78                                                 ORG     MMAP_TABS_START, MMAP_TABS_START_LIN
004B78 7F4B78 4D 50 55 20 65 72 72 6F MMAP_STR_MPU            FCS     "MPU error"
              F2                      
004B81 7F4B81 -> $4B81                MMAP_TABS_END           EQU     *
004B81 7F4B81 -> $7F4B81              MMAP_TABS_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - SSTACK - Subroutine Stack Handler                                #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    Early versions of S12CBase framework used to have separate stacks        #
                                      ;#    interrupt handling and subroutine calls. These two stacks have noe been  #
                                      ;#    combined to one. However the API of the separate stacks has been kept:   #
                                      ;#    => The ISTACK module implements all functions required for interrupt     #
                                      ;#       handling.                                                             #
                                      ;#    => The SSTACK module implements all functions for subroutine calls and   #
                                      ;#       temporary RAM storage.                                                #
                                      ;#                                                                             #
                                      ;#    All of the stacking functions check the upper and lower boundaries of    #
                                      ;#    the stack. Fatal errors are thrown if the stacking space is exceeded.    #
                                      ;#                                                                             #
                                      ;#    The ISTACK module no longer implements an idle loop. Instead it offers   #
                                      ;#    the macro ISTACK_WAIT to build local idle loops for drivers which        #
                                      ;#    implement blocking I/O.                                                  #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 4, 2010                                                            #
                                      ;#      - Initial release                                                      #
                                      ;#    January 8, 2011                                                          #
                                      ;#      - Combined ISTACK and SSTACK                                           #
                                      ;#    June 29, 2012                                                            #
                                      ;#      - Added support for linear PC                                          #
                                      ;#      - Debug option "SSTACK_DEBUG"                                          #
                                      ;#      - Added new stacking macros                                            #
                                      ;#      - Switched from post-checks to pre-checks                              #
                                      ;#      - Added option to disable stack range checks "SSTACK_NO_CHECK"         #
                                      ;#    November 14, 2012                                                        #
                                      ;#      - Removed PSH/PUL macros                                               #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    SSTACK - Subroutine stack handler                                        #
                                      ;#    RESET  - Reset handler                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Stack Layout                                                                #
                                      ;###############################################################################
                                      ; ISTACK_VARS_START,   +-------------------+
                                      ;        ISTACK_TOP -> |                   |
                                      ;                      | ISTACK_FRAME_SIZE |
                                      ;                      |                   |
                                      ;                      +-------------------+
                                      ;        SSTACK_TOP -> |                   |
                                      ;                      |                   |
                                      ;                      |                   |
                                      ;                      |                   |
                                      ;                      |    SSTACK_DEPTH   |
                                      ;                      |                   |
                                      ;                      |                   |
                                      ;                      |                   |
                                      ;     SSTACK_BOTTOM,   |                   |
                                      ;     ISTACK_BOTTOM,   +-------------------+
                                      ;   ISTACK_VARS_END ->
                                      ;
                                      ;The SSTACK is checked once before every JOBSR and once before every RTS.
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Debug option for stack over/underflows
                                      ;SSTACK_DEBUG           EQU     1
                                      ;Disable stack range checks
                                      ;SSTACK_NO_CHECK        EQU     1
                                      ;Stack depth
004B81 7F4B81 -> $001B                SSTACK_DEPTH            EQU     27
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
004B81 7F4B81 -> $100A                SSTACK_TOP              EQU     ISTACK_TOP+ISTACK_FRAME_SIZE
004B81 7F4B81 -> $1025                SSTACK_BOTTOM           EQU     ISTACK_BOTTOM
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001001 0FD001                                                 ORG     SSTACK_VARS_START, SSTACK_VARS_START_LIN
001001 0FD001 -> $1001                SSTACK_VARS_END         EQU     *
001001 0FD001 -> $FD001               SSTACK_VARS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00445D 7F445D                                                 ORG     SSTACK_CODE_START, SSTACK_CODE_START_LIN
                                      ;#Handle stack overflows
00445D 7F445D -> $445D                SSTACK_OF               EQU     *
00445D 7F445D MACRO                                           RESET_FATAL     SSTACK_MSG_OF ;throw a fatal error
                                      ;#Perform a reset due to a fatal error (immediate error code)                    (RESET_FATAL)
                                      ; args: 1: message pointer                                                       (RESET_FATAL)
                                      ;          System is reset and initialized                                       (RESET_FATAL)
00445D 7F445D CE 4B 81                                        LDX     #\1                                              (RESET_FATAL)
004460 7F4460 06 49 F1                                        JOB     RESET_FATAL_X                                    (RESET_FATAL)
                                      ;#Handle stack underflows
004463 7F4463 -> $4463                SSTACK_UF               EQU     *
004463 7F4463 MACRO                                           RESET_FATAL     SSTACK_MSG_UF ;throw a fatal error
                                      ;#Perform a reset due to a fatal error (immediate error code)                    (RESET_FATAL)
                                      ; args: 1: message pointer                                                       (RESET_FATAL)
                                      ;          System is reset and initialized                                       (RESET_FATAL)
004463 7F4463 CE 4B 9C                                        LDX     #\1                                              (RESET_FATAL)
004466 7F4466 06 49 F1                                        JOB     RESET_FATAL_X                                    (RESET_FATAL)
004469 7F4469 -> $4469                SSTACK_CODE_END         EQU     *
004469 7F4469 -> $7F4469              SSTACK_CODE_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
004B81 7F4B81                                                 ORG     SSTACK_TABS_START, SSTACK_TABS_START_LIN
                                      ;#Error Messages
004B81 7F4B81 MACRO                   SSTACK_MSG_OF           RESET_MSG       "Subroutine stack overflow"
                                      ;#Error message (w/ Fletcher-16 checksum)                                        (RESET_MSG)
004B81 7F4B81 53 75 62 72 6F 75 74 69 RESET_MSG               FCS     \1                                               (RESET_MSG)
              6E 65 20 73 74 61 63 6B 
              20 6F 76 65 72 66 6C 6F 
              F7                      
004B9A 7F4B9A AC 7A                                           FLET16  RESET_MSG, *-1                                   (RESET_MSG)
004B9C 7F4B9C MACRO                   SSTACK_MSG_UF           RESET_MSG       "Subroutine stack underflow"
                                      ;#Error message (w/ Fletcher-16 checksum)                                        (RESET_MSG)
004B9C 7F4B9C 53 75 62 72 6F 75 74 69 RESET_MSG               FCS     \1                                               (RESET_MSG)
              6E 65 20 73 74 61 63 6B 
              20 75 6E 64 65 72 66 6C 
              6F F7                   
004BB6 7F4BB6 C9 DC                                           FLET16  RESET_MSG, *-1                                   (RESET_MSG)
004BB8 7F4BB8 -> $4BB8                SSTACK_TABS_END         EQU     *
004BB8 7F4BB8 -> $7F4BB8              SSTACK_TABS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - ISTACK - Interrupt Stack Handler                                 #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    Early versions of S12CBase framework used to have separate stacks        #
                                      ;#    interrupt handling and subroutine calls. These two stacks have noe been  #
                                      ;#    combined to one. However the API of the separate stacks has been kept:   #
                                      ;#    => The ISTACK module implements all functions required for interrupt     #
                                      ;#       handling.                                                             #
                                      ;#    => The SSTACK module implements all functions for subroutine calls and   #
                                      ;#       temporary RAM storage.                                                #
                                      ;#                                                                             #
                                      ;#    All of the stacking functions check the upper and lower boundaries of    #
                                      ;#    the stack. Fatal errors are thrown if the stacking space is exceeded.    #
                                      ;#                                                                             #
                                      ;#    The ISTACK module no longer implements an idle loop. Instead it offers   #
                                      ;#    the macro ISTACK_WAIT to build local idle loops for drivers which        #
                                      ;#    implement blocking I/O.                                                  #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 4, 2010                                                            #
                                      ;#      - Initial release                                                      #
                                      ;#    January 8, 2011                                                          #
                                      ;#      - Combined ISTACK and SSTACK                                           #
                                      ;#    June 29, 2012                                                            #
                                      ;#      - Added support for linear PC                                          #
                                      ;#      - Added debug option "ISTACK_DEBUG"                                    #
                                      ;#      - Added option to disable stack range checks "ISTACK_NO_CHECK"         #
                                      ;#      - Added support for multiple interrupt nesting levels                  #
                                      ;#    July 27, 2012                                                            #
                                      ;#      - Added macro "ISTACK_CALL_ISR"                                        #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    SSTACK - Subroutine stack handler                                        #
                                      ;#    RESET  - Reset handler                                                   #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Stack Layout                                                                #
                                      ;###############################################################################
                                      ; ISTACK_VARS_START,   +-------------------+
                                      ;        ISTACK_TOP -> |                   |
                                      ;                      | ISTACK_FRAME_SIZE |
                                      ;                      |                   |
                                      ;                      +-------------------+
                                      ;        SSTACK_TOP -> |                   |
                                      ;                      |                   |
                                      ;                      |                   |
                                      ;                      |                   |
                                      ;                      |    SSTACK_DEPTH   |
                                      ;                      |                   |
                                      ;                      |                   |
                                      ;                      |                   |
                                      ;     SSTACK_BOTTOM,   |                   |
                                      ;     ISTACK_BOTTOM,   +-------------------+
                                      ;   ISTACK_VARS_END ->
                                      ;
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Debug option for stack over/underflows
                                      ;ISTACK_DEBUG           EQU     1
                                      ;ISTACK_NO_WAI          EQU     1
                                      ;Disable stack range checks
                                      ;ISTACK_NO_CHECK        EQU     1
                                      ;Interrupt nesting levels
004BB8 7F4BB8 -> $0001                ISTACK_LEVELS           EQU     1               ;default is 1
                                      ;CPU
004BB8 7F4BB8 -> $0001                ISTACK_S12              EQU     1               ;default is S12
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
004BB8 7F4BB8 -> $0040                ISTACK_CCR              EQU     %0100_0000
004BB8 7F4BB8 -> $0009                ISTACK_FRAME_SIZE       EQU     9
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001001 0FD001                                                 ORG     ISTACK_VARS_START, ISTACK_VARS_START_LIN
001001 0FD001 -> $1001                ISTACK_TOP              EQU     *
001001 0FD001                                                 DS      ISTACK_FRAME_SIZE*ISTACK_LEVELS
00100A 0FD00A                                                 DS      SSTACK_DEPTH
001025 0FD025 -> $1025                ISTACK_BOTTOM           EQU     *
001025 0FD025 -> $1025                ISTACK_VARS_END         EQU     *
001025 0FD025 -> $FD025               ISTACK_VARS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
004469 7F4469                                                 ORG     ISTACK_CODE_START, ISTACK_CODE_START_LIN
                                      ;#Handle stack overflows
                                      ;#Handle stack underflows
004469 7F4469 -> $4469                ISTACK_CODE_END         EQU     *
004469 7F4469 -> $7F4469              ISTACK_CODE_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
004BB8 7F4BB8                                                 ORG     ISTACK_TABS_START, ISTACK_TABS_START_LIN
                                      ;#Error Messages
004BB8 7F4BB8 -> $4BB8                ISTACK_TABS_END         EQU     *
004BB8 7F4BB8 -> $7F4BB8              ISTACK_TABS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - CLOCK - Clock Driver                                             #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12(X) MCU   #
                                      ;#    families.                                                                #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    The module controls the PLL and all clock related features.              #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    REGDEF - Register Definitions                                            #
                                      ;#    ISTACK - Reset Handler                                                   #
                                      ;#    VECMAP - Vector Map                                                      #
                                      ;#    COP    - Watchdog Handler                                                #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 4, 2010                                                            #
                                      ;#      - Initial release                                                      #
                                      ;#    August 10, 2012                                                          #
                                      ;#      - Added support for linear PC                                          #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;#CRG or CPMU
                                      ;#Oscillator frequency
                                      ;#Bus frequency
                                      ;#Reference clock frequency
                                      ;#Reference clock divider
004BB8 7F4BB8 -> $0007                CLOCK_REFDV             EQU     (CLOCK_OSC_FREQ/CLOCK_REF_FREQ)-1
                                      ;#Reference clock multiplier
004BB8 7F4BB8 -> $0018                CLOCK_SYNR              EQU     (CLOCK_BUS_FREQ/CLOCK_REF_FREQ)-1
                                      ;#Overall PLL configuration
004BB8 7F4BB8 -> $D807                CLOCK_PLL_CONFIG        EQU     (CLOCK_VCOFRQ<<14)|(CLOCK_SYNR<<8)|(CLOCK_REFFRQ<<6)|CLOCK_REFDV
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001025 0FD025                                                 ORG     CLOCK_VARS_START, CLOCK_VARS_START_LIN
001025 0FD025 -> $1025                CLOCK_VARS_END          EQU     *
001025 0FD025 -> $FD025               CLOCK_VARS_END_LIN      EQU     @
                                      ;###############################################################################
                                      ;# COP configuration                                                           #
                                      ;###############################################################################
                                                              ;ORG    $FF0E
                                                              ;DW     $F8
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
004469 7F4469                                                 ORG     CLOCK_CODE_START, CLOCK_CODE_START_LIN
                                      ;#Service routine for the PLL lock interrupt
004469 7F4469 -> $4469                CLOCK_ISR               EQU     *
004469 7F4469 18 0B 83 00 39                                  MOVB    #(PLLSEL|RTIWAI|COPWAI), CLKSEL ;switch to PLL
00446E 7F446E 18 0B 10 00 37                                  MOVB    #LOCKIF, CRGFLG                 ;clear interrupt flag
004473 7F4473 MACRO                                           ISTACK_RTI
                                      ;#Return from interrupt                                                          (ISTACK_RTI)
                                      ; args:   none                                                                   (ISTACK_RTI)
                                      ; ISTACK: -9 (S12)/-10 (S12X)                                                    (ISTACK_RTI)
                                      ;         X, Y, and D are pulled from the interrupt stack                        (ISTACK_RTI)
                                                              ;Verify SP at the end of each ISR                        (ISTACK_RTI)
004473 7F4473 8F 10 01                                        CPS     #ISTACK_TOP                                      (ISTACK_RTI)
004476 7F4476 25 06                                           BLO     OF                                               (ISTACK_RTI)
004478 7F4478 8F 10 1C                                        CPS     #ISTACK_BOTTOM-ISTACK_FRAME_SIZE                 (ISTACK_RTI)
00447B 7F447B 22 02                                           BHI     UF                                               (ISTACK_RTI)
                                                              ;End ISR                                                 (ISTACK_RTI)
00447D 7F447D 0B                                              RTI                                                      (ISTACK_RTI)
00447E 7F447E 00                      OF                      BGND                                                     (ISTACK_RTI)
00447F 7F447F 00                      UF                      BGND                                                     (ISTACK_RTI)
004480 7F4480 -> $4480                CLOCK_CODE_END          EQU     *
004480 7F4480 -> $7F4480              CLOCK_CODE_END_LIN      EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
004BB8 7F4BB8                                                 ORG     CLOCK_TABS_START, CLOCK_TABS_START_LIN
004BB8 7F4BB8 -> $4BB8                CLOCK_TABS_END          EQU     *
004BB8 7F4BB8 -> $7F4BB8              CLOCK_TABS_END_LIN      EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - COP - Watchdog Handler                                           #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    The module handles the COP watchdog timer.                               #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 4, 2010                                                            #
                                      ;#      - Initial release                                                      #
                                      ;#    July 2, 2012                                                             #
                                      ;#      - Added support for linear PC                                          #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    ERROR  - Register Definitions                                            #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Debug option to disable the COP timeout
                                      ;COP_DEBUG              EQU     1
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;#Control register
004BB8 7F4BB8 -> $003C                COP_CTLREG              EQU     COPCTL
                                      ;#Restart register
004BB8 7F4BB8 -> $003F                COP_ARMREG              EQU     ARMCOP
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001025 0FD025                                                 ORG     COP_VARS_START, COP_VARS_START_LIN
001025 0FD025 -> $1025                COP_VARS_END            EQU     *
001025 0FD025 -> $FD025               COP_VARS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
004480 7F4480                                                 ORG     COP_CODE_START, COP_CODE_START_LIN
004480 7F4480 -> $4480                COP_CODE_END            EQU     *
004480 7F4480 -> $7F4480              COP_CODE_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
004BB8 7F4BB8                                                 ORG     COP_TABS_START, COP_TABS_START_LIN
004BB8 7F4BB8 -> $4BB8                COP_TABS_END            EQU     *
004BB8 7F4BB8 -> $7F4BB8              COP_TABS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - TIM - Timer Driver                                               #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2012 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    The module controls the timer. The eight timer channes are used as       #
                                      ;#    follows:                                                                 #
                                      ;#      IC0:     SCI baud rate detection (capture posedges on RX pin)          #
                                      ;#      IC1:     SCI baud rate detection (capture negedges on RX pin)          #
                                      ;#      OC2:     SCI baud rate detection (timeout)                             #
                                      ;#      OC3:     SCI (timeout)                                                 #
                                      ;#      OC4:     delay driver                                                  #
                                      ;#      OC5:     unasigned                                                     #
                                      ;#      OC6:     unasigned                                                     #
                                      ;#      OC7:     unasigned                                                     #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 4, 2010                                                            #
                                      ;#      - Initial release                                                      #
                                      ;#    February 22, 2012                                                        #
                                      ;#      - Back-ported LFBDMPGMR updates                                        #
                                      ;#    November 14, 2012                                                        #
                                      ;#      - Total redo                                                           #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    REGDEF - Register Definitions                                            #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Clock divider
                                      ;-------------
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;#SCI channels defaults
004BB8 7F4BB8 -> $000F                TIM_SCI                 EQU     $0F     ;all channels
004BB8 7F4BB8 -> $0001                TIM_SCIBDPE             EQU     $01     ;posedge/toggle detection
004BB8 7F4BB8 -> $0002                TIM_SCIBDNE             EQU     $02     ;negedge detection
004BB8 7F4BB8 -> $0004                TIM_SCIBDTO             EQU     $04     ;Baud rate detection
004BB8 7F4BB8 -> $0008                TIM_SCITO               EQU     $08     ;XON/XOFF reminders
                                      ;#BDM channel defaults
004BB8 7F4BB8 -> $00E0                TIM_BDM                 EQU     $E0     ;all channels
004BB8 7F4BB8 -> $0020                TIM_BDMPE               EQU     $20     ;posedge/toggle detection
004BB8 7F4BB8 -> $0040                TIM_BDMNE               EQU     $40     ;negedge detection
004BB8 7F4BB8 -> $0080                TIM_BDMTO               EQU     $80     ;SCI bug workaround
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001025 0FD025                                                 ORG     TIM_VARS_START, TIM_VARS_START_LIN
001025 0FD025 -> $1025                TIM_VARS_END            EQU     *
001025 0FD025 -> $FD025               TIM_VARS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
004480 7F4480                                                 ORG     TIM_CODE_START, TIM_CODE_START_LIN
004480 7F4480 -> $4480                TIM_CODE_END            EQU     *
004480 7F4480 -> $7F4480              TIM_CODE_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
004BB8 7F4BB8                                                 ORG     TIM_TABS_START, TIM_TABS_START_LIN
004BB8 7F4BB8 -> $4BB8                TIM_TABS_END            EQU     *
004BB8 7F4BB8 -> $7F4BB8              TIM_TABS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - SCI - Serial Communication Interface Driver                      #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2015 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This is the low level driver for the SCI module.                         #
                                      ;#                                                                             #
                                      ;#    This module provides the following functions to the main program:        #
                                      ;#    SCI_TX_NB     - This function sends a byte over the serial interface. In #
                                      ;#                    case of a transmit buffer overflow, it will return       #
                                      ;#                    immediately with an error status.                        #
                                      ;#    SCI_TX_BL     - This function sends a byte over the serial interface. It #
                                      ;#                    will block the program flow until the data can be handed #
                                      ;#                    over to the transmit queue.                              #
                                      ;#    SCI_TX_CHECK  - Checks if a transmission is ongoing.                     #
                                      ;#    SCI_TX_WAIT   - This function blocksthe program execution until all      #
                                      ;#                    pending data is sent.                                    #
                                      ;#    SCI_RX_NB     - This function reads a byte (and associated error flags)  #
                                      ;#                    It will return an error status if no read data is        #
                                      ;#                    available.                                               #
                                      ;#    SCI_RX_BL     - This function reads a byte (and associated error flags)  #
                                      ;#                    from the serial interface. It will block the             #
                                      ;#                    program flow until data is available.                    #
                                      ;#    SCI_RX_PEEK   - This function reads the oldest buffer entry and the      #
                                      ;#                    number receive buffer entries, without modifying the     #
                                      ;#                    buffer.                                                  #
                                      ;#    SCI_BAUD      - This function allows the application to set the SCI's    #
                                      ;#                    baud rate manually.                                      #
                                      ;#                                                                             #
                                      ;#    For convinience, all of these functions may also be called as macro.     #
                                      ;#                                                                             #
                                      ;#    Five error condition can occur when receiving data from the serial       #
                                      ;#    interface:                                                               #
                                      ;#    SWOR - Software Overrun (in RX Queue)                                    #
                                      ;#         The main program has failed to free up the RX queeue in time.       #
                                      ;#         The received data is considerd to be valid.                         #
                                      ;#         Baud rate detection will not be triggered.                          #
                                      ;#         This condition will be reported to the application.                 #
                                      ;#                                                                             #
                                      ;#    OR - Overrun (in SCI hardware)                                           #
                                      ;#         The software has failed to transfer RX data to the RX queue in      #
                                      ;#         time.                                                               #
                                      ;#         The received data is considerd to be valid.                         #
                                      ;#         Baud rate detection will not be triggered.                          #
                                      ;#         This condition will be reported to the application.                 #
                                      ;#                                                                             #
                                      ;#    NF - Noise (Flag)                                                        #
                                      ;#         Noise has been detected on the RX line.                             #
                                      ;#         The received data is still considerd to be valid.                   #
                                      ;#         Baud rate detection will be triggered.                              #
                                      ;#         This condition will not be reported to the application.             #
                                      ;#                                                                             #
                                      ;#    FE - Framing Error                                                       #
                                      ;#         An invalid data frame (stop bit) has been received                  #
                                      ;#         The received data is considerd to be invalid.                       #
                                      ;#         If a sequence of invalid data is received, only one entry will be   #
                                      ;#         stored in the RX queue.                                             #
                                      ;#         Baud rate detection will be triggered.                              #
                                      ;#         This condition will be reported to the application.                 #
                                      ;#                                                                             #
                                      ;#    PE - Parity Error (only occurs if parity is enabled)                     #
                                      ;#         An invalid parity bit has been received                             #
                                      ;#         The received data is considerd to be invalid.                       #
                                      ;#         If a sequence of invalid data is received, only one entry will be   #
                                      ;#         stored in the RX queue.                                             #
                                      ;#         Baud rate detection will be triggered.                              #
                                      ;#         This condition will be reported to the application.                 #
                                      ;#                                                                             #
                                      ;#    The SCI module is capable of detecting the baud rate of received data.   #
                                      ;#    Whenever a framing error, a parity error or noise is detected, the baud  #
                                      ;#    rate detection is activated and the module begins measuring all high and #
                                      ;#    low pulses on the RX line. Assuming that the sender uses one of the      #
                                      ;#    following baud rates:     4800                                           #
                                      ;#                              7200                                           #
                                      ;#                              9600                                           #
                                      ;#                             14400                                           #
                                      ;#                             19200                                           #
                                      ;#                             28800                                           #
                                      ;#                             38400                                           #
                                      ;#                             57600                                           #
                                      ;#    ...it finds the senders baud rate by elimination. When the baud rate has #
                                      ;#    been detected (all but one of the valid baud rates eliminated) and 15    #
                                      ;#    consecutive low or high ulses match this baud rate, then the SCI will be #
                                      ;#    set to the new baud rate.                                                #
                                      ;#    While the baud rate detection is active, a communication error will be   #
                                      ;#    signaled over the LED.                                                   #
                                      ;#                                                                             #
                                      ;#    The SCI driver supports hardware flow control (RTS/CTS) to allow 8-bit   #
                                      ;#    data transmissions. The flow control signals are implemented to using    #
                                      ;#    the following GPIO pins:  RTS input:  PM0                                #
                                      ;#                              CTS output: PM1                                #
                                      ;#    The remaining PM pins are unused.                                        #
                                      ;###############################################################################
                                      ;# Flow Control:                                                               #
                                      ;# RTS/CTS:                                                                    #
                                      ;#          Only transmit if RTS is set                                        #
                                      ;#          Forbid incoming data -> clear CTS                                  #
                                      ;#          Allow incoming data -> set CTS                                     #
                                      ;# XON/XOFF:                                                                   #
                                      ;#          Remember the last received XON/XOFF                                #
                                      ;#          Only transmit if XON was received last                             #
                                      ;#          Forbid incoming data                                               #
                                      ;#                                                                             #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    REGDEF - Register definitions                                            #
                                      ;#    ISTACK - Interrupt Stack Handler                                         #
                                      ;#    SSTACK - Subroutine Stack Handler                                        #
                                      ;#    CLOCK  - Clock driver                                                    #
                                      ;#    GPIO   - GPIO driver                                                     #
                                      ;#    TIM    - Timer driver                                                    #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 4, 2010                                                            #
                                      ;#      - Initial release                                                      #
                                      ;#    April 22, 2010                                                           #
                                      ;#      - added functions SCI_TBE and SCI_BAUD                                 #
                                      ;#    June 6, 2010                                                             #
                                      ;#      - Changed selection of detectable baud rates                           #
                                      ;#      - Stop baud rate detection when receiving a corret character           #
                                      ;#      - Stop baud rate detection when manually setting the baud rate         #
                                      ;#    January 2, 2012                                                          #
                                      ;#      - Mini-BDM-Pod uses XON/XOFF flow control instead of RTS/CTS           #
                                      ;#    November 14, 2012                                                        #
                                      ;#      - Total redo                                                           #
                                      ;#    September 25, 2013                                                       #
                                      ;#      - Fixed reception of C0 characters                                     #
                                      ;#    February 5, 2014                                                         #
                                      ;#      - Made SCI_TXBUF_SIZE configurable                                     #
                                      ;#    October 1, 2014                                                          #
                                      ;#      - Added dynamic enable/disable feature                                 #
                                      ;#    January 14, 2015                                                         #
                                      ;#      - Changed configuration options                                        #
                                      ;#      - Changed control character handling                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Baud rate detection                                                         #
                                      ;###############################################################################
                                      ;typ. bus speed:     25 MHz
                                      ;max. baud rate:  153600 baud   ==>  162 bus cycles per bit
                                      ;min. baud rate:    4800 baud   ==> 5208 bus cycles per bit (46875 per frame)
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;General settings
                                      ;----------------
                                      ;Bus frequency
                                      ;Invert RXD/TXD
004BB8 7F4BB8 -> $0001                SCI_RXTX_ACTLO          EQU     1               ;default is active low RXD/TXD
                                      ;Flow control
                                      ;------------
                                      ;RTS/CTS or XON/XOFF
                                      ;XON/XOFF coniguration
                                      ;XON/XOFF reminder intervall
004BB8 7F4BB8 -> $1DCD                SCI_XONXOFF_REMINDER    EQU     (10*CLOCK_BUS_FREQ)/65536
                                      ;RTS/CTS coniguration
                                      ;MC9S12DP256 SCI IRQ workaround (MUCts00510)
                                      ;-------------------------------------------
                                      ;###############################################################################
                                      ;# The will SCI only request interrupts if an odd number of interrupt flags is #
                                      ;# This will cause disabled and spourious interrupts.                          #
                                      ;# -> The RX/TX ISR must be periodically triggered by a timer interrupt.       #
                                      ;#    The timer period should be about as long as two SCI frames:              #
                                      ;#    RT cycle = SCIBD * bus cycles                                            #
                                      ;#    bit time = 16 * RT cycles = 16 * SCIBD * bus cycles                      #
                                      ;#    frame time = 10 * bit times = 160 RT cycles = 160 * SCIBD * bus cycles   #
                                      ;#    2 * frame times = 320 * SCIBD * bus cycles = 0x140 * SCIBD * bus cycles  #
                                      ;#    Simplification:                                                          #
                                      ;#    TIM period = 0x100 * SCIBD * bus cycles                                  #
                                      ;###############################################################################
                                      ;Enable IRQ workaround
004BB8 7F4BB8 -> $0001                SCI_IRQ_WORKAROUND_OFF  EQU     1               ;IRQ workaround disabled by default
                                      ;Delay counter
                                      ;-------------
                                      ;SCI_DLY_OC             EQU     $3              ;default is OC3
                                      ;Baud rate detection
                                      ;-------------------
                                      ;Enable (SCI_BD_ON or SCI_BD_OFF)
                                      ;Baud rate detection configuration
                                      ;Blocking subroutines
                                      ;--------------------
                                      ;Enable blocking subroutines
                                      ;TX buffer size (minimize to 1 for debugging)
                                      ;--------------------------------------------
                                      ;SCI_TXBUF_SIZE         EQU       1             ;minimum size of the transmit buffer
                                      ;C0 character handling
                                      ;---------------------
                                      ;Detect BREAK character -> define macro SCI_BREAK_ACTION
                                      ;#mac SCI_BREAK_ACTION, 0
                                      ;       ...code to be executed on BREAK condition (inside ISR)
                                      ;#emac
                                      ;Detect SUSPEND character -> define macro SCI_SUSPEND_ACTION
                                      ;#mac SCI_SUSPEND_ACTION, 0
                                      ;       ...code to be executed on SUSPEND condition (inside ISR)
                                      ;#emac
                                      ;Communication error signaling
                                      ;-----------------------------
                                      ;Signal RX errors -> define macros SCI_ERRSIG_START and SCI_ERRSIG_STOP
                                      ;#mac SCI_ERRSIG_START, 0
                                      ;       ...code to start error signaling (inside ISR)
                                      ;#emac
                                      ;#mac SCI_ERRSIG_STOP, 0                        ;X, Y, and D are preserved
                                      ;       ...code to stop error signaling (inside ISR)
                                      ;#emac
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;#Baud rate devider settings
                                      ; SCIBD = 25MHz / (16*baud rate)
004BB8 7F4BB8 -> $0A2C                SCI_1200                EQU     (CLOCK_BUS_FREQ/(16*  1200))+(((2*CLOCK_BUS_FREQ)/(16*  1200))&1)
004BB8 7F4BB8 -> $0516                SCI_2400                EQU     (CLOCK_BUS_FREQ/(16*  2400))+(((2*CLOCK_BUS_FREQ)/(16*  2400))&1)
004BB8 7F4BB8 -> $028B                SCI_4800                EQU     (CLOCK_BUS_FREQ/(16*  4800))+(((2*CLOCK_BUS_FREQ)/(16*  4800))&1)
004BB8 7F4BB8 -> $01B2                SCI_7200                EQU     (CLOCK_BUS_FREQ/(16*  7200))+(((2*CLOCK_BUS_FREQ)/(16*  7200))&1)
004BB8 7F4BB8 -> $0146                SCI_9600                EQU     (CLOCK_BUS_FREQ/(16*  9600))+(((2*CLOCK_BUS_FREQ)/(16*  9600))&1)
004BB8 7F4BB8 -> $00D9                SCI_14400               EQU     (CLOCK_BUS_FREQ/(16* 14400))+(((2*CLOCK_BUS_FREQ)/(16* 14400))&1)
004BB8 7F4BB8 -> $00A3                SCI_19200               EQU     (CLOCK_BUS_FREQ/(16* 19200))+(((2*CLOCK_BUS_FREQ)/(16* 19200))&1)
004BB8 7F4BB8 -> $006D                SCI_28800               EQU     (CLOCK_BUS_FREQ/(16* 28800))+(((2*CLOCK_BUS_FREQ)/(16* 28800))&1)
004BB8 7F4BB8 -> $0051                SCI_38400               EQU     (CLOCK_BUS_FREQ/(16* 38400))+(((2*CLOCK_BUS_FREQ)/(16* 38400))&1)
004BB8 7F4BB8 -> $0036                SCI_57600               EQU     (CLOCK_BUS_FREQ/(16* 57600))+(((2*CLOCK_BUS_FREQ)/(16* 57600))&1)
004BB8 7F4BB8 -> $0029                SCI_76800               EQU     (CLOCK_BUS_FREQ/(16* 76800))+(((2*CLOCK_BUS_FREQ)/(16* 76800))&1)
004BB8 7F4BB8 -> $001B                SCI_115200              EQU     (CLOCK_BUS_FREQ/(16*115200))+(((2*CLOCK_BUS_FREQ)/(16*115200))&1)
004BB8 7F4BB8 -> $0014                SCI_153600              EQU     (CLOCK_BUS_FREQ/(16*153600))+(((2*CLOCK_BUS_FREQ)/(16*153600))&1)
004BB8 7F4BB8 -> $0146                SCI_BDEF                EQU     SCI_9600                        ;default baud rate
004BB8 7F4BB8 -> $0CCC                SCI_BMUL                EQU     $FFFF/SCI_153600                ;Multiplicator for storing the baud rate
                                      ;#Frame format
004BB8 7F4BB8 -> $0004                SCI_8N1                 EQU       ILT           ;8N1
004BB8 7F4BB8 -> $0006                SCI_8E1                 EQU       ILT|PE        ;8E1
004BB8 7F4BB8 -> $0007                SCI_8O1                 EQU       ILT|PE|PT     ;8O1
004BB8 7F4BB8 -> $0014                SCI_8N2                 EQU     M|ILT           ;8N2 TX8=1
                                      ;#C0 characters
004BB8 7F4BB8 -> $00E0                SCI_C0_MASK             EQU     $E0             ;mask for C0 character range
004BB8 7F4BB8 -> $0003                SCI_BREAK               EQU     $03             ;ctrl-c (terminate program execution)
004BB8 7F4BB8 -> $0010                SCI_DLE                 EQU     $10             ;data link escape (treat next byte as data)
004BB8 7F4BB8 -> $0011                SCI_XON                 EQU     $11             ;unblock transmission
004BB8 7F4BB8 -> $0013                SCI_XOFF                EQU     $13             ;block transmission
004BB8 7F4BB8 -> $001A                SCI_SUSPEND             EQU     $1A             ;ctrl-z (suspend program execution)
                                      ;#Buffer sizes
004BB8 7F4BB8 -> $0020                SCI_RXBUF_SIZE          EQU      16*2           ;size of the receive buffer (8 error:data entries)
004BB8 7F4BB8 -> $0008                SCI_TXBUF_SIZE          EQU       8             ;size of the transmit buffer
004BB8 7F4BB8 -> $001F                SCI_RXBUF_MASK          EQU     $1F             ;mask for rolling over the RX buffer
                                      ;SCI_TXBUF_MASK         EQU     $07             ;mask for rolling over the TX buffer
004BB8 7F4BB8 -> $0001                SCI_TXBUF_MASK          EQU     $01             ;mask for rolling over the TX buffer
                                      ;#Hardware handshake borders
004BB8 7F4BB8 -> $0010                SCI_RX_FULL_LEVEL       EQU      8*2            ;RX buffer threshold to block transmissions
004BB8 7F4BB8 -> $0004                SCI_RX_EMPTY_LEVEL      EQU      2*2            ;RX buffer threshold to unblock transmissions
                                      ;#Flag definitions
004BB8 7F4BB8 -> $0080                SCI_FLG_SEND_XONXOFF    EQU     $80             ;send XON/XOFF symbol asap
004BB8 7F4BB8 -> $0040                SCI_FLG_POLL_RTS        EQU     $40             ;poll RTS input
004BB8 7F4BB8 -> $0010                SCI_FLG_SWOR            EQU     $10             ;software buffer overrun (RX buffer)
004BB8 7F4BB8 -> $0008                SCI_FLG_TX_BLOCKED      EQU     $08             ;don't transmit (XOFF received)
004BB8 7F4BB8 -> $0004                SCI_FLG_RX_ESC          EQU     $04             ;character is to be escaped
004BB8 7F4BB8 -> $0002                SCI_FLG_TX_ESC          EQU     $02             ;character is to be escaped
                                      ;#Flow control
004BB8 7F4BB8 -> $0001                SCI_FC_EN               EQU     1
                                      ;#Baud rate detection
                                      ;#Timer setup for baud rate detection
004BB8 7F4BB8 -> $0000                SCI_BD_TIOS_VAL         EQU     0
004BB8 7F4BB8 -> $0000                SCI_BD_TCS              EQU     0
                                      ;#Timer setup for the delay counter
004BB8 7F4BB8 -> $0001                SCI_DLY_EN              EQU     1               ;enable delay counter for XON/XOFF reminders
                                      ;#Delay counter
004BB8 7F4BB8 -> $0003                SCI_DLY_OC              EQU     $3              ;default is OC3
004BB8 7F4BB8 -> $0001                SCI_SET_TIOS            EQU     1
004BB8 7F4BB8 -> $0008                SCI_DLY_TIOS_VAL        EQU     (1<<SCI_DLY_OC)
004BB8 7F4BB8 -> $0008                SCI_DLY_TCS             EQU     (1<<SCI_DLY_OC)
                                      ;#RX error detection
004BB8 7F4BB8 -> $0001                SCI_CHECK_RX_ERR        EQU     1               ;check for RX errors to ignore faulty XON/XOFF symbols
                                      ;#C0 character handling
004BB8 7F4BB8 -> $0001                SCI_DETECT_C0           EQU     1               ;detect XON/XOFF symbols
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001025 0FD025                                                 ORG     SCI_VARS_START, SCI_VARS_START_LIN
001025 0FD025 -> $1025                SCI_AUTO_LOC1           EQU     *               ;1st auto-place location
001025 0FD025                                                 ALIGN   1
                                      ;#Receive buffer
001026 0FD026                         SCI_RXBUF               DS      SCI_RXBUF_SIZE
001046 0FD046                         SCI_RXBUF_IN            DS      1               ;points to the next free space
001047 0FD047                         SCI_RXBUF_OUT           DS      1               ;points to the oldest entry
                                      ;#Transmit buffer
001048 0FD048                         SCI_TXBUF               DS      SCI_TXBUF_SIZE
001050 0FD050                         SCI_TXBUF_IN            DS      1               ;points to the next free space
001051 0FD051                         SCI_TXBUF_OUT           DS      1               ;points to the oldest entry
                                      ;#Baud rate (reset proof)
001052 0FD052                         SCI_BVAL                DS      2               ;value of the SCIBD register *SCI_BMUL
                                      ;#XON/XOFF reminder count
001054 0FD054                         SCI_XONXOFF_REMCNT      DS      2               ;counter for XON/XOFF reminder
                                      ;#BD log buffer
001056 0FD056 -> $1056                SCI_AUTO_LOC2           EQU     *               ;2nd auto-place location
                                      ;#Flags
001056 0FD056 -> $1025                SCI_FLGS                EQU     ((SCI_AUTO_LOC1&1)*SCI_AUTO_LOC1)+(((~SCI_AUTO_LOC1)&1)*SCI_AUTO_LOC2)
001056 0FD056                                                 UNALIGN ((~SCI_AUTO_LOC1)&1)
                                      ;#Baud rate detection registers
001056 0FD056 -> $1056                SCI_VARS_END            EQU     *
001056 0FD056 -> $FD056               SCI_VARS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
004480 7F4480                                                 ORG     SCI_CODE_START, SCI_CODE_START_LIN
                                      ;#Transmit one byte - non-blocking
                                      ; args:   B: data to be send
                                      ; result: C-flag: set if successful
                                      ; SSTACK: 5 bytes
                                      ;         X, Y, and D are preserved
004480 7F4480 -> $4480                SCI_TX_NB               EQU     *
                                                              ;Check if SCI transmitter is enabled
004480 7F4480 4F CB 08 26                                     BRCLR   SCICR2, #TE, SCI_TX_NB_1                ;do nothing and flag success
                                                              ;Save registers (data in B)
004484 7F4484 35                                              PSHY
004485 7F4485 36                                              PSHA
                                                              ;Write data into the TX buffer (data in B)
004486 7F4486 CD 10 48                                        LDY     #SCI_TXBUF
004489 7F4489 B6 10 50                                        LDAA    SCI_TXBUF_IN
00448C 7F448C 6B EC                                           STAB    A,Y
                                                              ;Check if there is room for this entry (data in B, in-index in A, TX buffer pointer in Y)
00448E 7F448E 42                                              INCA                                            ;increment index
00448F 7F448F 84 01                                           ANDA    #SCI_TXBUF_MASK
004491 7F4491 B1 10 51                                        CMPA    SCI_TXBUF_OUT
004494 7F4494 27 17                                           BEQ     SCI_TX_NB_2                             ;buffer is full
                                                              ;Update buffer
004496 7F4496 7A 10 50                                        STAA    SCI_TXBUF_IN
                                                              ;Enable interrupts
004499 7F4499 18 0B AC 00 CB                                  MOVB    #(TXIE|RIE|TE|RE), SCICR2                               ;enable TX interrupt
                                                              ;Restore registers
00449E 7F449E MACRO                                           SSTACK_PREPULL  5
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00449E 7F449E MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00449E 7F449E 8F 10 0A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0044A1 7F44A1 25 BA                                           BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0044A3 7F44A3 8F 10 20                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0044A6 7F44A6 22 BB                                           BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0044A8 7F44A8 -> $4463                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0044A8 7F44A8 -> $445D                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0044A8 7F44A8 32                                              PULA
0044A9 7F44A9 31                                              PULY
                                                              ;Signal success
0044AA 7F44AA 14 01                   SCI_TX_NB_1             SEC
                                                              ;Done
0044AC 7F44AC 3D                                              RTS
                                                              ;Buffer is full
                                                              ;Restore registers
0044AD 7F44AD MACRO                   SCI_TX_NB_2             SSTACK_PREPULL  5
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
0044AD 7F44AD MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0044AD 7F44AD 8F 10 0A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0044B0 7F44B0 25 AB                                           BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0044B2 7F44B2 8F 10 20                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0044B5 7F44B5 22 AC                                           BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0044B7 7F44B7 -> $4463                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0044B7 7F44B7 -> $445D                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0044B7 7F44B7 32                                              PULA
0044B8 7F44B8 31                                              PULY
                                                              ;Signal failure
0044B9 7F44B9 10 FE                                           CLC
                                                              ;Done
0044BB 7F44BB 3D                                              RTS
                                      ;#Transmit one byte - blocking
                                      ; args:   B: data to be send
                                      ; result: none
                                      ; SSTACK: 7 bytes
                                      ;         X, Y, and D are preserved
0044BC 7F44BC -> $44BC                SCI_TX_BL               EQU     *
0044BC 7F44BC MACRO                                           SCI_MAKE_BL     SCI_TX_NB, 5
                                      ;# Macros for internal use                                                       (SCI_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (SCI_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (SCI_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (SCI_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (SCI_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (SCI_MAKE_BL)
                                                              ;Disable interrupts                                      (SCI_MAKE_BL)
0044BC 7F44BC 14 10                   LOOP                    SEI                                                      (SCI_MAKE_BL)
                                                              ;Call non-blocking function                              (SCI_MAKE_BL)
0044BE 7F44BE                                                 //SSTACK_PREPUSH        \2                               (SCI_MAKE_BL)
0044BE 7F44BE 07 C0                                           JOBSR   \1                                               (SCI_MAKE_BL)
0044C0 7F44C0 24 0D                                           BCC     WAIT            ;function unsuccessful           (SCI_MAKE_BL)
                                                              ;Enable interrupts                                       (SCI_MAKE_BL)
0044C2 7F44C2 10 EF                                           CLI                                                      (SCI_MAKE_BL)
                                                              ;Done                                                    (SCI_MAKE_BL)
0044C4 7F44C4 MACRO                                           SSTACK_PREPULL  2                                        (SCI_MAKE_BL)
                                      ;#Check stack before pull operation                                              (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPULL)
0044C4 7F44C4 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0044C4 7F44C4 8F 10 0A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0044C7 7F44C7 25 94                                           BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0044C9 7F44C9 8F 10 23                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0044CC 7F44CC 22 95                                           BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0044CE 7F44CE -> $4463                UF                      EQU     SSTACK_UF                                        (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0044CE 7F44CE -> $445D                OF                      EQU     SSTACK_OF                                        (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0044CE 7F44CE 3D                                              RTS                                                      (SCI_MAKE_BL)
                                                              ;Wait for next interrupt                                 (SCI_MAKE_BL)
0044CF 7F44CF MACRO                   WAIT                    ISTACK_WAIT                                              (SCI_MAKE_BL)
                                      ;#Wait until any interrupt has been serviced                                     (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; ISTACK: none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Verify SP before runnung ISRs                           (SCI_MAKE_BL/ISTACK_WAIT)
0044CF 7F44CF 8F 10 0A                                        CPS     #ISTACK_TOP+ISTACK_FRAME_SIZE                    (SCI_MAKE_BL/ISTACK_WAIT)
0044D2 7F44D2 25 13                                           BLO     OF ;ISTACK_OF                                    (SCI_MAKE_BL/ISTACK_WAIT)
0044D4 7F44D4 8F 10 25                                        CPS     #ISTACK_BOTTOM                                   (SCI_MAKE_BL/ISTACK_WAIT)
0044D7 7F44D7 22 0F                                           BHI     UF ;ISTACK_UF                                    (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (SCI_MAKE_BL/ISTACK_WAIT)
0044D9 7F44D9 MACRO                                           COP_SERVICE                     ;already taken care of by WAI (SCI_MAKE_BL/ISTACK_WAIT)
                                                                                                              ; no window mode                        (~WCOP) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP and RTI stop when BDM is active   (RSBCK) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP is disabled       (~CR2|~CR1|~CR0) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                      ;#Service COP                                                                    (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
0044D9 7F44D9 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
0044DE 7F44DE 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
0044E3 7F44E3 10 EF                                           CLI                                                      (SCI_MAKE_BL/ISTACK_WAIT)
0044E5 7F44E5 20 02                                           JOB     DONE                                             (SCI_MAKE_BL/ISTACK_WAIT)
0044E7 7F44E7 00                      OF                      BGND                                                     (SCI_MAKE_BL/ISTACK_WAIT)
0044E8 7F44E8 00                      UF                      BGND                                                     (SCI_MAKE_BL/ISTACK_WAIT)
0044E9 7F44E9 -> $44E9                DONE                    EQU     *                                                (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Try again                                               (SCI_MAKE_BL)
0044E9 7F44E9 MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_MAKE_BL)
                                      ;#Check stack before push operation                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
0044E9 7F44E9 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0044E9 7F44E9 8F 10 0F                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0044EC 7F44EC 18 25 FF 6D                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0044F0 7F44F0 8F 10 25                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0044F3 7F44F3 18 22 FF 6C                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0044F7 7F44F7 -> $4463                UF                      EQU     SSTACK_UF                                        (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0044F7 7F44F7 -> $445D                OF                      EQU     SSTACK_OF                                        (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0044F7 7F44F7 20 C3                                           JOB     LOOP                                             (SCI_MAKE_BL)
                                      ;#Check if a transmission is ongoing
                                      ; args:   none
                                      ; result:  C-flag: set if all transmissions are complete
                                      ; SSTACK: 4 bytes
                                      ;         X, Y, and D are preserved
0044F9 7F44F9 -> $44F9                SCI_TX_DONE_NB          EQU     *
                                                              ;Check if SCI transmitter is enabled
0044F9 7F44F9 4F CB 08 2D                                     BRCLR   SCICR2, #TE, SCI_TX_DONE_NB_3           ;do nothing and flag success
                                                              ;Save registers
0044FD 7F44FD 3B                                              PSHD
                                                              ;Check TX queue
0044FE 7F44FE FC 10 50                                        LDD     SCI_TXBUF_IN
004501 7F4501 18 17                                           CBA
004503 7F4503 26 04                                           BNE     SCI_TX_DONE_NB_1 ;transmissions queued
                                                              ;Check SCI status
004505 7F4505 4E CC C0 12                                     BRSET   SCISR1, #(TDRE|TC), SCI_TX_DONE_NB_2    ;all transmissionscomplete
                                                              ;Transmissions ongoing
                                                              ;Restore registers
004509 7F4509 MACRO                   SCI_TX_DONE_NB_1        SSTACK_PREPULL  4
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
004509 7F4509 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004509 7F4509 8F 10 0A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00450C 7F450C 18 25 FF 4D                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004510 7F4510 8F 10 21                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004513 7F4513 18 22 FF 4C                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004517 7F4517 -> $4463                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004517 7F4517 -> $445D                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004517 7F4517 3A                                              PULD
                                                              ;Signal failure
004518 7F4518 10 FE                                           CLC
                                                              ;Done
00451A 7F451A 3D                                              RTS
                                                              ;All transmissions complete
                                                              ;Restore registers
00451B 7F451B MACRO                   SCI_TX_DONE_NB_2        SSTACK_PREPULL  4
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00451B 7F451B MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00451B 7F451B 8F 10 0A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00451E 7F451E 18 25 FF 3B                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004522 7F4522 8F 10 21                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004525 7F4525 18 22 FF 3A                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004529 7F4529 -> $4463                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004529 7F4529 -> $445D                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004529 7F4529 3A                                              PULD
                                                              ;Signal success
00452A 7F452A 14 01                   SCI_TX_DONE_NB_3        SEC
                                                              ;Done
00452C 7F452C 3D                                              RTS
                                      ;#Wait until all pending data is sent
                                      ; args:   none
                                      ; result: none
                                      ; SSTACK: 6 bytes
                                      ;         X, Y, and D are preserved
00452D 7F452D -> $452D                SCI_TX_DONE_BL          EQU     *
00452D 7F452D MACRO                                           SCI_MAKE_BL     SCI_TX_DONE_NB, 4
                                      ;# Macros for internal use                                                       (SCI_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (SCI_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (SCI_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (SCI_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (SCI_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (SCI_MAKE_BL)
                                                              ;Disable interrupts                                      (SCI_MAKE_BL)
00452D 7F452D 14 10                   LOOP                    SEI                                                      (SCI_MAKE_BL)
                                                              ;Call non-blocking function                              (SCI_MAKE_BL)
00452F 7F452F                                                 //SSTACK_PREPUSH        \2                               (SCI_MAKE_BL)
00452F 7F452F 07 C8                                           JOBSR   \1                                               (SCI_MAKE_BL)
004531 7F4531 24 11                                           BCC     WAIT            ;function unsuccessful           (SCI_MAKE_BL)
                                                              ;Enable interrupts                                       (SCI_MAKE_BL)
004533 7F4533 10 EF                                           CLI                                                      (SCI_MAKE_BL)
                                                              ;Done                                                    (SCI_MAKE_BL)
004535 7F4535 MACRO                                           SSTACK_PREPULL  2                                        (SCI_MAKE_BL)
                                      ;#Check stack before pull operation                                              (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPULL)
004535 7F4535 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004535 7F4535 8F 10 0A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004538 7F4538 18 25 FF 21                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00453C 7F453C 8F 10 23                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00453F 7F453F 18 22 FF 20                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004543 7F4543 -> $4463                UF                      EQU     SSTACK_UF                                        (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004543 7F4543 -> $445D                OF                      EQU     SSTACK_OF                                        (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004543 7F4543 3D                                              RTS                                                      (SCI_MAKE_BL)
                                                              ;Wait for next interrupt                                 (SCI_MAKE_BL)
004544 7F4544 MACRO                   WAIT                    ISTACK_WAIT                                              (SCI_MAKE_BL)
                                      ;#Wait until any interrupt has been serviced                                     (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; ISTACK: none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Verify SP before runnung ISRs                           (SCI_MAKE_BL/ISTACK_WAIT)
004544 7F4544 8F 10 0A                                        CPS     #ISTACK_TOP+ISTACK_FRAME_SIZE                    (SCI_MAKE_BL/ISTACK_WAIT)
004547 7F4547 25 13                                           BLO     OF ;ISTACK_OF                                    (SCI_MAKE_BL/ISTACK_WAIT)
004549 7F4549 8F 10 25                                        CPS     #ISTACK_BOTTOM                                   (SCI_MAKE_BL/ISTACK_WAIT)
00454C 7F454C 22 0F                                           BHI     UF ;ISTACK_UF                                    (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (SCI_MAKE_BL/ISTACK_WAIT)
00454E 7F454E MACRO                                           COP_SERVICE                     ;already taken care of by WAI (SCI_MAKE_BL/ISTACK_WAIT)
                                                                                                              ; no window mode                        (~WCOP) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP and RTI stop when BDM is active   (RSBCK) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP is disabled       (~CR2|~CR1|~CR0) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                      ;#Service COP                                                                    (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
00454E 7F454E 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
004553 7F4553 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
004558 7F4558 10 EF                                           CLI                                                      (SCI_MAKE_BL/ISTACK_WAIT)
00455A 7F455A 20 02                                           JOB     DONE                                             (SCI_MAKE_BL/ISTACK_WAIT)
00455C 7F455C 00                      OF                      BGND                                                     (SCI_MAKE_BL/ISTACK_WAIT)
00455D 7F455D 00                      UF                      BGND                                                     (SCI_MAKE_BL/ISTACK_WAIT)
00455E 7F455E -> $455E                DONE                    EQU     *                                                (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Try again                                               (SCI_MAKE_BL)
00455E 7F455E MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_MAKE_BL)
                                      ;#Check stack before push operation                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
00455E 7F455E MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00455E 7F455E 8F 10 0E                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004561 7F4561 18 25 FE F8                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004565 7F4565 8F 10 25                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004568 7F4568 18 22 FE F7                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00456C 7F456C -> $4463                UF                      EQU     SSTACK_UF                                        (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00456C 7F456C -> $445D                OF                      EQU     SSTACK_OF                                        (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00456C 7F456C 20 BF                                           JOB     LOOP                                             (SCI_MAKE_BL)
                                      ;#Check if TX queue can hold further data
                                      ; args:   none
                                      ; result: C-flag: set if successful
                                      ; SSTACK: 4 bytes
                                      ;         X, Y, and D are preserved
00456E 7F456E -> $456E                SCI_TX_READY_NB         EQU     *
                                                              ;Check if SCI transmitter is enabled
00456E 7F456E 4F CB 08 1B                                     BRCLR   SCICR2, #TE, SCI_TX_READY_NB_1          ;do nothing and flag success
                                                              ;Save registers
004572 7F4572 3B                                              PSHD
                                                              ;Check if there is room for this entry
004573 7F4573 FC 10 50                                        LDD     SCI_TXBUF_IN            ;in-index in A, out-index in B
004576 7F4576 42                                              INCA
004577 7F4577 84 01                                           ANDA    #SCI_TXBUF_MASK
004579 7F4579 B1 10 51                                        CMPA    SCI_TXBUF_OUT
00457C 7F457C 27 12                                           BEQ     SCI_TX_READY_NB_2                               ;buffer is full
                                                              ;Restore registers
00457E 7F457E MACRO                                           SSTACK_PREPULL  4
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00457E 7F457E MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00457E 7F457E 8F 10 0A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004581 7F4581 18 25 FE D8                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004585 7F4585 8F 10 21                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004588 7F4588 18 22 FE D7                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00458C 7F458C -> $4463                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00458C 7F458C -> $445D                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00458C 7F458C 3A                                              PULD
                                                              ;Done
00458D 7F458D 14 01                   SCI_TX_READY_NB_1       SEC
00458F 7F458F 3D                                              RTS
                                                              ;TX buffer is full
004590 7F4590 MACRO                   SCI_TX_READY_NB_2       SSTACK_PREPULL  4
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
004590 7F4590 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004590 7F4590 8F 10 0A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004593 7F4593 18 25 FE C6                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004597 7F4597 8F 10 21                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00459A 7F459A 18 22 FE C5                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00459E 7F459E -> $4463                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00459E 7F459E -> $445D                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00459E 7F459E 3A                                              PULD
                                                              ;Done
00459F 7F459F 10 FE                                           CLC
0045A1 7F45A1 3D                                              RTS
                                      ;#Wait until TX queue can hold further data
                                      ; args:   none
                                      ; result: none
                                      ; SSTACK: 6 bytes
                                      ;         X, Y, and D are preserved
0045A2 7F45A2 -> $45A2                SCI_TX_READY_BL         EQU     *
0045A2 7F45A2 MACRO                                           SCI_MAKE_BL     SCI_TX_READY_NB, 4
                                      ;# Macros for internal use                                                       (SCI_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (SCI_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (SCI_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (SCI_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (SCI_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (SCI_MAKE_BL)
                                                              ;Disable interrupts                                      (SCI_MAKE_BL)
0045A2 7F45A2 14 10                   LOOP                    SEI                                                      (SCI_MAKE_BL)
                                                              ;Call non-blocking function                              (SCI_MAKE_BL)
0045A4 7F45A4                                                 //SSTACK_PREPUSH        \2                               (SCI_MAKE_BL)
0045A4 7F45A4 07 C8                                           JOBSR   \1                                               (SCI_MAKE_BL)
0045A6 7F45A6 24 11                                           BCC     WAIT            ;function unsuccessful           (SCI_MAKE_BL)
                                                              ;Enable interrupts                                       (SCI_MAKE_BL)
0045A8 7F45A8 10 EF                                           CLI                                                      (SCI_MAKE_BL)
                                                              ;Done                                                    (SCI_MAKE_BL)
0045AA 7F45AA MACRO                                           SSTACK_PREPULL  2                                        (SCI_MAKE_BL)
                                      ;#Check stack before pull operation                                              (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPULL)
0045AA 7F45AA MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0045AA 7F45AA 8F 10 0A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0045AD 7F45AD 18 25 FE AC                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0045B1 7F45B1 8F 10 23                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0045B4 7F45B4 18 22 FE AB                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0045B8 7F45B8 -> $4463                UF                      EQU     SSTACK_UF                                        (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0045B8 7F45B8 -> $445D                OF                      EQU     SSTACK_OF                                        (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0045B8 7F45B8 3D                                              RTS                                                      (SCI_MAKE_BL)
                                                              ;Wait for next interrupt                                 (SCI_MAKE_BL)
0045B9 7F45B9 MACRO                   WAIT                    ISTACK_WAIT                                              (SCI_MAKE_BL)
                                      ;#Wait until any interrupt has been serviced                                     (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; ISTACK: none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Verify SP before runnung ISRs                           (SCI_MAKE_BL/ISTACK_WAIT)
0045B9 7F45B9 8F 10 0A                                        CPS     #ISTACK_TOP+ISTACK_FRAME_SIZE                    (SCI_MAKE_BL/ISTACK_WAIT)
0045BC 7F45BC 25 13                                           BLO     OF ;ISTACK_OF                                    (SCI_MAKE_BL/ISTACK_WAIT)
0045BE 7F45BE 8F 10 25                                        CPS     #ISTACK_BOTTOM                                   (SCI_MAKE_BL/ISTACK_WAIT)
0045C1 7F45C1 22 0F                                           BHI     UF ;ISTACK_UF                                    (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (SCI_MAKE_BL/ISTACK_WAIT)
0045C3 7F45C3 MACRO                                           COP_SERVICE                     ;already taken care of by WAI (SCI_MAKE_BL/ISTACK_WAIT)
                                                                                                              ; no window mode                        (~WCOP) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP and RTI stop when BDM is active   (RSBCK) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP is disabled       (~CR2|~CR1|~CR0) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                      ;#Service COP                                                                    (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
0045C3 7F45C3 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
0045C8 7F45C8 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
0045CD 7F45CD 10 EF                                           CLI                                                      (SCI_MAKE_BL/ISTACK_WAIT)
0045CF 7F45CF 20 02                                           JOB     DONE                                             (SCI_MAKE_BL/ISTACK_WAIT)
0045D1 7F45D1 00                      OF                      BGND                                                     (SCI_MAKE_BL/ISTACK_WAIT)
0045D2 7F45D2 00                      UF                      BGND                                                     (SCI_MAKE_BL/ISTACK_WAIT)
0045D3 7F45D3 -> $45D3                DONE                    EQU     *                                                (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Try again                                               (SCI_MAKE_BL)
0045D3 7F45D3 MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_MAKE_BL)
                                      ;#Check stack before push operation                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
0045D3 7F45D3 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0045D3 7F45D3 8F 10 0E                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0045D6 7F45D6 18 25 FE 83                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0045DA 7F45DA 8F 10 25                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0045DD 7F45DD 18 22 FE 82                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0045E1 7F45E1 -> $4463                UF                      EQU     SSTACK_UF                                        (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0045E1 7F45E1 -> $445D                OF                      EQU     SSTACK_OF                                        (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0045E1 7F45E1 20 BF                                           JOB     LOOP                                             (SCI_MAKE_BL)
                                      ;#Receive one byte - non-blocking ;OK!
                                      ; args:   none
                                      ; result: A:      error flags
                                      ;         B:      received data
                                      ;         C-flag: set if successful
                                      ; SSTACK: 4 bytes
                                      ;         X and Y are preserved
0045E3 7F45E3 -> $45E3                SCI_RX_NB               EQU     *
                                                              ;Check if SCI receiver is enabled
0045E3 7F45E3 4F CB 08 3D                                     BRCLR   SCICR2, #TE, SCI_RX_NB_3                ;do nothing and flag failure
                                                              ;Save registers
0045E7 7F45E7 34                                              PSHX
                                                              ;Check if there is data in the RX queue
0045E8 7F45E8 FC 10 46                                        LDD     SCI_RXBUF_IN                            ;A:B=in:out
0045EB 7F45EB 18 16                                           SBA                                             ;A=in-out
0045ED 7F45ED 27 26                                           BEQ     SCI_RX_NB_2                             ;RX buffer is empty
                                                              ;Check if more RX data is allowed  (in-out in A)
0045EF 7F45EF 84 1F                                           ANDA    #SCI_RXBUF_MASK
0045F1 7F45F1 81 04                                           CMPA    #SCI_RX_EMPTY_LEVEL
0045F3 7F45F3 27 32                                           BEQ     SCI_RX_NB_4                             ;allow RX data
                                                              ;Pull entry from the RX queue (out in B)
0045F5 7F45F5 CE 10 26                SCI_RX_NB_1             LDX     #SCI_RXBUF
0045F8 7F45F8 EE E5                                           LDX     B,X
0045FA 7F45FA CB 02                                           ADDB    #$02                                    ;increment out pointer
0045FC 7F45FC C4 1F                                           ANDB    #SCI_RXBUF_MASK
0045FE 7F45FE 7B 10 47                                        STAB    SCI_RXBUF_OUT
                                                              ;MOVB   #(TXIE|RIE|TE|RE), SCICR2               ;trigger RXTX ISR
004601 7F4601 B7 54                                           TFR     X, D
                                                              ;Restore registers
004603 7F4603 MACRO                                           SSTACK_PREPULL  4
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
004603 7F4603 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004603 7F4603 8F 10 0A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004606 7F4606 18 25 FE 53                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00460A 7F460A 8F 10 21                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00460D 7F460D 18 22 FE 52                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004611 7F4611 -> $4463                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004611 7F4611 -> $445D                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004611 7F4611 30                                              PULX
                                                              ;Done
004612 7F4612 14 01                                           SEC
004614 7F4614 3D                                              RTS
                                                              ;RX buffer is empty (CCR in X)
004615 7F4615 MACRO                   SCI_RX_NB_2             SSTACK_PREPULL  4
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
004615 7F4615 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004615 7F4615 8F 10 0A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004618 7F4618 18 25 FE 41                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00461C 7F461C 8F 10 21                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00461F 7F461F 18 22 FE 40                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004623 7F4623 -> $4463                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004623 7F4623 -> $445D                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004623 7F4623 30                                              PULX
                                                              ;Done
004624 7F4624 10 FE                   SCI_RX_NB_3             CLC
004626 7F4626 3D                                              RTS
                                                              ;Transmit XON/XOFF (out-index in B, CCR in X)
004627 7F4627 MACRO                   SCI_RX_NB_4             SCI_SEND_XONXOFF
                                      ;#Send XON/XOFF symbol                                                           (SCI_SEND_XONXOFF)
                                      ; args:   none                                                                   (SCI_SEND_XONXOFF)
                                      ; SSTACK: none                                                                   (SCI_SEND_XONXOFF)
                                      ;         X, Y, and D are preserved                                              (SCI_SEND_XONXOFF)
004627 7F4627 1C 10 25 80                                     BSET    SCI_FLGS, #SCI_FLG_SEND_XONXOFF         ;request transmission of XON/XOFF (SCI_SEND_XONXOFF)
00462B 7F462B 18 0B AC 00 CB                                  MOVB    #(TXIE|RIE|TE|RE), SCICR2               ;enable TX interrupts (SCI_SEND_XONXOFF)
004630 7F4630 20 C3                                           JOB     SCI_RX_NB_1
                                      ;#Receive one byte - blocking
                                      ; args:   none
                                      ; result: A:      error flags
                                      ;         B:      received data
                                      ;         C-flag: set if successful
                                      ; SSTACK: 6 bytes
                                      ;         X and Y are preserved
004632 7F4632 -> $4632                SCI_RX_BL               EQU     *
004632 7F4632 MACRO                                           SCI_MAKE_BL     SCI_RX_NB, 4
                                      ;# Macros for internal use                                                       (SCI_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (SCI_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (SCI_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (SCI_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (SCI_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (SCI_MAKE_BL)
                                                              ;Disable interrupts                                      (SCI_MAKE_BL)
004632 7F4632 14 10                   LOOP                    SEI                                                      (SCI_MAKE_BL)
                                                              ;Call non-blocking function                              (SCI_MAKE_BL)
004634 7F4634                                                 //SSTACK_PREPUSH        \2                               (SCI_MAKE_BL)
004634 7F4634 07 AD                                           JOBSR   \1                                               (SCI_MAKE_BL)
004636 7F4636 24 11                                           BCC     WAIT            ;function unsuccessful           (SCI_MAKE_BL)
                                                              ;Enable interrupts                                       (SCI_MAKE_BL)
004638 7F4638 10 EF                                           CLI                                                      (SCI_MAKE_BL)
                                                              ;Done                                                    (SCI_MAKE_BL)
00463A 7F463A MACRO                                           SSTACK_PREPULL  2                                        (SCI_MAKE_BL)
                                      ;#Check stack before pull operation                                              (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPULL)
00463A 7F463A MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00463A 7F463A 8F 10 0A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00463D 7F463D 18 25 FE 1C                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004641 7F4641 8F 10 23                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004644 7F4644 18 22 FE 1B                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004648 7F4648 -> $4463                UF                      EQU     SSTACK_UF                                        (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004648 7F4648 -> $445D                OF                      EQU     SSTACK_OF                                        (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004648 7F4648 3D                                              RTS                                                      (SCI_MAKE_BL)
                                                              ;Wait for next interrupt                                 (SCI_MAKE_BL)
004649 7F4649 MACRO                   WAIT                    ISTACK_WAIT                                              (SCI_MAKE_BL)
                                      ;#Wait until any interrupt has been serviced                                     (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; ISTACK: none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Verify SP before runnung ISRs                           (SCI_MAKE_BL/ISTACK_WAIT)
004649 7F4649 8F 10 0A                                        CPS     #ISTACK_TOP+ISTACK_FRAME_SIZE                    (SCI_MAKE_BL/ISTACK_WAIT)
00464C 7F464C 25 13                                           BLO     OF ;ISTACK_OF                                    (SCI_MAKE_BL/ISTACK_WAIT)
00464E 7F464E 8F 10 25                                        CPS     #ISTACK_BOTTOM                                   (SCI_MAKE_BL/ISTACK_WAIT)
004651 7F4651 22 0F                                           BHI     UF ;ISTACK_UF                                    (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (SCI_MAKE_BL/ISTACK_WAIT)
004653 7F4653 MACRO                                           COP_SERVICE                     ;already taken care of by WAI (SCI_MAKE_BL/ISTACK_WAIT)
                                                                                                              ; no window mode                        (~WCOP) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP and RTI stop when BDM is active   (RSBCK) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP is disabled       (~CR2|~CR1|~CR0) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                      ;#Service COP                                                                    (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
004653 7F4653 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
004658 7F4658 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
00465D 7F465D 10 EF                                           CLI                                                      (SCI_MAKE_BL/ISTACK_WAIT)
00465F 7F465F 20 02                                           JOB     DONE                                             (SCI_MAKE_BL/ISTACK_WAIT)
004661 7F4661 00                      OF                      BGND                                                     (SCI_MAKE_BL/ISTACK_WAIT)
004662 7F4662 00                      UF                      BGND                                                     (SCI_MAKE_BL/ISTACK_WAIT)
004663 7F4663 -> $4663                DONE                    EQU     *                                                (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Try again                                               (SCI_MAKE_BL)
004663 7F4663 MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_MAKE_BL)
                                      ;#Check stack before push operation                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
004663 7F4663 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004663 7F4663 8F 10 0E                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004666 7F4666 18 25 FD F3                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00466A 7F466A 8F 10 25                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00466D 7F466D 18 22 FD F2                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004671 7F4671 -> $4463                UF                      EQU     SSTACK_UF                                        (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004671 7F4671 -> $445D                OF                      EQU     SSTACK_OF                                        (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004671 7F4671 20 BF                                           JOB     LOOP                                             (SCI_MAKE_BL)
                                      ;#Check if there is data in the RX queue
                                      ; args:   none
                                      ; result: C-flag: set if successful
                                      ; SSTACK: 4 bytes
                                      ;         X, Y and D are preserved
004673 7F4673 -> $4673                SCI_RX_READY_NB         EQU     *
                                                              ;Check if SCI receiver is enabled
004673 7F4673 4F CB 08 29                                     BRCLR   SCICR2, #TE, SCI_RX_READY_NB_2          ;do nothing and flag failure
                                                              ;Save registers
004677 7F4677 3B                                              PSHD
                                                              ;Check if there is data in the RX queue
004678 7F4678 FC 10 46                                        LDD     SCI_RXBUF_IN            ;A:B=in:out
00467B 7F467B 18 17                                           CBA
00467D 7F467D 27 12                                           BEQ     SCI_RX_READY_NB_1
                                                              ;RX buffer holds data
00467F 7F467F MACRO                                           SSTACK_PREPULL  4
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00467F 7F467F MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00467F 7F467F 8F 10 0A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004682 7F4682 18 25 FD D7                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004686 7F4686 8F 10 21                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004689 7F4689 18 22 FD D6                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00468D 7F468D -> $4463                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00468D 7F468D -> $445D                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00468D 7F468D 3A                                              PULD
                                                              ;Done
00468E 7F468E 14 01                                           SEC
004690 7F4690 3D                                              RTS
                                                              ;RX buffer is empty
004691 7F4691 MACRO                   SCI_RX_READY_NB_1       SSTACK_PREPULL  4
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
004691 7F4691 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004691 7F4691 8F 10 0A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004694 7F4694 18 25 FD C5                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004698 7F4698 8F 10 21                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00469B 7F469B 18 22 FD C4                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00469F 7F469F -> $4463                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00469F 7F469F -> $445D                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00469F 7F469F 3A                                              PULD
                                                              ;Done
0046A0 7F46A0 10 FE                   SCI_RX_READY_NB_2       CLC
0046A2 7F46A2 3D                                              RTS
                                      ;#Wait until there is data in the RX queue
                                      ; args:   none
                                      ; result: C-flag: set if successful
                                      ; SSTACK: 4 bytes
                                      ;         X, Y and D are preserved
0046A3 7F46A3 -> $46A3                SCI_RX_READY_BL         EQU     *
0046A3 7F46A3 MACRO                                           SCI_MAKE_BL     SCI_RX_READY_BL, 4
                                      ;# Macros for internal use                                                       (SCI_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (SCI_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (SCI_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (SCI_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (SCI_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (SCI_MAKE_BL)
                                                              ;Disable interrupts                                      (SCI_MAKE_BL)
0046A3 7F46A3 14 10                   LOOP                    SEI                                                      (SCI_MAKE_BL)
                                                              ;Call non-blocking function                              (SCI_MAKE_BL)
0046A5 7F46A5                                                 //SSTACK_PREPUSH        \2                               (SCI_MAKE_BL)
0046A5 7F46A5 07 FC                                           JOBSR   \1                                               (SCI_MAKE_BL)
0046A7 7F46A7 24 11                                           BCC     WAIT            ;function unsuccessful           (SCI_MAKE_BL)
                                                              ;Enable interrupts                                       (SCI_MAKE_BL)
0046A9 7F46A9 10 EF                                           CLI                                                      (SCI_MAKE_BL)
                                                              ;Done                                                    (SCI_MAKE_BL)
0046AB 7F46AB MACRO                                           SSTACK_PREPULL  2                                        (SCI_MAKE_BL)
                                      ;#Check stack before pull operation                                              (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPULL)
0046AB 7F46AB MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0046AB 7F46AB 8F 10 0A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0046AE 7F46AE 18 25 FD AB                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0046B2 7F46B2 8F 10 23                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0046B5 7F46B5 18 22 FD AA                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0046B9 7F46B9 -> $4463                UF                      EQU     SSTACK_UF                                        (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0046B9 7F46B9 -> $445D                OF                      EQU     SSTACK_OF                                        (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0046B9 7F46B9 3D                                              RTS                                                      (SCI_MAKE_BL)
                                                              ;Wait for next interrupt                                 (SCI_MAKE_BL)
0046BA 7F46BA MACRO                   WAIT                    ISTACK_WAIT                                              (SCI_MAKE_BL)
                                      ;#Wait until any interrupt has been serviced                                     (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; ISTACK: none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Verify SP before runnung ISRs                           (SCI_MAKE_BL/ISTACK_WAIT)
0046BA 7F46BA 8F 10 0A                                        CPS     #ISTACK_TOP+ISTACK_FRAME_SIZE                    (SCI_MAKE_BL/ISTACK_WAIT)
0046BD 7F46BD 25 13                                           BLO     OF ;ISTACK_OF                                    (SCI_MAKE_BL/ISTACK_WAIT)
0046BF 7F46BF 8F 10 25                                        CPS     #ISTACK_BOTTOM                                   (SCI_MAKE_BL/ISTACK_WAIT)
0046C2 7F46C2 22 0F                                           BHI     UF ;ISTACK_UF                                    (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (SCI_MAKE_BL/ISTACK_WAIT)
0046C4 7F46C4 MACRO                                           COP_SERVICE                     ;already taken care of by WAI (SCI_MAKE_BL/ISTACK_WAIT)
                                                                                                              ; no window mode                        (~WCOP) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP and RTI stop when BDM is active   (RSBCK) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP is disabled       (~CR2|~CR1|~CR0) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                      ;#Service COP                                                                    (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
0046C4 7F46C4 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
0046C9 7F46C9 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
0046CE 7F46CE 10 EF                                           CLI                                                      (SCI_MAKE_BL/ISTACK_WAIT)
0046D0 7F46D0 20 02                                           JOB     DONE                                             (SCI_MAKE_BL/ISTACK_WAIT)
0046D2 7F46D2 00                      OF                      BGND                                                     (SCI_MAKE_BL/ISTACK_WAIT)
0046D3 7F46D3 00                      UF                      BGND                                                     (SCI_MAKE_BL/ISTACK_WAIT)
0046D4 7F46D4 -> $46D4                DONE                    EQU     *                                                (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Try again                                               (SCI_MAKE_BL)
0046D4 7F46D4 MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_MAKE_BL)
                                      ;#Check stack before push operation                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
0046D4 7F46D4 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0046D4 7F46D4 8F 10 0E                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0046D7 7F46D7 18 25 FD 82                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0046DB 7F46DB 8F 10 25                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0046DE 7F46DE 18 22 FD 81                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0046E2 7F46E2 -> $4463                UF                      EQU     SSTACK_UF                                        (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0046E2 7F46E2 -> $445D                OF                      EQU     SSTACK_OF                                        (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0046E2 7F46E2 20 BF                                           JOB     LOOP                                             (SCI_MAKE_BL)
                                      ;#Set baud rate
                                      ; args:   D: new SCIBD value
                                      ; result: none
                                      ; SSTACK: 6 bytes
                                      ;         X, Y, and D are preserved
0046E4 7F46E4 -> $46E4                SCI_SET_BAUD            EQU     *
                                                              ;Save registers (new SCIBD value in D)
0046E4 7F46E4 35                                              PSHY                                    ;push Y onto the SSTACK
0046E5 7F46E5 3B                                              PSHD                                    ;push D onto the SSTACK
                                                              ;Set baud rate (new SCIBD value in D)
0046E6 7F46E6 5C C8                                           STD     SCIBDH                          ;set baud rate
0046E8 7F46E8 CD 0C CC                                        LDY     #SCI_BMUL                       ;save baud rate for next warmstart
0046EB 7F46EB 13                                              EMUL                                    ;D*Y -> Y:D
0046EC 7F46EC 7C 10 52                                        STD     SCI_BVAL
                                                              ;Clear input buffer
0046EF 7F46EF 18 03 00 00 10 46                               MOVW    #$0000, SCI_RXBUF_IN            ;reset in and out pointer of the RX buffer
                                                              ;Restore registers
0046F5 7F46F5 MACRO                                           SSTACK_PREPULL  6
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
0046F5 7F46F5 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0046F5 7F46F5 8F 10 0A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0046F8 7F46F8 18 25 FD 61                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0046FC 7F46FC 8F 10 1F                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0046FF 7F46FF 18 22 FD 60                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004703 7F4703 -> $4463                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004703 7F4703 -> $445D                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004703 7F4703 3A                                              PULD                                    ;pull D from the SSTACK
004704 7F4704 31                                              PULY                                    ;pull Y from the SSTACK
                                                              ;Done
004705 7F4705 3D                                              RTS
                                      ;#Timer delay
                                      ; period: approx. 2 SCI frames
                                      ; RTS/CTS:    if RTS polling is requested (SCI_FLG_POLL_RTS) -> enable TX IRQ
                                      ; XON/XOFF:   if reminder count == 1 -> request XON/XOFF reminder, enable TX IRQ
                                      ;             if reminder count > 1  -> decrement reminder count, retrigger delay
                                      ; workaround: retrigger delay, jump to SCI_ISR_RXTX
004706 7F4706 -> $4706                SCI_ISR_DELAY           EQU     *
004706 7F4706 10 FE                                           CLC                                                             ;don't retrigger
                                                              ;Check XON/XOFF reminder count (retrigger request in C-flag)
004708 7F4708 FC 10 54                                        LDD     SCI_XONXOFF_REMCNT
00470B 7F470B 27 13                                           BEQ     SCI_ISR_DELAY_3                                         ;XON/XOFF reminder disabled
00470D 7F470D 04 24 0B                                        DBNE    D, SCI_ISR_DELAY_1                                      ;don't send XON/XOFF yet
004710 7F4710 MACRO                                           SCI_SEND_XONXOFF                                                ;request XON/XOFF reminder
                                      ;#Send XON/XOFF symbol                                                           (SCI_SEND_XONXOFF)
                                      ; args:   none                                                                   (SCI_SEND_XONXOFF)
                                      ; SSTACK: none                                                                   (SCI_SEND_XONXOFF)
                                      ;         X, Y, and D are preserved                                              (SCI_SEND_XONXOFF)
004710 7F4710 1C 10 25 80                                     BSET    SCI_FLGS, #SCI_FLG_SEND_XONXOFF         ;request transmission of XON/XOFF (SCI_SEND_XONXOFF)
004714 7F4714 18 0B AC 00 CB                                  MOVB    #(TXIE|RIE|TE|RE), SCICR2               ;enable TX interrupts (SCI_SEND_XONXOFF)
004719 7F4719 20 02                                           JOB     SCI_ISR_DELAY_2
00471B 7F471B -> $471B                SCI_ISR_DELAY_1         EQU     *
00471B 7F471B 14 01                                           SEC                                                             ;retrigger
00471D 7F471D 7C 10 54                SCI_ISR_DELAY_2         STD     SCI_XONXOFF_REMCNT
004720 7F4720 -> $4720                SCI_ISR_DELAY_3         EQU     *
                                                              ;Retrigger if required (retrigger request in C-flag)
004720 7F4720 24 1F                                           BCC     SCI_ISR_DELAY_5
004722 7F4722 MACRO                                           SCI_RESET_DELAY
                                      ;#RESET delay (approx. 2 SCI frames)                                             (SCI_RESET_DELAY)
                                      ; args:   none                                                                   (SCI_RESET_DELAY)
                                      ; SSTACK: none                                                                   (SCI_RESET_DELAY)
                                      ;         X, and Y are preserved                                                 (SCI_RESET_DELAY)
004722 7F4722 MACRO                                           TIM_CLRIF       SCI_DLY_OC                               (SCI_RESET_DELAY)
                                      ;#Clear one interrupt flag                                                       (SCI_RESET_DELAY/TIM_CLRIF)
                                      ; args: 1: channel number                                                        (SCI_RESET_DELAY/TIM_CLRIF)
                                      ; SSTACK: none                                                                   (SCI_RESET_DELAY/TIM_CLRIF)
                                      ;         X, Y, and D are preserved                                              (SCI_RESET_DELAY/TIM_CLRIF)
004722 7F4722 MACRO                                           TIM_MULT_CLRIF  (1<<\1)                                  (SCI_RESET_DELAY/TIM_CLRIF)
                                      ;#Clear multiple interrupt flags                                                 (SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; args: 1: channel mask                                                          (SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; SSTACK: none                                                                   (SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
                                      ;         X, Y, and D are preserved                                              (SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
004722 7F4722 18 0B 08 00 4E                                  MOVB    #\1, TFLG1                                       (SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
004727 7F4727 DC C8                                           LDD     SCIBDH                                  ;retrigger delay (SCI_RESET_DELAY)
004729 7F4729 04 60 08                                        TBNE    A, MAX_DELAY                            ;max. delay ($FFFF) exceeded (SCI_RESET_DELAY)
00472C 7F472C B7 10                                           TFR     B, A                                    ;determine delay (SCI_RESET_DELAY)
00472E 7F472E C7                                              CLRB                                                     (SCI_RESET_DELAY)
00472F 7F472F MACRO                                           TIM_SET_DLY_D   SCI_DLY_OC                      ;update OC count (SCI_RESET_DELAY)
                                      ;#Setup timer delay                                                              (SCI_RESET_DELAY/TIM_SET_DLY_D)
                                      ; args: 1: channel number                                                        (SCI_RESET_DELAY/TIM_SET_DLY_D)
                                      ;       D: delay (in bus cycles)                                                 (SCI_RESET_DELAY/TIM_SET_DLY_D)
                                      ; SSTACK: none                                                                   (SCI_RESET_DELAY/TIM_SET_DLY_D)
                                      ;         X, and Y are preserved                                                 (SCI_RESET_DELAY/TIM_SET_DLY_D)
00472F 7F472F 49                                              LSRD                                                     (SCI_RESET_DELAY/TIM_SET_DLY_D)
004730 7F4730 D3 44                                           ADDD    TCNT                                             (SCI_RESET_DELAY/TIM_SET_DLY_D)
004732 7F4732 5C 56                                           STD     (TC0+(2*\1))                                     (SCI_RESET_DELAY/TIM_SET_DLY_D)
004734 7F4734 -> $4734                MAX_DELAY               EQU     *                                                (SCI_RESET_DELAY)
004734 7F4734 MACRO                   SCI_ISR_DELAY_4         ISTACK_RTI
                                      ;#Return from interrupt                                                          (ISTACK_RTI)
                                      ; args:   none                                                                   (ISTACK_RTI)
                                      ; ISTACK: -9 (S12)/-10 (S12X)                                                    (ISTACK_RTI)
                                      ;         X, Y, and D are pulled from the interrupt stack                        (ISTACK_RTI)
                                                              ;Verify SP at the end of each ISR                        (ISTACK_RTI)
004734 7F4734 8F 10 01                                        CPS     #ISTACK_TOP                                      (ISTACK_RTI)
004737 7F4737 25 06                                           BLO     OF                                               (ISTACK_RTI)
004739 7F4739 8F 10 1C                                        CPS     #ISTACK_BOTTOM-ISTACK_FRAME_SIZE                 (ISTACK_RTI)
00473C 7F473C 22 02                                           BHI     UF                                               (ISTACK_RTI)
                                                              ;End ISR                                                 (ISTACK_RTI)
00473E 7F473E 0B                                              RTI                                                      (ISTACK_RTI)
00473F 7F473F 00                      OF                      BGND                                                     (ISTACK_RTI)
004740 7F4740 00                      UF                      BGND                                                     (ISTACK_RTI)
004741 7F4741 MACRO                   SCI_ISR_DELAY_5         SCI_STOP_DELAY
                                      ;#Stop delay (approx. 2 SCI frames)                                              (SCI_STOP_DELAY)
                                      ; args:   none                                                                   (SCI_STOP_DELAY)
                                      ; SSTACK: none                                                                   (SCI_STOP_DELAY)
                                      ;         X, Y, and D are preserved                                              (SCI_STOP_DELAY)
004741 7F4741 MACRO                                           TIM_DIS         SCI_DLY_OC                               (SCI_STOP_DELAY)
                                      ;#Disable one timer channel                                                      (SCI_STOP_DELAY/TIM_DIS)
                                      ; args: 1: channel number                                                        (SCI_STOP_DELAY/TIM_DIS)
                                      ; SSTACK: none                                                                   (SCI_STOP_DELAY/TIM_DIS)
                                      ;         X, Y, and D are preserved                                              (SCI_STOP_DELAY/TIM_DIS)
004741 7F4741 MACRO                                           TIM_MULT_DIS    (1<<\1)                                  (SCI_STOP_DELAY/TIM_DIS)
                                      ;#Disable multiple timer channels                                                (SCI_STOP_DELAY/TIM_DIS/TIM_MULT_DIS)
                                      ; args: 1: channel mask                                                          (SCI_STOP_DELAY/TIM_DIS/TIM_MULT_DIS)
                                      ; SSTACK: none                                                                   (SCI_STOP_DELAY/TIM_DIS/TIM_MULT_DIS)
                                      ;         X, Y, and D are preserved                                              (SCI_STOP_DELAY/TIM_DIS/TIM_MULT_DIS)
004741 7F4741 4D 4C 08                                        BCLR    TIE, #\1                                         (SCI_STOP_DELAY/TIM_DIS/TIM_MULT_DIS)
004744 7F4744 26 03                                           BNE     DONE                                             (SCI_STOP_DELAY/TIM_DIS/TIM_MULT_DIS)
004746 7F4746 79 00 46                                        CLR     TSCR1                                            (SCI_STOP_DELAY/TIM_DIS/TIM_MULT_DIS)
004749 7F4749 -> $4749                DONE                    EQU     *                                                (SCI_STOP_DELAY/TIM_DIS/TIM_MULT_DIS)
004749 7F4749 -> $4749                                        EQU     *                                                (SCI_STOP_DELAY)
004749 7F4749 20 E9                                           JOB     SCI_ISR_DELAY_4
                                                              ;#Transmit ISR (status flags in A)
00474B 7F474B 85 80                   SCI_ISR_TX              BITA    #TDRE                                   ;check if SCI is ready for new TX data
00474D 7F474D 27 54                                           BEQ     <SCI_ISR_TX_4                           ;done for now
                                                              ;Check if XON/XOFF transmission is required
00474F 7F474F 1E 10 25 02 1D                                  BRSET   SCI_FLGS, #SCI_FLG_TX_ESC, SCI_ISR_TX_1 ;Don't escape any XON/XOFF symbols
                                                              ;Transmit XON/XOFF symbols
004754 7F4754 1F 10 25 80 18                                  BRCLR   SCI_FLGS, #SCI_FLG_SEND_XONXOFF, SCI_ISR_TX_1 ;XON/XOFF not requested
                                                              ;Clear XON/XOFF request
004759 7F4759 1D 10 25 80                                     BCLR    SCI_FLGS, #SCI_FLG_SEND_XONXOFF
                                                              ;Check RX queue
00475D 7F475D FC 10 46                                        LDD     SCI_RXBUF_IN
004760 7F4760 18 16                                           SBA
004762 7F4762 84 1F                                           ANDA    #SCI_RXBUF_MASK
                                                              ;Check XOFF theshold
004764 7F4764 81 10                                           CMPA    #SCI_RX_FULL_LEVEL
004766 7F4766 24 4F                                           BHS     <SCI_ISR_TX_6                           ;transmit XOFF
                                                              ;Check XON theshold
004768 7F4768 81 04                                           CMPA    #SCI_RX_EMPTY_LEVEL
00476A 7F476A 23 44                                           BLS     <SCI_ISR_TX_5                           ;transmit XON
                                                              ;Check XOFF status
00476C 7F476C 1E 10 25 08 28                                  BRSET   SCI_FLGS, #SCI_FLG_TX_BLOCKED, SCI_ISR_TX_3 ;stop transmitting
                                                              ;Check TX buffer
004771 7F4771 FC 10 50                SCI_ISR_TX_1            LDD     SCI_TXBUF_IN
004774 7F4774 18 17                                           CBA
004776 7F4776 27 21                                           BEQ     <SCI_ISR_TX_3                           ;stop transmitting
                                                              ;Transmit data (in-index in A, out-index in B)
004778 7F4778 CD 10 48                                        LDY     #SCI_TXBUF
                                                              ;Check for DLE (in-index in A, out-index in B, buffer pointer in Y)
00477B 7F477B 1D 10 25 02                                     BCLR    SCI_FLGS, #SCI_FLG_TX_ESC
00477F 7F477F B7 45                                           TFR     D, X
004781 7F4781 E6 ED                                           LDAB    B,Y
004783 7F4783 C1 10                                           CMPB    #SCI_DLE
004785 7F4785 26 04                                           BNE     SCI_ISR_TX_2
004787 7F4787 1C 10 25 02                                     BSET    SCI_FLGS, #SCI_FLG_TX_ESC
00478B 7F478B 5B CF                   SCI_ISR_TX_2            STAB    SCIDRL
00478D 7F478D B7 54                                           TFR     X, D
                                                              ;Increment index (in-index in A, out-index in B, buffer pointer in Y)
00478F 7F478F 52                                              INCB
004790 7F4790 C4 01                                           ANDB    #SCI_TXBUF_MASK
004792 7F4792 7B 10 51                                        STAB    SCI_TXBUF_OUT
004795 7F4795 18 17                                           CBA
004797 7F4797 26 0A                                           BNE     <SCI_ISR_TX_4                           ;done
                                                              ;Stop transmitting
004799 7F4799 -> $4799                SCI_ISR_TX_3            EQU     *
004799 7F4799 1E 10 25 80 05                                  BRSET   SCI_FLGS, #SCI_FLG_SEND_XONXOFF, SCI_ISR_TX_4 ;consider pending XON/XOFF symbols
00479E 7F479E 18 0B 2C 00 CB                                  MOVB    #(RIE|TE|RE), SCICR2                    ;disable TX interrupts
                                                              ;Done
0047A3 7F47A3 MACRO                   SCI_ISR_TX_4            ISTACK_RTI
                                      ;#Return from interrupt                                                          (ISTACK_RTI)
                                      ; args:   none                                                                   (ISTACK_RTI)
                                      ; ISTACK: -9 (S12)/-10 (S12X)                                                    (ISTACK_RTI)
                                      ;         X, Y, and D are pulled from the interrupt stack                        (ISTACK_RTI)
                                                              ;Verify SP at the end of each ISR                        (ISTACK_RTI)
0047A3 7F47A3 8F 10 01                                        CPS     #ISTACK_TOP                                      (ISTACK_RTI)
0047A6 7F47A6 25 06                                           BLO     OF                                               (ISTACK_RTI)
0047A8 7F47A8 8F 10 1C                                        CPS     #ISTACK_BOTTOM-ISTACK_FRAME_SIZE                 (ISTACK_RTI)
0047AB 7F47AB 22 02                                           BHI     UF                                               (ISTACK_RTI)
                                                              ;End ISR                                                 (ISTACK_RTI)
0047AD 7F47AD 0B                                              RTI                                                      (ISTACK_RTI)
0047AE 7F47AE 00                      OF                      BGND                                                     (ISTACK_RTI)
0047AF 7F47AF 00                      UF                      BGND                                                     (ISTACK_RTI)
                                                              ;Transmit XON
0047B0 7F47B0 18 0B 11 00 CF          SCI_ISR_TX_5            MOVB    #SCI_XON, SCIDRL
0047B5 7F47B5 20 05                                           JOB     SCI_ISR_TX_7                            ;schedule reminder
                                                              ;Transmit XOFF
0047B7 7F47B7 18 0B 13 00 CF          SCI_ISR_TX_6            MOVB    #SCI_XOFF, SCIDRL
                                                              ;Schedule reminder
0047BC 7F47BC 18 03 1D CD 10 54       SCI_ISR_TX_7            MOVW    #SCI_XONXOFF_REMINDER, SCI_XONXOFF_REMCNT
0047C2 7F47C2 MACRO                                           SCI_START_DELAY                                 ;start delay
                                      ;#Start delay (don't retrigger) (approx. 2 SCI frames)                           (SCI_START_DELAY)
                                      ; args:   none                                                                   (SCI_START_DELAY)
                                      ; SSTACK: none                                                                   (SCI_START_DELAY)
                                      ;         X, and Y are preserved                                                 (SCI_START_DELAY)
0047C2 7F47C2 4E 4C 08 1F                                     BRSET   TIE, #(1<<SCI_DLY_OC), DONE             ;skip if delay has already been triggered (SCI_START_DELAY)
0047C6 7F47C6 MACRO                                           SCI_INIT_DELAY                                           (SCI_START_DELAY)
                                      ;#Start delay (always retrigger) (approx. 2 SCI frames)                          (SCI_START_DELAY/SCI_INIT_DELAY)
                                      ; args:   none                                                                   (SCI_START_DELAY/SCI_INIT_DELAY)
                                      ; SSTACK: none                                                                   (SCI_START_DELAY/SCI_INIT_DELAY)
                                      ;         X, and Y are preserved                                                 (SCI_START_DELAY/SCI_INIT_DELAY)
0047C6 7F47C6 MACRO                                           SCI_RESET_DELAY                                          (SCI_START_DELAY/SCI_INIT_DELAY)
                                      ;#RESET delay (approx. 2 SCI frames)                                             (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY)
                                      ; args:   none                                                                   (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY)
                                      ; SSTACK: none                                                                   (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY)
                                      ;         X, and Y are preserved                                                 (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY)
0047C6 7F47C6 MACRO                                           TIM_CLRIF       SCI_DLY_OC                               (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY)
                                      ;#Clear one interrupt flag                                                       (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_CLRIF)
                                      ; args: 1: channel number                                                        (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_CLRIF)
                                      ; SSTACK: none                                                                   (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_CLRIF)
                                      ;         X, Y, and D are preserved                                              (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_CLRIF)
0047C6 7F47C6 MACRO                                           TIM_MULT_CLRIF  (1<<\1)                                  (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_CLRIF)
                                      ;#Clear multiple interrupt flags                                                 (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; args: 1: channel mask                                                          (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; SSTACK: none                                                                   (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
                                      ;         X, Y, and D are preserved                                              (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
0047C6 7F47C6 18 0B 08 00 4E                                  MOVB    #\1, TFLG1                                       (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_CLRIF/TIM_MULT_CLRIF)
0047CB 7F47CB DC C8                                           LDD     SCIBDH                                  ;retrigger delay (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY)
0047CD 7F47CD 04 60 08                                        TBNE    A, MAX_DELAY                            ;max. delay ($FFFF) exceeded (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY)
0047D0 7F47D0 B7 10                                           TFR     B, A                                    ;determine delay (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY)
0047D2 7F47D2 C7                                              CLRB                                                     (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY)
0047D3 7F47D3 MACRO                                           TIM_SET_DLY_D   SCI_DLY_OC                      ;update OC count (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY)
                                      ;#Setup timer delay                                                              (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_SET_DLY_D)
                                      ; args: 1: channel number                                                        (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_SET_DLY_D)
                                      ;       D: delay (in bus cycles)                                                 (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_SET_DLY_D)
                                      ; SSTACK: none                                                                   (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_SET_DLY_D)
                                      ;         X, and Y are preserved                                                 (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_SET_DLY_D)
0047D3 7F47D3 49                                              LSRD                                                     (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_SET_DLY_D)
0047D4 7F47D4 D3 44                                           ADDD    TCNT                                             (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_SET_DLY_D)
0047D6 7F47D6 5C 56                                           STD     (TC0+(2*\1))                                     (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY/TIM_SET_DLY_D)
0047D8 7F47D8 -> $47D8                MAX_DELAY               EQU     *                                                (SCI_START_DELAY/SCI_INIT_DELAY/SCI_RESET_DELAY)
0047D8 7F47D8 MACRO                                           TIM_EN          SCI_DLY_OC                               (SCI_START_DELAY/SCI_INIT_DELAY)
                                      ;#Enable one timer channel                                                       (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN)
                                      ; args: 1: channel number                                                        (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN)
                                      ; SSTACK: none                                                                   (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN)
                                      ;         X, Y, and D are preserved                                              (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN)
0047D8 7F47D8 MACRO                                           TIM_MULT_EN     ($1<<\1)                                 (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN)
                                                              ;TTOV                                                    (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;7 6 5 4 3 2 1 0                                (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;MOVW   #%0000000000000000, TCTL1       ;keep at zero, for configuration with BSET (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;      D S S S S               ;  00=no OC      (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;      E C C C C               ;  01=toggle     (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;      L I I I I               ;  10=clear      (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;      A T B B B               ;  11=set        (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;      Y O D D D                                (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;          T N P                                (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;          O E E                                (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;7 6 5 4 3 2 1 0                                (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;MOVW   #%0000000000000000, TCTL3       ;keep at zero, for configuration with BSET (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;      D S S S S               ;  00=no capture (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;      E C C C C               ;  01=posedge    (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;      L I I I I               ;  10=negedge    (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;      A T B B B               ;  11=any edge   (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;      Y O D D D                                (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;          T N P                                (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                                       ;          O E E                                (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;TIE                                                     (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;TSCR2                                                   (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;TFLG1                                                   (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;TFLG2                                                   (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;TC0 ... TC7                                             (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;PACTL                                                   (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;PAFLG                                                   (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                                              ;PACN0 ... PACN3                                         (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                      ;#Enable multiple timer channels                                                 (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                      ; args: 1: channels  mask                                                        (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                      ; SSTACK: none                                                                   (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
                                      ;         X, Y, and D are preserved                                              (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
0047D8 7F47D8 18 0B 08 00 4E                                  MOVB    #\1, TFLG1                      ;clear interrupt flags (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
0047DD 7F47DD 4C 4C 08                                        BSET    TIE, #\1                        ;enable interrupts (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
0047E0 7F47E0 18 0B A0 00 46                                  MOVB    #(TEN|TSFRZ), TSCR1             ;enable timer    (SCI_START_DELAY/SCI_INIT_DELAY/TIM_EN/TIM_MULT_EN)
0047E5 7F47E5 -> $47E5                DONE                    EQU     *                                                (SCI_START_DELAY)
0047E5 7F47E5 20 BC                                           JOB     SCI_ISR_TX_4                            ;done
                                      ;#Receive/Transmit ISR (Common ISR entry point for the SCI)
0047E7 7F47E7 -> $47E7                SCI_ISR_RXTX            EQU     *
                                                              ;Common entry point for all SCI interrupts
                                                              ;Load flags
0047E7 7F47E7 96 CC                                           LDAA    SCISR1                                  ;load status flags into accu A
                                                                                                              ;SCI Flag order:
                                                                                                              ; 7:TDRE (Transmit Data Register Empty Flag)
                                                                                                              ; 6:TC   (TransmitCompleteFlag)
                                                                                                              ; 5:RDRF (Receive Data Register Full Flag)
                                                                                                              ; 4:IDLE (Idle Line Flag)
                                                                                                              ; 3:OR   (Overrun Flag)
                                                                                                              ; 2:NF   (Noise Flag)
                                                                                                              ; 1:FE   (Framing Error Flag)
                                                                                                              ; 0:PE   (Parity Error Flag)
                                                              ;Check for RX data (status flags in A)
0047E9 7F47E9 85 28                                           BITA    #(RDRFF|OR)                             ;go to receive handler if receive buffer
0047EB 7F47EB 18 27 FF 5C                                     BEQ     SCI_ISR_TX                              ; is full or if an overrun has occured
                                      ;#Receive ISR (status flags in A)
0047EF 7F47EF D6 CF                   SCI_ISR_RX              LDAB    SCIDRL                                  ;load receive data into accu B (clears flags)
0047F1 7F47F1 84 0F                                           ANDA    #(OR|NF|FE|PF)                          ;only maintain relevant error flags
                                                              ;Check character is escaped (status flags in A, RX data in B)
0047F3 7F47F3 1E 10 25 04 41                                  BRSET   SCI_FLGS, #SCI_FLG_RX_ESC, SCI_ISR_RX_5 ;charakter is escaped (skip detection)
                                                              ;Transfer SWOR flag to current error flags (status flags in A, RX data in B)
0047F8 7F47F8 1F 10 25 10 0E                                  BRCLR   SCI_FLGS, #SCI_FLG_SWOR, SCI_ISR_RX_1   ;SWOR bit not set
0047FD 7F47FD 8A 10                                           ORAA    #SCI_FLG_SWOR                           ;set SWOR bit in accu A
0047FF 7F47FF 1D 10 25 10                                     BCLR    SCI_FLGS, #SCI_FLG_SWOR                 ;clear SWOR bit in variable
                                                              ;Check for control characters (status flags in A, RX data in B)
004803 7F4803 85 1F                                           BITA    #(SCI_FLG_SWOR|OR|NF|FE|PF)             ;don't handle control characters with errors
004805 7F4805 26 04                                           BNE     <SCI_ISR_RX_1                           ;queue data
004807 7F4807 C1 13                                           CMPB    #SCI_XOFF
004809 7F4809 2F 5A                                           BLE     SCI_ISR_RX_8                            ;determine control signal
                                                              ;Place data into RX queue (status flags in A, RX data in B)
00480B 7F480B B7 46                   SCI_ISR_RX_1            TFR     D, Y                                    ;flags:data -> Y
00480D 7F480D CE 10 26                                        LDX     #SCI_RXBUF                              ;buffer pointer -> X
004810 7F4810 FC 10 46                                        LDD     SCI_RXBUF_IN                            ;in:out -> A:B
004813 7F4813 6D E4                                           STY     A,X
004815 7F4815 8B 02                                           ADDA    #2
004817 7F4817 84 1F                                           ANDA    #SCI_RXBUF_MASK
004819 7F4819 18 17                                           CBA
00481B 7F481B 27 56                                           BEQ     <SCI_ISR_RX_9                           ;buffer overflow
00481D 7F481D 7A 10 46                                        STAA    SCI_RXBUF_IN                            ;update IN pointer
                                                              ;Check if flow control must be applied (in:out in D, flags:data in Y)
004820 7F4820 18 16                                           SBA
004822 7F4822 84 1F                                           ANDA    #SCI_RXBUF_MASK
004824 7F4824 81 10                                           CMPA    #SCI_RX_FULL_LEVEL
004826 7F4826 24 4F                                           BHS     <SCI_ISR_RX_10                          ;buffer is getting full
004828 7F4828 -> $4828                SCI_ISR_RX_2            EQU     *
                                                              ;Check for RX errors (flags:data in Y)
004828 7F4828 85 07                                           BITA    #(NF|FE|PF)                             ;check for noise, frame errors, parity errors
00482A 7F482A 26 58                                           BNE     <SCI_ISR_RX_12                          ;RX error detected
00482C 7F482C -> $482C                SCI_ISR_RX_3            EQU     *
                                                              ;Done
00482C 7F482C MACRO                   SCI_ISR_RX_4            ISTACK_RTI
                                      ;#Return from interrupt                                                          (ISTACK_RTI)
                                      ; args:   none                                                                   (ISTACK_RTI)
                                      ; ISTACK: -9 (S12)/-10 (S12X)                                                    (ISTACK_RTI)
                                      ;         X, Y, and D are pulled from the interrupt stack                        (ISTACK_RTI)
                                                              ;Verify SP at the end of each ISR                        (ISTACK_RTI)
00482C 7F482C 8F 10 01                                        CPS     #ISTACK_TOP                                      (ISTACK_RTI)
00482F 7F482F 25 06                                           BLO     OF                                               (ISTACK_RTI)
004831 7F4831 8F 10 1C                                        CPS     #ISTACK_BOTTOM-ISTACK_FRAME_SIZE                 (ISTACK_RTI)
004834 7F4834 22 02                                           BHI     UF                                               (ISTACK_RTI)
                                                              ;End ISR                                                 (ISTACK_RTI)
004836 7F4836 0B                                              RTI                                                      (ISTACK_RTI)
004837 7F4837 00                      OF                      BGND                                                     (ISTACK_RTI)
004838 7F4838 00                      UF                      BGND                                                     (ISTACK_RTI)
                                                              ;Queue escape character (status flags in A, RX data in B)
004839 7F4839 B7 46                   SCI_ISR_RX_5            TFR     D, Y
00483B 7F483B CE 10 26                                        LDX     #SCI_RXBUF
00483E 7F483E FC 10 46                                        LDD     SCI_RXBUF_IN                            ;in:out -> A:B
004841 7F4841 1F 10 25 10 07                                  BRCLR   SCI_FLGS, #SCI_FLG_SWOR, SCI_ISR_RX_6   ;no SWOR occured
004846 7F4846 18 00 E4 10 10                                  MOVW    #((SCI_FLG_SWOR<<8)|SCI_DLE), A,X       ;queue DLE with SWOR flag
00484B 7F484B 20 05                                           JOB     SCI_ISR_RX_7
00484D 7F484D 18 00 E4 00 10          SCI_ISR_RX_6            MOVW    #SCI_DLE, A,X                           ;queue DLE without SWOR flag
004852 7F4852 1D 10 25 14             SCI_ISR_RX_7            BCLR    SCI_FLGS, #(SCI_FLG_SWOR|SCI_FLG_RX_ESC) ;clear SWOR and RX_ESC flags
004856 7F4856 8B 02                                           ADDA    #2
004858 7F4858 84 1F                                           ANDA    #SCI_RXBUF_MASK
00485A 7F485A 18 17                                           CBA
00485C 7F485C 27 15                                           BEQ     <SCI_ISR_RX_9                           ;buffer overflow
00485E 7F485E 7A 10 46                                        STAA    SCI_RXBUF_IN                            ;update IN pointer
004861 7F4861 B7 64                                           TFR     Y, D
004863 7F4863 20 A6                                           JOB     SCI_ISR_RX_1                            ;queue data
                                                              ;Determine control signal (status flags in A, RX data in B)
004865 7F4865 -> $4865                SCI_ISR_RX_8            EQU     *
                                                              ;Check for XON/XOFF (status flags in A, RX data in B)
004865 7F4865 C1 13                                           CMPB    #SCI_XOFF
004867 7F4867 27 1D                                           BEQ     <SCI_ISR_RX_15                          ;XOFF received
004869 7F4869 C1 11                                           CMPB    #SCI_XON
00486B 7F486B 27 1F                                           BEQ     <SCI_ISR_RX_16                          ;XON received
                                                              ;Check for DLE (status flags in A, RX data in B)
00486D 7F486D C1 10                                           CMPB    #SCI_DLE
00486F 7F486F 27 26                                           BEQ     <SCI_ISR_RX_17                          ;DLE received
004871 7F4871 20 98                                           JOB     SCI_ISR_RX_1                            ;queue data
                                                              ;Buffer overflow (flags:data in Y)
004873 7F4873 1C 10 25 10             SCI_ISR_RX_9            BSET    SCI_FLGS, #SCI_FLG_SWOR                 ;set overflow flag
                                                              ;Signal buffer full (flags:data in Y)
                                                              ;Transmit XON/XOFF (flags:data in Y)
004877 7F4877 MACRO                   SCI_ISR_RX_10           SCI_SEND_XONXOFF
                                      ;#Send XON/XOFF symbol                                                           (SCI_SEND_XONXOFF)
                                      ; args:   none                                                                   (SCI_SEND_XONXOFF)
                                      ; SSTACK: none                                                                   (SCI_SEND_XONXOFF)
                                      ;         X, Y, and D are preserved                                              (SCI_SEND_XONXOFF)
004877 7F4877 1C 10 25 80                                     BSET    SCI_FLGS, #SCI_FLG_SEND_XONXOFF         ;request transmission of XON/XOFF (SCI_SEND_XONXOFF)
00487B 7F487B 18 0B AC 00 CB                                  MOVB    #(TXIE|RIE|TE|RE), SCICR2               ;enable TX interrupts (SCI_SEND_XONXOFF)
004880 7F4880 -> $4880                SCI_ISR_RX_11           EQU     *
004880 7F4880 85 07                                           BITA    #(NF|FE|PF)                             ;check for noise, frame errors, parity errors
004882 7F4882 27 A8                                           BEQ     <SCI_ISR_RX_3                           ;stop error signaling
                                                              ;RX error detected
004884 7F4884 -> $4884                SCI_ISR_RX_12           EQU     *
004884 7F4884 20 A6                   SCI_ISR_RX_13           JOB     SCI_ISR_RX_4                            ;done
                                                              ;Handle XOFF
004886 7F4886 1C 10 25 08             SCI_ISR_RX_15           BSET    SCI_FLGS, #SCI_FLG_TX_BLOCKED           ;stop transmitting
00488A 7F488A 20 F8                                           JOB     SCI_ISR_RX_13                           ;done
                                                              ;Handle XON
00488C 7F488C 1C 10 25 08             SCI_ISR_RX_16           BSET    SCI_FLGS, #SCI_FLG_TX_BLOCKED           ;allow transmissions
004890 7F4890 18 0B AC 00 CB                                  MOVB    #(TXIE|RIE|TE|RE), SCICR2               ;enable TX interrupt
004895 7F4895 20 ED                                           JOB     SCI_ISR_RX_13                           ;done
                                                              ;Handle DLE
004897 7F4897 1C 10 25 04             SCI_ISR_RX_17           BSET    SCI_FLGS, #SCI_FLG_RX_ESC               ;remember start of escape sequence
00489B 7F489B FC 10 46                                        LDD     SCI_RXBUF_IN                            ;in:out -> A:B
00489E 7F489E 84 1F                                           ANDA    #SCI_RXBUF_MASK
0048A0 7F48A0 81 0E                                           CMPA    #(SCI_RX_FULL_LEVEL-2)
0048A2 7F48A2 24 D3                                           BHS     <SCI_ISR_RX_10                          ;buffer is getting full
0048A4 7F48A4 20 DA                                           JOB     SCI_ISR_RX_11                           ;check for RX errors
0048A6 7F48A6 -> $48A6                SCI_CODE_END            EQU     *
0048A6 7F48A6 -> $7F48A6              SCI_CODE_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
004BB8 7F4BB8                                                 ORG     SCI_TABS_START, SCI_TABS_START_LIN
004BB8 7F4BB8                                                 ALIGN   1, $FF
                                                              ;List of prescaler values
004BB8 7F4BB8 -> $4BB8                SCI_BTAB                EQU     *
004BB8 7F4BB8 02 8B                                           DW      SCI_4800
004BBA 7F4BBA 01 B2                                           DW      SCI_7200
004BBC 7F4BBC 01 46                                           DW      SCI_9600
004BBE 7F4BBE 00 D9                                           DW      SCI_14400
004BC0 7F4BC0 00 A3                                           DW      SCI_19200
004BC2 7F4BC2 00 6D                                           DW      SCI_28800
004BC4 7F4BC4 00 51                                           DW      SCI_38400
004BC6 7F4BC6 00 36                                           DW      SCI_57600
004BC8 7F4BC8 -> $4BC8                SCI_BTAB_END            EQU     *
004BC8 7F4BC8 -> $4BC8                SCI_TABS_END            EQU     *
004BC8 7F4BC8 -> $7F4BC8              SCI_TABS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - STRING - String Printing routines                                #
                                      ;###############################################################################
                                      ;#    Copyright 2010 Dirk Heisswolf                                            #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module implements various print routines for the SCI driver:        #
                                      ;#    STRING_PRINT_NB       - print a string (non-blocking)                    #
                                      ;#    STRING_PRINT_BL       - print a string (blocking)                        #
                                      ;#    STRING_FILL_NB        - print a number of filler characters (non-bl.)    #
                                      ;#    STRING_FILL_BL        - print a number of filler characters (blocking)   #
                                      ;#    STRING_UPPER          - convert a character to upper case                #
                                      ;#    STRING_LOWER          - convert a character to lower case                #
                                      ;#    STRING_PRINTABLE      - make character printable                         #
                                      ;#    STRING_SKIP_WS        - skip whitespace characters                       #
                                      ;#    STRING_SKIP_AND_COUNT - determine the length of a string                 #
                                      ;#                                                                             #
                                      ;#    Each of these functions has a coresponding macro definition              #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    SCI    - SCI driver                                                      #
                                      ;#    SSTACK - Subroutine Stack Handler                                        #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    Apr  4, 2010                                                             #
                                      ;#      - Initial release                                                      #
                                      ;#    Apr 29, 2010                                                             #
                                      ;#      - Added macros "STRING_UPPER_B" and "STRING_LOWER_B"                   #
                                      ;#    Jul 29, 2010                                                             #
                                      ;#      - Fixed STRING_SINTCNT                                                 #
                                      ;#    July 2, 2012                                                             #
                                      ;#      - Added support for linear PC                                          #
                                      ;#      - Added non-blocking functions                                         #
                                      ;#    June 10, 2013                                                            #
                                      ;#      - Turned STRING_UPPER and STRING_LOWER into subroutines                #
                                      ;#      - Added STRING_SKIP_WS                                                 #
                                      ;#    June 11, 2013                                                            #
                                      ;#      - Added STRING_LENGTH                                                  #
                                      ;#    June 11, 2013                                                            #
                                      ;#      - Added STRING_LENGTH                                                  #
                                      ;#    October 31, 2013                                                         #
                                      ;#      - Replaced STRING_LENGTH by STRING_SKIP_AND_COUNT                      #
                                      ;#    February 5, 2014                                                         #
                                      ;#      - Added #ifdef's for rarely used functions STRING_FILL_BL,             #
                                      ;#        STRING_FILL_NB, STRING_SKIP_WS, and STRING_LOWER                     #
                                      ;#    March 3, 2014                                                            #
                                      ;#      - Added macro STRING_IS_PRINTABLE                                      #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Blocking subroutines
                                      ;--------------------
                                      ;Enable blocking subroutines
004BC8 7F4BC8 -> $0001                STRING_BLOCKING_ON      EQU     1       ;blocking functions enabled by default
                                      ;Enable rarely used subroutines
                                      ;STRING_FILL_BL and STRING_FILL_NB
                                      ;STRING_SKIP_WS
004BC8 7F4BC8 -> $0001                STRING_SKIP_WS_OFF      EQU     1       ;STRING_SKIP_WS disabled by default
                                      ;STRING_LOWER
004BC8 7F4BC8 -> $0001                STRING_LOWER_OFF        EQU     1       ;STRING_LOWER disabled by default
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;#ASCII code
004BC8 7F4BC8 -> $0007                STRING_SYM_BEEP         EQU     $07     ;acoustic signal
004BC8 7F4BC8 -> $0008                STRING_SYM_BACKSPACE    EQU     $08     ;backspace symbol
004BC8 7F4BC8 -> $0009                STRING_SYM_TAB          EQU     $09     ;tab symbol
004BC8 7F4BC8 -> $000A                STRING_SYM_LF           EQU     $0A     ;line feed symbol
004BC8 7F4BC8 -> $000D                STRING_SYM_CR           EQU     $0D     ;carriage return symbol
004BC8 7F4BC8 -> $0020                STRING_SYM_SPACE        EQU     $20     ;space (first printable ASCII character)
004BC8 7F4BC8 -> $007E                STRING_SYM_TILDE        EQU     $7E     ;"~" (last printable ASCII character)
004BC8 7F4BC8 -> $007F                STRING_SYM_DEL          EQU     $7F     ;delete symbol
                                      ;#String ternination
004BC8 7F4BC8 -> $0080                STRING_STRING_TERM      EQU     $80     ;MSB for string termination
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001056 0FD056                                                 ORG     STRING_VARS_START, STRING_VARS_START_LIN
001056 0FD056 -> $1056                STRING_VARS_END         EQU     *
001056 0FD056 -> $FD056               STRING_VARS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
0048A6 7F48A6                                                 ORG     STRING_CODE_START, STRING_CODE_START_LIN
                                      ;#Basic print function - non-blocking
                                      ; args:   X:      start of the string
                                      ; result: X;      remaining string (points to the byte after the string, if successful)
                                      ;         C-flag: set if successful
                                      ; SSTACK: 8 bytes
                                      ;         Y and D are preserved
0048A6 7F48A6 -> $48A6                STRING_PRINT_NB         EQU     *
                                                              ;Save registers (string pointer in X)
0048A6 7F48A6 37                                              PSHB                            ;save B
                                                              ;Print characters (string pointer in X)
0048A7 7F48A7 E6 30                   STRING_PRINT_NB_1       LDAB    1,X+                    ;get next ASCII character
0048A9 7F48A9 2B 19                                           BMI     STRING_PRINT_NB_3       ;last character
0048AB 7F48AB 16 44 80                                        JOBSR   SCI_TX_NB               ;print character non blocking (SSTACK: 5 bytes)
0048AE 7F48AE 25 F7                                           BCS     STRING_PRINT_NB_1
                                                              ;Adjust string pointer (next string pointer in X)
0048B0 7F48B0 1A 1F                   STRING_PRINT_NB_2       LEAX    -1,X
                                                              ;Restore registers (string pointer in X)
0048B2 7F48B2 MACRO                                           SSTACK_PREPULL  3
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
0048B2 7F48B2 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0048B2 7F48B2 8F 10 0A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0048B5 7F48B5 18 25 FB A4                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0048B9 7F48B9 8F 10 22                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0048BC 7F48BC 18 22 FB A3                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0048C0 7F48C0 -> $4463                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0048C0 7F48C0 -> $445D                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0048C0 7F48C0 33                                              PULB
                                                              ;Signal failure (string pointer in X)
0048C1 7F48C1 10 FE                                           CLC
                                                              ;Done
0048C3 7F48C3 3D                                              RTS
                                                              ;Print last character (next string pointer in X, last char in B)
0048C4 7F48C4 C4 7F                   STRING_PRINT_NB_3       ANDB    #$7F                    ;remove termination bit
0048C6 7F48C6 16 44 80                                        JOBSR   SCI_TX_NB               ;print character non blocking (SSTACK: 5 bytes)
0048C9 7F48C9 24 E5                                           BCC     STRING_PRINT_NB_2
                                                              ;Restore registers (next string pointer in X)
0048CB 7F48CB MACRO                                           SSTACK_PREPULL  3
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
0048CB 7F48CB MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0048CB 7F48CB 8F 10 0A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0048CE 7F48CE 18 25 FB 8B                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0048D2 7F48D2 8F 10 22                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0048D5 7F48D5 18 22 FB 8A                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0048D9 7F48D9 -> $4463                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0048D9 7F48D9 -> $445D                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0048D9 7F48D9 33                                              PULB
                                                              ;Signal success (next string pointer in X)
0048DA 7F48DA 14 01                                           SEC
                                                              ;Done
0048DC 7F48DC 3D                                              RTS
                                      ;#Basic print function - blocking
                                      ; args:   X:      start of the string
                                      ; result: X;      points to the byte after the string
                                      ; SSTACK: 10 bytes
                                      ;         Y and D are preserved
0048DD 7F48DD -> $48DD                STRING_PRINT_BL         EQU     *
0048DD 7F48DD MACRO                                           SCI_MAKE_BL     STRING_PRINT_NB, 10
                                      ;# Macros for internal use                                                       (SCI_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (SCI_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (SCI_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (SCI_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (SCI_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (SCI_MAKE_BL)
                                                              ;Disable interrupts                                      (SCI_MAKE_BL)
0048DD 7F48DD 14 10                   LOOP                    SEI                                                      (SCI_MAKE_BL)
                                                              ;Call non-blocking function                              (SCI_MAKE_BL)
0048DF 7F48DF                                                 //SSTACK_PREPUSH        \2                               (SCI_MAKE_BL)
0048DF 7F48DF 07 C5                                           JOBSR   \1                                               (SCI_MAKE_BL)
0048E1 7F48E1 24 11                                           BCC     WAIT            ;function unsuccessful           (SCI_MAKE_BL)
                                                              ;Enable interrupts                                       (SCI_MAKE_BL)
0048E3 7F48E3 10 EF                                           CLI                                                      (SCI_MAKE_BL)
                                                              ;Done                                                    (SCI_MAKE_BL)
0048E5 7F48E5 MACRO                                           SSTACK_PREPULL  2                                        (SCI_MAKE_BL)
                                      ;#Check stack before pull operation                                              (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPULL)
0048E5 7F48E5 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0048E5 7F48E5 8F 10 0A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0048E8 7F48E8 18 25 FB 71                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0048EC 7F48EC 8F 10 23                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0048EF 7F48EF 18 22 FB 70                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0048F3 7F48F3 -> $4463                UF                      EQU     SSTACK_UF                                        (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0048F3 7F48F3 -> $445D                OF                      EQU     SSTACK_OF                                        (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0048F3 7F48F3 3D                                              RTS                                                      (SCI_MAKE_BL)
                                                              ;Wait for next interrupt                                 (SCI_MAKE_BL)
0048F4 7F48F4 MACRO                   WAIT                    ISTACK_WAIT                                              (SCI_MAKE_BL)
                                      ;#Wait until any interrupt has been serviced                                     (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; ISTACK: none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Verify SP before runnung ISRs                           (SCI_MAKE_BL/ISTACK_WAIT)
0048F4 7F48F4 8F 10 0A                                        CPS     #ISTACK_TOP+ISTACK_FRAME_SIZE                    (SCI_MAKE_BL/ISTACK_WAIT)
0048F7 7F48F7 25 13                                           BLO     OF ;ISTACK_OF                                    (SCI_MAKE_BL/ISTACK_WAIT)
0048F9 7F48F9 8F 10 25                                        CPS     #ISTACK_BOTTOM                                   (SCI_MAKE_BL/ISTACK_WAIT)
0048FC 7F48FC 22 0F                                           BHI     UF ;ISTACK_UF                                    (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (SCI_MAKE_BL/ISTACK_WAIT)
0048FE 7F48FE MACRO                                           COP_SERVICE                     ;already taken care of by WAI (SCI_MAKE_BL/ISTACK_WAIT)
                                                                                                              ; no window mode                        (~WCOP) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP and RTI stop when BDM is active   (RSBCK) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP is disabled       (~CR2|~CR1|~CR0) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                      ;#Service COP                                                                    (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
0048FE 7F48FE 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
004903 7F4903 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
004908 7F4908 10 EF                                           CLI                                                      (SCI_MAKE_BL/ISTACK_WAIT)
00490A 7F490A 20 02                                           JOB     DONE                                             (SCI_MAKE_BL/ISTACK_WAIT)
00490C 7F490C 00                      OF                      BGND                                                     (SCI_MAKE_BL/ISTACK_WAIT)
00490D 7F490D 00                      UF                      BGND                                                     (SCI_MAKE_BL/ISTACK_WAIT)
00490E 7F490E -> $490E                DONE                    EQU     *                                                (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Try again                                               (SCI_MAKE_BL)
00490E 7F490E MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_MAKE_BL)
                                      ;#Check stack before push operation                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
00490E 7F490E MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00490E 7F490E 8F 10 14                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004911 7F4911 18 25 FB 48                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004915 7F4915 8F 10 25                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004918 7F4918 18 22 FB 47                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00491C 7F491C -> $4463                UF                      EQU     SSTACK_UF                                        (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00491C 7F491C -> $445D                OF                      EQU     SSTACK_OF                                        (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00491C 7F491C 20 BF                                           JOB     LOOP                                             (SCI_MAKE_BL)
                                      ;#Print a number of filler characters - non-blocking (uncomment if needed)
                                      ; args:   A: number of characters to be printed
                                      ;         B: filler character
                                      ; result: A: remaining space characters to be printed (0 if successfull)
                                      ;         C-flag: set if successful
                                      ; result: none
                                      ; SSTACK: 7 bytes
                                      ;         X, Y and B are preserved
00491E 7F491E -> $491E                STRING_FILL_NB          EQU     *
                                                              ;Print characters (requested spaces in A)
00491E 7F491E 04 40 08                                        TBEQ    A, STRING_FILL_NB_2     ;nothing to do
004921 7F4921 16 44 80                STRING_FILL_NB_1        JOBSR   SCI_TX_NB               ;print character non blocking (SSTACK: 5 bytes)
004924 7F4924 24 14                                           BCC     STRING_FILL_NB_3        ;unsuccessful
004926 7F4926 04 30 F8                                        DBNE    A, STRING_FILL_NB_1
                                                              ;Restore registers (remaining spaces in A)
004929 7F4929 MACRO                   STRING_FILL_NB_2        SSTACK_PREPULL  2
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
004929 7F4929 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004929 7F4929 8F 10 0A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00492C 7F492C 18 25 FB 2D                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004930 7F4930 8F 10 23                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004933 7F4933 18 22 FB 2C                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004937 7F4937 -> $4463                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004937 7F4937 -> $445D                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                              ;Signal success (remaining spaces in A)
004937 7F4937 14 01                                           SEC
                                                              ;Done
004939 7F4939 3D                                              RTS
                                                              ;Restore registers (remaining spaces in A)
00493A 7F493A MACRO                   STRING_FILL_NB_3        SSTACK_PREPULL  2
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00493A 7F493A MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00493A 7F493A 8F 10 0A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00493D 7F493D 18 25 FB 1C                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004941 7F4941 8F 10 23                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004944 7F4944 18 22 FB 1B                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004948 7F4948 -> $4463                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004948 7F4948 -> $445D                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                              ;Signal failure (remaining spaces in A)
004948 7F4948 10 FE                                           CLC
                                                              ;Done
00494A 7F494A 3D                                              RTS
                                      ;#Print a number of filler characters - blocking (uncomment if needed)
                                      ; args:   A: number of characters to be printed
                                      ;         B: filler character
                                      ; result: A: $00
                                      ; SSTACK: 9 bytes
                                      ;         X, Y and B are preserved
00494B 7F494B -> $494B                STRING_FILL_BL          EQU     *
00494B 7F494B MACRO                                           SCI_MAKE_BL     STRING_FILL_NB, 7
                                      ;# Macros for internal use                                                       (SCI_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (SCI_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (SCI_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (SCI_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (SCI_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (SCI_MAKE_BL)
                                                              ;Disable interrupts                                      (SCI_MAKE_BL)
00494B 7F494B 14 10                   LOOP                    SEI                                                      (SCI_MAKE_BL)
                                                              ;Call non-blocking function                              (SCI_MAKE_BL)
00494D 7F494D                                                 //SSTACK_PREPUSH        \2                               (SCI_MAKE_BL)
00494D 7F494D 07 CF                                           JOBSR   \1                                               (SCI_MAKE_BL)
00494F 7F494F 24 11                                           BCC     WAIT            ;function unsuccessful           (SCI_MAKE_BL)
                                                              ;Enable interrupts                                       (SCI_MAKE_BL)
004951 7F4951 10 EF                                           CLI                                                      (SCI_MAKE_BL)
                                                              ;Done                                                    (SCI_MAKE_BL)
004953 7F4953 MACRO                                           SSTACK_PREPULL  2                                        (SCI_MAKE_BL)
                                      ;#Check stack before pull operation                                              (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPULL)
004953 7F4953 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SCI_MAKE_BL/SSTACK_PREPULL)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004953 7F4953 8F 10 0A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004956 7F4956 18 25 FB 03                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00495A 7F495A 8F 10 23                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00495D 7F495D 18 22 FB 02                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004961 7F4961 -> $4463                UF                      EQU     SSTACK_UF                                        (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004961 7F4961 -> $445D                OF                      EQU     SSTACK_OF                                        (SCI_MAKE_BL/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004961 7F4961 3D                                              RTS                                                      (SCI_MAKE_BL)
                                                              ;Wait for next interrupt                                 (SCI_MAKE_BL)
004962 7F4962 MACRO                   WAIT                    ISTACK_WAIT                                              (SCI_MAKE_BL)
                                      ;#Wait until any interrupt has been serviced                                     (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; ISTACK: none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Verify SP before runnung ISRs                           (SCI_MAKE_BL/ISTACK_WAIT)
004962 7F4962 8F 10 0A                                        CPS     #ISTACK_TOP+ISTACK_FRAME_SIZE                    (SCI_MAKE_BL/ISTACK_WAIT)
004965 7F4965 25 13                                           BLO     OF ;ISTACK_OF                                    (SCI_MAKE_BL/ISTACK_WAIT)
004967 7F4967 8F 10 25                                        CPS     #ISTACK_BOTTOM                                   (SCI_MAKE_BL/ISTACK_WAIT)
00496A 7F496A 22 0F                                           BHI     UF ;ISTACK_UF                                    (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (SCI_MAKE_BL/ISTACK_WAIT)
00496C 7F496C MACRO                                           COP_SERVICE                     ;already taken care of by WAI (SCI_MAKE_BL/ISTACK_WAIT)
                                                                                                              ; no window mode                        (~WCOP) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP and RTI stop when BDM is active   (RSBCK) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP is disabled       (~CR2|~CR1|~CR0) (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
                                      ;#Service COP                                                                    (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
00496C 7F496C 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
004971 7F4971 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (SCI_MAKE_BL/ISTACK_WAIT/COP_SERVICE)
004976 7F4976 10 EF                                           CLI                                                      (SCI_MAKE_BL/ISTACK_WAIT)
004978 7F4978 20 02                                           JOB     DONE                                             (SCI_MAKE_BL/ISTACK_WAIT)
00497A 7F497A 00                      OF                      BGND                                                     (SCI_MAKE_BL/ISTACK_WAIT)
00497B 7F497B 00                      UF                      BGND                                                     (SCI_MAKE_BL/ISTACK_WAIT)
00497C 7F497C -> $497C                DONE                    EQU     *                                                (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Try again                                               (SCI_MAKE_BL)
00497C 7F497C MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_MAKE_BL)
                                      ;#Check stack before push operation                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPUSH)
00497C 7F497C MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (SCI_MAKE_BL/SSTACK_PREPUSH)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00497C 7F497C 8F 10 11                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00497F 7F497F 18 25 FA DA                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004983 7F4983 8F 10 25                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004986 7F4986 18 22 FA D9                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00498A 7F498A -> $4463                UF                      EQU     SSTACK_UF                                        (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00498A 7F498A -> $445D                OF                      EQU     SSTACK_OF                                        (SCI_MAKE_BL/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00498A 7F498A 20 BF                                           JOB     LOOP                                             (SCI_MAKE_BL)
                                      ;#Convert a lower case character to upper case
                                      ; args:   B: ASCII character (w/ or w/out termination)
                                      ; result: B: lower case ASCII character
                                      ; SSTACK: 2 bytes
                                      ;         X, Y, and A are preserved
00498C 7F498C -> $498C                STRING_UPPER            EQU     *
00498C 7F498C C1 61                                           CMPB    #$61            ;"a"
00498E 7F498E 25 1C                                           BLO     STRING_UPPER_2
004990 7F4990 C1 7A                                           CMPB    #$7A            ;"z"
004992 7F4992 23 08                                           BLS     STRING_UPPER_1
004994 7F4994 C1 EA                                           CMPB    #$EA            ;"a"+$80
004996 7F4996 25 14                                           BLO     STRING_UPPER_2
004998 7F4998 C1 FA                                           CMPB    #$FA            ;"z"+$80
00499A 7F499A 22 10                                           BHI     STRING_UPPER_2
00499C 7F499C C0 20                   STRING_UPPER_1          SUBB    #$20            ;"a"-"A"
                                                              ;Done
00499E 7F499E MACRO                                           SSTACK_PREPULL  2
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
00499E 7F499E MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00499E 7F499E 8F 10 0A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0049A1 7F49A1 18 25 FA B8                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0049A5 7F49A5 8F 10 23                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0049A8 7F49A8 18 22 FA B7                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0049AC 7F49AC -> $4463                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0049AC 7F49AC -> $445D                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0049AC 7F49AC 3D                      STRING_UPPER_2          RTS
                                      ;#Convert an upper case character to lower case (uncomment if needed)
                                      ; args:   B: ASCII character (w/ or w/out termination)
                                      ; result: B: upper case ASCII character
                                      ; SSTACK: 2 bytes
                                      ;         X, Y, and A are preserved
                                      ;#Make ASCII character printable
                                      ; args:   B: ASCII character (w/out termination)
                                      ; result: B: printable ASCII character or "."
                                      ; SSTACK: 2 bytes
                                      ;         X, Y, and A are preserved
0049AD 7F49AD -> $49AD                STRING_PRINTABLE        EQU     *
0049AD 7F49AD C1 20                                           CMPB    #$20            ;" "
0049AF 7F49AF 25 04                                           BLO     STRING_PRINTABLE_1
0049B1 7F49B1 C1 7E                                           CMPB    #$7E            ;"~"
0049B3 7F49B3 23 10                                           BLS     STRING_PRINTABLE_2
0049B5 7F49B5 C6 2E                   STRING_PRINTABLE_1      LDAB    #$2E            ;"."
                                                              ;Done
0049B7 7F49B7 MACRO                                           SSTACK_PREPULL  2
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
0049B7 7F49B7 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0049B7 7F49B7 8F 10 0A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0049BA 7F49BA 18 25 FA 9F                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0049BE 7F49BE 8F 10 23                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0049C1 7F49C1 18 22 FA 9E                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0049C5 7F49C5 -> $4463                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0049C5 7F49C5 -> $445D                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0049C5 7F49C5 3D                      STRING_PRINTABLE_2      RTS
                                      ;#Skip whitespace (uncomment if needed)
                                      ; args:   X: start of the string
                                      ; result: X: trimmed string
                                      ; SSTACK: 3 bytes
                                      ;         Y and D are preserved
0049C6 7F49C6 -> $49C6                STRING_CODE_END         EQU     *
0049C6 7F49C6 -> $7F49C6              STRING_CODE_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
004BC8 7F4BC8                                                 ORG     STRING_TABS_START, STRING_TABS_START_LIN
                                      ;Common strings
004BC8 7F4BC8 21                      STRING_STR_EXCLAM_NL    DB      "!"     ;exclamation mark + new line
004BC9 7F4BC9 MACRO                   STRING_STR_NL           STRING_NL_TERM  ;new line
                                      ;#Terminated line break                                                          (STRING_NL_TERM)
004BC9 7F4BC9 0D                                              DB      STRING_SYM_CR                                    (STRING_NL_TERM)
004BCA 7F4BCA 8A                                              DB      (STRING_SYM_LF|$80)                              (STRING_NL_TERM)
004BCB 7F4BCB -> $4BCB                STRING_TABS_END         EQU     *
004BCB 7F4BCB -> $7F4BCB              STRING_TABS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - RESET - Reset Handler                                            #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2015 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module detects the cause of the previous system reset and prints a  #
                                      ;#    status message over the SCI interface.                                   #
                                      ;#                                                                             #
                                      ;#    The reset handler also provides routines for triggering system resets    #
                                      ;#    from software.                                                           #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    April 4, 2010                                                            #
                                      ;#      - Initial release                                                      #
                                      ;#    May 30, 2010                                                             #
                                      ;#      - Changed "Initialization failure" error to "Unknown cause" error      #
                                      ;#    June 8, 2010                                                             #
                                      ;#      - Changed checksum for error message                                   #
                                      ;#      - Fixed COP error handling                                             #
                                      ;#    July 2, 2010                                                             #
                                      ;#      - compined error messages "Unknown cause" and "Unknown error" to       #
                                      ;#        "Unknown problem"                                                    #
                                      ;#      - changed error codes                                                  #
                                      ;#    June 29, 2012                                                            #
                                      ;#      - Added support for linear PC                                          #
                                      ;#      - Added option to only use one shared reset vector                     #
                                      ;#    November 16, 2012                                                        #
                                      ;#      - Total redo, now called reset handler and only supporting fatal       #
                                      ;#        errors                                                               #
                                      ;#    June 20, 2013                                                            #
                                      ;#      - Added macros "RESET_RESTART" and "RESET_RESTART_NO_MSG"              #
                                      ;#    January 15, 2015                                                         #
                                      ;#      - Changed configuration options                                        #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    REGDEF - Register definitions                                            #
                                      ;###############################################################################
                                      ;# Error Detection:                                                            #
                                      ;# +-------------------------+-------+-------+---------+---------------------+ #
                                      ;# |                         |       | P L I |         |                     | #
                                      ;# |                         |       | O V L |         |                     | #
                                      ;# |                         | Reset | R R A | Message |                     | #
                                      ;# | Cause                   | Vector| F F F | Pointer | Display             | #
                                      ;# +-------------------------+-------+-------+---------+---------------------+ #
                                      ;# | Power-On Reset          | $FFFE | 1 0 0 |  $0000  | Welcome message     | #
                                      ;# +-------------------------+-------+-------+---------+---------------------+ #
                                      ;# | External Pin Reset      | $FFFE | 0 0 0 |  $0000  | Welcome message     | #
                                      ;# +-------------------------+-------+-------+---------+---------------------+ #
                                      ;# | Low Voltage Reset       | $FFFE | - 1 - |    -    | Error (Low voltage) | #
                                      ;# +-------------------------+-------+-------+---------+---------------------+ #
                                      ;# | Illegal Address Reset   | $FFFE |  -0 1 |    -    | Error (Code fail)   | #
                                      ;# +-------------------------+-------+-------+---------+---------------------+ #
                                      ;# | Clock Monitor Reset     | $FFFC | - - - | CLK Msg | Error (Clock fail)  | #
                                      ;# +-------------------------+-------+-------+---------+---------------------+ #
                                      ;# | COP Reset               | $FFFA | - - - | COP Msg | Error (Inresponsive)| #
                                      ;# +-------------------------+-------+-------+---------+---------------------+ #
                                      ;# | Fatal Application Error | $FFFA | - - - |  Valid  | Error (Application) | #
                                      ;# +-------------------------+-------+-------+---------+---------------------+ #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Replace system resets by BGND instructions
                                      ;RESET_DEBUG            EQU     1
                                      ;Monitor low voltage reset
004BCB 7F4BCB -> $0001                RESET_LVR_CHECK_ON      EQU     1               ;enable LVR check if LVRF flag exists
                                      ;Monitor illegal address reset
004BCB 7F4BCB -> $0001                RESET_IAR_CHECK_ON      EQU     1               ;enable IAR check if ILAF flag exists
                                      ;Maximum error message length
004BCB 7F4BCB -> $0040                RESET_MSG_LENGTH        EQU     64
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001056 0FD056                                                 ORG     RESET_VARS_START, RESET_VARS_START_LIN
                                                              ;ALIGN  1
001056 0FD056                         RESET_MSG_REQ           DS      2               ;requested error message
001058 0FD058                         RESET_MSG_PTR           DS      2               ;validated error message
00105A 0FD05A -> $105A                RESET_VARS_END          EQU     *
00105A 0FD05A -> $FD05A               RESET_VARS_END_LIN      EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
0049C6 7F49C6                                                 ORG     RESET_CODE_START, RESET_CODE_START_LIN
                                      ;#Reset entry points
                                      ;--------------------
                                      ;Power-on and external reset
0049C6 7F49C6 -> $49C6                RESET_EXT_ENTRY         EQU     *
0049C6 7F49C6 18 03 4B CB 10 56                               MOVW    #RESET_MSG_COP, RESET_MSG_REQ           ;set default request (COP)
0049CC 7F49CC 18 03 00 00 10 58                               MOVW    #$0000, RESET_MSG_PTR                   ;check reset flags
0049D2 7F49D2 06 40 00                                        JOB     START_OF_CODE
                                      ;#Clock monitor reset
0049D5 7F49D5 18 03 4B CB 10 56       RESET_CM_ENTRY          MOVW    #RESET_MSG_COP, RESET_MSG_REQ           ;set default request (COP)
0049DB 7F49DB 18 0B E0 10 58                                  MOVB    #RESET_MSG_CLKFAIL, RESET_MSG_PTR       ;set clock failure message
0049E0 7F49E0 06 40 00                                        JOB     START_OF_CODE
                                      ;COP and user reset
0049E3 7F49E3 -> $4000                RESET_COP_ENTRY         EQU     START_OF_CODE
0049E3 7F49E3 18 0B 56 10 58                                  MOVB    #RESET_MSG_REQ, RESET_MSG_PTR           ;preserve error message
0049E8 7F49E8 18 03 4B CB 10 56                               MOVW    #RESET_MSG_COP, RESET_MSG_REQ           ;set default request (COP)
0049EE 7F49EE 06 40 00                                        JOB     START_OF_CODE
                                      ;#Reset trigger
                                      ;--------------
                                      ;#Perform a reset due to a fatal error
                                      ; args: X: message pointer
                                      ;          System is reset and initialized
0049F1 7F49F1 -> $49F1                RESET_FATAL_X           EQU     *
0049F1 7F49F1 7E 10 56                                        STX     RESET_MSG_REQ
                                                              ;Trigger COP
0049F4 7F49F4 MACRO                   RESET_FATAL_X_1         COP_RESET
                                      ;#COP reset                                                                      (COP_RESET)
0049F4 7F49F4 06 40 00                                        JOB     RESET_COP_ENTRY                                  (COP_RESET)
0049F7 7F49F7 -> $49F7                RESET_CODE_END          EQU     *
0049F7 7F49F7 -> $7F49F7              RESET_CODE_END_LIN      EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
004BCB 7F4BCB                                                 ORG     RESET_TABS_START, RESET_TABS_START_LIN
                                      ;#Error messages
004BCB 7F4BCB MACRO                   RESET_MSG_COP           RESET_MSG       "System inresponsive"
                                      ;#Error message (w/ Fletcher-16 checksum)                                        (RESET_MSG)
004BCB 7F4BCB 53 79 73 74 65 6D 20 69 RESET_MSG               FCS     \1                                               (RESET_MSG)
              6E 72 65 73 70 6F 6E 73 
              69 76 E5                
004BDE 7F4BDE F6 4A                                           FLET16  RESET_MSG, *-1                                   (RESET_MSG)
004BE0 7F4BE0 MACRO                   RESET_MSG_CLKFAIL       RESET_MSG       "Clock failure"
                                      ;#Error message (w/ Fletcher-16 checksum)                                        (RESET_MSG)
004BE0 7F4BE0 43 6C 6F 63 6B 20 66 61 RESET_MSG               FCS     \1                                               (RESET_MSG)
              69 6C 75 72 E5          
004BED 7F4BED D2 74                                           FLET16  RESET_MSG, *-1                                   (RESET_MSG)
004BEF 7F4BEF MACRO                   RESET_MSG_POWFAIL       RESET_MSG       "Power loss"
                                      ;#Error message (w/ Fletcher-16 checksum)                                        (RESET_MSG)
004BEF 7F4BEF 50 6F 77 65 72 20 6C 6F RESET_MSG               FCS     \1                                               (RESET_MSG)
              73 F3                   
004BF9 7F4BF9 A4 6E                                           FLET16  RESET_MSG, *-1                                   (RESET_MSG)
004BFB 7F4BFB MACRO                   RESET_MSG_ILLADDR       RESET_MSG       "Code runaway"
                                      ;#Error message (w/ Fletcher-16 checksum)                                        (RESET_MSG)
004BFB 7F4BFB 43 6F 64 65 20 72 75 6E RESET_MSG               FCS     \1                                               (RESET_MSG)
              61 77 61 F9             
004C07 7F4C07 04 22                                           FLET16  RESET_MSG, *-1                                   (RESET_MSG)
004C09 7F4C09 MACRO                   RESET_MSG_UNKNOWN       RESET_MSG       "Unknown cause"
                                      ;#Error message (w/ Fletcher-16 checksum)                                        (RESET_MSG)
004C09 7F4C09 55 6E 6B 6E 6F 77 6E 20 RESET_MSG               FCS     \1                                               (RESET_MSG)
              63 61 75 73 E5          
004C16 7F4C16 5C A1                                           FLET16  RESET_MSG, *-1                                   (RESET_MSG)
004C18 7F4C18 -> $4C18                RESET_TABS_END          EQU     *
004C18 7F4C18 -> $7F4C18              RESET_TABS_END_LIN      EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - NUM - Number printing routines                                   #
                                      ;###############################################################################
                                      ;#    Copyright 2010 Dirk Heisswolf                                            #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module implements various print routines for the SCI driver:        #
                                      ;#    NUM_REVERSE     - calculate a number of reverse digit order              #
                                      ;#    NUM_REVPRINT_NB - print a reverse number (non-blocking)                  #
                                      ;#    NUM_REVPRINT_BL - print a reverse number (blocking)                      #
                                      ;#                                                                             #
                                      ;#    Each of these functions has a coresponding macro definition              #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    STRING    - String printing routines                                     #
                                      ;#    SCI    - SCI driver                                                      #
                                      ;#    SSTACK - Subroutine Stack Handler                                        #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    Apr  4, 2010                                                             #
                                      ;#      - Initial release                                                      #
                                      ;#    November 21, 2012                                                        #
                                      ;#      - Total rewrite (now called NUM)                                       #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Maximum number conversion radix
                                      ;-------------------------------
                                      ;Enable blocking subroutines
004C18 7F4C18 -> $0001                NUM_MAX_BASE_16         EQU     1                               ;default is 16
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;Valid number base
004C18 7F4C18 -> $0002                NUM_BASE_MIN            EQU     2                               ;binary
004C18 7F4C18 -> $0010                NUM_BASE_MAX            EQU     NUM_SYMTAB_END-NUM_SYMTAB       ;max base value determined by symbol table
004C18 7F4C18 -> $000A                NUM_BASE_DEFAULT        EQU     10                              ;default base (decimal)
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
00105A 0FD05A                                                 ORG     NUM_VARS_START, NUM_VARS_START_LIN
00105A 0FD05A -> $105A                NUM_VARS_END            EQU     *
00105A 0FD05A -> $FD05A               NUM_VARS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
0049F7 7F49F7                                                 ORG     NUM_CODE_START, NUM_CODE_START_LIN
                                      ;#Reverse unsigned double word
                                      ; args:   Y:X: unsigned double value
                                      ;         B:   base   (2<=base<=16)
                                      ; result: A:   number of digits
                                      ;         SP+0: MSB
                                      ;         SP+1:  |
                                      ;         SP+2:  |reverse
                                      ;         SP+3:  |number
                                      ;         SP+4:  |
                                      ;         SP+5: LSB
                                      ; SSTACK: 18 bytes
                                      ;         X, Y and B are preserved
0049F7 7F49F7 -> $49F7                NUM_REVERSE             EQU     *
                                      ;Stack layout:
0049F7 7F49F7 -> $0000                NUM_REVERSE_FHW         EQU     $00 ;SP+ 0: MSB
                                                                          ;SP+ 1:  |forward
0049F7 7F49F7 -> $0002                NUM_REVERSE_FLW         EQU     $02 ;SP+ 2:  |number
                                                                          ;SP+ 3: LSB
0049F7 7F49F7 -> $0004                NUM_REVERSE_COUNT       EQU     $04 ;SP+ 4: count -> A
0049F7 7F49F7 -> $0005                NUM_REVERSE_BASE        EQU     $05 ;SP+ 5: base  -> B
0049F7 7F49F7 -> $0006                NUM_REVERSE_Y           EQU     $06 ;SP+ 6: +Y
                                                                          ;SP+ 7: +
0049F7 7F49F7 -> $0008                NUM_REVERSE_X           EQU     $08 ;SP+ 8: +X
                                                                          ;SP+ 9: +
0049F7 7F49F7 -> $000A                NUM_REVERSE_RTN         EQU     $0A ;SP+10: +return address
                                                                          ;SP+11: +
0049F7 7F49F7 -> $000C                NUM_REVERSE_RHW         EQU     $0C ;SP+12: MSB
                                                                          ;SP+13:  |
0049F7 7F49F7 -> $000E                NUM_REVERSE_RMW         EQU     $0E ;SP+14:  |reverse
                                                                          ;SP+15:  |number
0049F7 7F49F7 -> $0010                NUM_REVERSE_RLW         EQU     $10 ;SP+16:  |      +return address at
                                                                          ;SP+17: LSB     +subroutine entry
                                                              ;Setup stack (double value in Y:X, base in B)
0049F7 7F49F7 87                                              CLRA
0049F8 7F49F8 18 02 80 AA                                     MOVW    0,SP, 6,-SP             ;move return address to SP+10
0049FC 7F49FC 6C 86                                           STD     6,SP                    ;initialize reverse number
0049FE 7F49FE 18 00 84 00 00                                  MOVW    #$0000, 4,SP            ;reverse number = base
004A03 7F4A03 18 00 82 00 00                                  MOVW    #$0000, 2,SP
004A08 7F4A08 34                                              PSHX                            ;store X at SP+8
004A09 7F4A09 35                                              PSHY                            ;store Y at SP+6
004A0A 7F4A0A 3B                                              PSHD                            ;store count:base at SP+4
004A0B 7F4A0B 34                                              PSHX                            ;store double value at SP+0
004A0C 7F4A0C 35                                              PSHY
                                                              ;Divide FHW by base
004A0D 7F4A0D EE 80                   NUM_REVERSE_1           LDX     NUM_REVERSE_FHW,SP      ;FHW => X
004A0F 7F4A0F 27 0B                                           BEQ     NUM_REVERSE_2           ;skip division step
004A11 7F4A11 87                                              CLRA                            ;base => D
004A12 7F4A12 E6 85                                           LDAB    NUM_REVERSE_BASE,SP
004A14 7F4A14 B7 D4                                           EXG     X, D
004A16 7F4A16 18 10                                           IDIV                            ;D / X => X,  D % X => D
004A18 7F4A18 6E 80                                           STX     NUM_REVERSE_FHW,SP      ;result => FHW
                                                              ;Divide FLW by base (prev. remainder in D)
004A1A 7F4A1A B7 45                                           TFR     D, X                    ;remainder => X
004A1C 7F4A1C 87                      NUM_REVERSE_2           CLRA                            ;base => D
004A1D 7F4A1D E6 85                                           LDAB    NUM_REVERSE_BASE,SP
004A1F 7F4A1F ED 82                                           LDY     NUM_REVERSE_FLW,SP      ;FLW => Y
004A21 7F4A21 B7 D6                                           EXG     X, Y
004A23 7F4A23 B7 D4                                           EXG     X, D
004A25 7F4A25 11                                              EDIV                            ;Y:D / X => Y,  Y:D % X => D
004A26 7F4A26 6D 82                                           STY     NUM_REVERSE_FLW,SP      ;result => FLW
                                                              ;Add remainder to the reverse value (prev. remainder in D)
004A28 7F4A28 E3 F0 10                                        ADDD    NUM_REVERSE_RLW,SP      ;RLW
004A2B 7F4A2B 6C F0 10                                        STD     NUM_REVERSE_RLW,SP
004A2E 7F4A2E EC 8E                                           LDD     NUM_REVERSE_RMW,SP      ;RMW
004A30 7F4A30 C9 00                                           ADCB    #$00
004A32 7F4A32 89 00                                           ADCA    #$00
004A34 7F4A34 6C 8E                                           STD     NUM_REVERSE_RMW,SP
004A36 7F4A36 EC 8C                                           LDD     NUM_REVERSE_RHW,SP      ;RHW
004A38 7F4A38 C9 00                                           ADCB    #$00
004A3A 7F4A3A 89 00                                           ADCA    #$00
004A3C 7F4A3C 6C 8C                                           STD     NUM_REVERSE_RHW,SP
                                                              ;Increment digit count
004A3E 7F4A3E 62 84                                           INC     NUM_REVERSE_COUNT,SP
                                                              ;Check if the calculation is finished
004A40 7F4A40 EC 82                                           LDD     NUM_REVERSE_FLW,SP
004A42 7F4A42 26 04                                           BNE     <NUM_REVERSE_3          ;reverse value incomplete
004A44 7F4A44 EC 80                                           LDD     NUM_REVERSE_FHW,SP
004A46 7F4A46 27 2C                                           BEQ     <NUM_REVERSE_4          ;reverse value has been generated
                                                              ;Multiply RLW by base
004A48 7F4A48 ED F0 10                NUM_REVERSE_3           LDY     NUM_REVERSE_RLW,SP
004A4B 7F4A4B 87                                              CLRA
004A4C 7F4A4C E6 85                                           LDAB    NUM_REVERSE_BASE,SP
004A4E 7F4A4E 13                                              EMUL                            ;Y * D => Y:D
004A4F 7F4A4F 6C F0 10                                        STD     NUM_REVERSE_RLW,SP
                                                              ;Multiply RMW by base (carry-over in Y)
004A52 7F4A52 EC 8E                                           LDD     NUM_REVERSE_RMW,SP
004A54 7F4A54 B7 C6                                           EXG     D, Y
004A56 7F4A56 6C 8E                                           STD     NUM_REVERSE_RMW,SP
004A58 7F4A58 87                                              CLRA
004A59 7F4A59 E6 85                                           LDAB    NUM_REVERSE_BASE,SP
004A5B 7F4A5B 13                                              EMUL                            ;Y * D => Y:D
004A5C 7F4A5C E3 8E                                           ADDD    NUM_REVERSE_RMW,SP
004A5E 7F4A5E 6C 8E                                           STD     NUM_REVERSE_RMW,SP
004A60 7F4A60 B7 64                                           TFR     Y, D
004A62 7F4A62 C9 00                                           ADCB    #$00
004A64 7F4A64 89 00                                           ADCA    #$00
                                                              ;Multiply RHW by base (carry-over in D)
004A66 7F4A66 ED 8C                                           LDY     NUM_REVERSE_RHW,SP
004A68 7F4A68 6C 8C                                           STD     NUM_REVERSE_RHW,SP
004A6A 7F4A6A 87                                              CLRA
004A6B 7F4A6B E6 85                                           LDAB    NUM_REVERSE_BASE,SP
004A6D 7F4A6D 13                                              EMUL                            ;Y * D => Y:D
004A6E 7F4A6E E3 8C                                           ADDD    NUM_REVERSE_RHW,SP
004A70 7F4A70 6C 8C                                           STD     NUM_REVERSE_RHW,SP
                                                              ;Start new iteration
004A72 7F4A72 20 99                                           JOB     NUM_REVERSE_1
                                                              ;Clean up
004A74 7F4A74 MACRO                   NUM_REVERSE_4           SSTACK_PREPULL  18
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
004A74 7F4A74 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004A74 7F4A74 8F 10 0A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004A77 7F4A77 18 25 F9 E2                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004A7B 7F4A7B 8F 10 13                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004A7E 7F4A7E 18 22 F9 E1                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004A82 7F4A82 -> $4463                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004A82 7F4A82 -> $445D                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004A82 7F4A82 1B 84                                           LEAS    4,SP                    ;release temporary space for forward number
004A84 7F4A84 3A                                              PULD                            ;
004A85 7F4A85 31                                              PULY
004A86 7F4A86 30                                              PULX
                                                              ;Done
004A87 7F4A87 3D                                              RTS
                                      ;#Print a reserse number digit - non-blocking
                                      ; args:   B:    base (2<=base<=16)
                                      ;         SP+0: MSB
                                      ;         SP+1:  |
                                      ;         SP+2:  |reverse
                                      ;         SP+3:  |number
                                      ;         SP+4:  |
                                      ;         SP+5: LSB
                                      ; result: SP+0: MSB
                                      ;         SP+1:  |remaining
                                      ;         SP+2:  | digits of
                                      ;         SP+3:  |reverse
                                      ;         SP+4:  |number
                                      ;         SP+5: LSB
                                      ;         C-flag: set if successful
                                      ; SSTACK: 8 bytes
                                      ;         X, Y and D are preserved
004A88 7F4A88 -> $4A88                NUM_REVPRINT_NB EQU     *
                                      ;Stack layout:
004A88 7F4A88 -> $0000                NUM_REVPRINT_NB_COUNT   EQU     $00 ;SP+ 0: A
004A88 7F4A88 -> $0001                NUM_REVPRINT_NB_BASE    EQU     $01 ;SP+ 1: base -> B
004A88 7F4A88 -> $0002                NUM_REVPRINT_NB_Y       EQU     $02 ;SP+ 2: +Y
                                                                          ;SP+ 3: +
004A88 7F4A88 -> $0004                NUM_REVPRINT_NB_X       EQU     $04 ;SP+ 4: +X
                                                                          ;SP+ 5: +
004A88 7F4A88 -> $0006                NUM_REVPRINT_NB_RTN     EQU     $06 ;SP+ 6: +return address
                                                                          ;SP+ 7: +
004A88 7F4A88 -> $0008                NUM_REVPRINT_NB_RHW     EQU     $08 ;SP+ 8: MSB
                                                                          ;SP+ 9:  |copy
004A88 7F4A88 -> $000A                NUM_REVPRINT_NB_RMW     EQU     $0A ;SP+10:  |of
                                                                          ;SP+11:  |reverse
004A88 7F4A88 -> $000C                NUM_REVPRINT_NB_RLW     EQU     $0C ;SP+12:  |number
                                                                          ;SP+13: LSB
                                                              ;Setup stack (base in B)
004A88 7F4A88 34                                              PSHX                                    ;store X at SP+8
004A89 7F4A89 35                                              PSHY                                    ;store Y at SP+6
004A8A 7F4A8A 3B                                              PSHD                                    ;store count:base at SP+4
                                                              ;Check if TX queue is full already (base in B)
004A8B 7F4A8B MACRO                   NUM_REVPRINT_NB_1       SCI_TX_READY_NB
                                      ;#Check if TX queue can hold further data                                        (SCI_TX_READY_NB)
                                      ; args:   none                                                                   (SCI_TX_READY_NB)
                                      ; result: C-flag: set if successful                                              (SCI_TX_READY_NB)
                                      ; SSTACK: 4 bytes                                                                (SCI_TX_READY_NB)
                                      ;         X, Y, and D are preserved                                              (SCI_TX_READY_NB)
004A8B 7F4A8B MACRO                                           SSTACK_JOBSR    SCI_TX_READY_NB, 4                       (SCI_TX_READY_NB)
                                      ;#Check stack and call subroutine                                                (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (SCI_TX_READY_NB/SSTACK_JOBSR)
004A8B 7F4A8B MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_TX_READY_NB/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
004A8B 7F4A8B MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004A8B 7F4A8B 8F 10 0E                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004A8E 7F4A8E 18 25 F9 CB                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004A92 7F4A92 8F 10 25                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004A95 7F4A95 18 22 F9 CA                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004A99 7F4A99 -> $4463                UF                      EQU     SSTACK_UF                                        (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004A99 7F4A99 -> $445D                OF                      EQU     SSTACK_OF                                        (SCI_TX_READY_NB/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004A99 7F4A99 16 45 6E                                        JOBSR   \1                                               (SCI_TX_READY_NB/SSTACK_JOBSR)
004A9C 7F4A9C 18 24 00 49                                     BCC     >NUM_REVPRINT_NB_4      ;TX queue is full
                                                              ;Divide RHW by base
004AA0 7F4AA0 ED 88                                           LDY     NUM_REVPRINT_NB_RHW,SP  ;RHW => Y
004AA2 7F4AA2 27 0D                                           BEQ     NUM_REVPRINT_NB_2               ;skip division step
004AA4 7F4AA4 B7 65                                           TFR     Y, X
004AA6 7F4AA6 87                                              CLRA                            ;base => D
004AA7 7F4AA7 E6 81                                           LDAB    NUM_REVPRINT_NB_BASE,SP
004AA9 7F4AA9 B7 D4                                           EXG     X, D
004AAB 7F4AAB 18 10                                           IDIV                            ;D / X => X,  D % X => D
004AAD 7F4AAD 6E 88                                           STX     NUM_REVPRINT_NB_RHW,SP  ;result => RHW
                                                              ;Divide RMW by base (prev remainder in D)
004AAF 7F4AAF B7 46                                           TFR     D, Y                    ;remainder => Y
004AB1 7F4AB1 87                      NUM_REVPRINT_NB_2       CLRA                            ;base => D
004AB2 7F4AB2 E6 81                                           LDAB    NUM_REVPRINT_NB_BASE,SP
004AB4 7F4AB4 EE 8A                                           LDX     NUM_REVPRINT_NB_RMW,SP  ;RMW => Y
004AB6 7F4AB6 B7 C5                                           EXG     D, X
004AB8 7F4AB8 11                                              EDIV                            ;Y:D / X => Y,  Y:D % X => D
004AB9 7F4AB9 6D 8A                                           STY     NUM_REVPRINT_NB_RMW,SP  ;result => RMW
                                                              ;Divide RLW by base (prev remainder in D, base in X)
004ABB 7F4ABB B7 46                                           TFR     D, Y                    ;remainder => Y
004ABD 7F4ABD EC 8C                                           LDD     NUM_REVPRINT_NB_RLW,SP  ;RLW => D
004ABF 7F4ABF 11                                              EDIV                            ;Y:D / X => Y,  Y:D % X => D
004AC0 7F4AC0 6D 8C                                           STY     NUM_REVPRINT_NB_RLW,SP  ;result => RLW
                                                              ;Print remainder (prev, remainder in D, RLW in Y)
004AC2 7F4AC2 CE 4C 18                                        LdX     #NUM_SYMTAB
004AC5 7F4AC5 E6 E5                                           LDAB    B,X
004AC7 7F4AC7 16 44 80                                        JOBSR   SCI_TX_NB               ;print character (SSTACK: 5 bytes)
                                                              ;BCC    >NUM_REVPRINT_NB_4      ;TX unsuccessful -> has already been checked
                                                              ;Repeat until the reverse value is $1 (RLW in Y)
004ACA 7F4ACA 04 36 BE                                        DBNE    Y, NUM_REVPRINT_NB_1    ;RLW is not 1
004ACD 7F4ACD EC 8A                                           LDD     NUM_REVPRINT_NB_RMW,SP
004ACF 7F4ACF 26 BA                                           BNE     NUM_REVPRINT_NB_1       ;RMW is not 0
004AD1 7F4AD1 EC 88                                           LDD     NUM_REVPRINT_NB_RHW,SP
004AD3 7F4AD3 26 B6                                           BNE     NUM_REVPRINT_NB_1       ;RMW is not 0
                                                              ;Printing complete
004AD5 7F4AD5 MACRO                                           SSTACK_PREPULL  14
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
004AD5 7F4AD5 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004AD5 7F4AD5 8F 10 0A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004AD8 7F4AD8 18 25 F9 81                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004ADC 7F4ADC 8F 10 17                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004ADF 7F4ADF 18 22 F9 80                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004AE3 7F4AE3 -> $4463                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004AE3 7F4AE3 -> $445D                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004AE3 7F4AE3 14 01                                           SEC
004AE5 7F4AE5 3A                      NUM_REVPRINT_NB_3       PULD
004AE6 7F4AE6 31                                              PULY
004AE7 7F4AE7 30                                              PULX
                                                              ;Done
004AE8 7F4AE8 3D                                              RTS
                                                              ;Printing incomplete
004AE9 7F4AE9 MACRO                   NUM_REVPRINT_NB_4       SSTACK_PREPULL  14
                                      ;#Check stack before pull operation                                              (SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (SSTACK_PREPULL)
                                      ; result: none                                                                   (SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL)
004AE9 7F4AE9 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (SSTACK_PREPULL)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004AE9 7F4AE9 8F 10 0A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004AEC 7F4AEC 18 25 F9 6D                                     BLO     OF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004AF0 7F4AF0 8F 10 17                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004AF3 7F4AF3 18 22 F9 6C                                     BHI     UF                      ;=> 3 cycles     4 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004AF7 7F4AF7 -> $4463                UF                      EQU     SSTACK_UF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004AF7 7F4AF7 -> $445D                OF                      EQU     SSTACK_OF                                        (SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004AF7 7F4AF7 10 FE                                           CLC
004AF9 7F4AF9 20 EA                                           JOB     NUM_REVPRINT_NB_3
004AFB 7F4AFB -> $4AFB                NUM_CODE_END            EQU     *
004AFB 7F4AFB -> $7F4AFB              NUM_CODE_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
004C18 7F4C18                                                 ORG     NUM_TABS_START, NUM_TABS_START_LIN
004C18 7F4C18 30                      NUM_SYMTAB              DB      "0"     ; 0
004C19 7F4C19 31                                              DB      "1"     ; 1
004C1A 7F4C1A 32                                              DB      "2"     ; 2
004C1B 7F4C1B 33                                              DB      "3"     ; 3
004C1C 7F4C1C 34                                              DB      "4"     ; 4
004C1D 7F4C1D 35                                              DB      "5"     ; 5
004C1E 7F4C1E 36                                              DB      "6"     ; 6
004C1F 7F4C1F 37                                              DB      "7"     ; 7
004C20 7F4C20 38                                              DB      "8"     ; 8
004C21 7F4C21 39                                              DB      "9"     ; 9
004C22 7F4C22 41                                              DB      "A"     ;10
004C23 7F4C23 42                                              DB      "B"     ;11
004C24 7F4C24 43                                              DB      "C"     ;12
004C25 7F4C25 44                                              DB      "D"     ;13
004C26 7F4C26 45                                              DB      "E"     ;14
004C27 7F4C27 46                                              DB      "F"     ;15
004C28 7F4C28 28                      NUM_SYMTAB_END  DB      *
004C29 7F4C29 -> $4C29                NUM_TABS_END            EQU     *
004C29 7F4C29 -> $7F4C29              NUM_TABS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - VECTAB - Vector Table (BEPM)                                     #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2015 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for Freescale's S12C MCU     #
                                      ;#    family.                                                                  #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module defines the static vector table of the OpenBDC firmware.     #
                                      ;#    Unexpected inerrupts are cought and trigger a fatal error in the reset   #
                                      ;#    handler.                                                                 #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    December 28, 2014                                                        #
                                      ;#      - Initial release                                                      #
                                      ;#    January 29, 2015                                                         #
                                      ;#      - Updated during S12CBASE overhaul                                     #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    RESET   - Reset handler                                                  #
                                      ;#    CLOCK   - Clock handler                                                  #
                                      ;#    SCI     - UART driver                                                    #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Make each unused interrupt point to a separate BGND instruction
                                      ;VECTAB_DEBUG           EQU     1
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
00105A 0FD05A                                                 ORG     VECTAB_VARS_START, VECTAB_VARS_START_LIN
00105A 0FD05A -> $105A                VECTAB_VARS_END         EQU     *
00105A 0FD05A -> $FD05A               VECTAB_VARS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
004AFB 7F4AFB                                                 ORG     VECTAB_CODE_START, VECTAB_CODE_START_LIN
                                      ;Illegal interrupt catcher
004AFB 7F4AFB MACRO                   VECTAB_ISR_ILLIRQ       RESET_FATAL     VECTAB_MSG_ILLIRQ
                                      ;#Perform a reset due to a fatal error (immediate error code)                    (RESET_FATAL)
                                      ; args: 1: message pointer                                                       (RESET_FATAL)
                                      ;          System is reset and initialized                                       (RESET_FATAL)
004AFB 7F4AFB CE 4C 29                                        LDX     #\1                                              (RESET_FATAL)
004AFE 7F4AFE 06 49 F1                                        JOB     RESET_FATAL_X                                    (RESET_FATAL)
004B01 7F4B01 -> $4B01                VECTAB_CODE_END         EQU     *
004B01 7F4B01 -> $7F4B01              VECTAB_CODE_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
004C29 7F4C29                                                 ORG     VECTAB_TABS_START, VECTAB_TABS_START_LIN
                                      ;#Interrupt service routines
                                      ;#--------------------------
004C29 7F4C29 -> $4AFB                ISR_SPURIOUS            EQU     VECTAB_ISR_ILLIRQ       ;vector base + $10
004C29 7F4C29 -> $4AFB                ISR_SYS                 EQU     VECTAB_ISR_ILLIRQ       ;vector base + $12
004C29 7F4C29 -> $4AFB                ISR_MPU                 EQU     VECTAB_ISR_ILLIRQ       ;vector base + $14
004C29 7F4C29 -> $4AFB                ISR_XGSWE               EQU     VECTAB_ISR_ILLIRQ       ;vector base + $16
004C29 7F4C29 -> $4AFB                ISR_RES18               EQU     VECTAB_ISR_ILLIRQ       ;vector base + $18
004C29 7F4C29 -> $4AFB                ISR_RES1A               EQU     VECTAB_ISR_ILLIRQ       ;vector base + $1A
004C29 7F4C29 -> $4AFB                ISR_RES1C               EQU     VECTAB_ISR_ILLIRQ       ;vector base + $1C
004C29 7F4C29 -> $4AFB                ISR_RES1E               EQU     VECTAB_ISR_ILLIRQ       ;vector base + $1E
004C29 7F4C29 -> $4AFB                ISR_RES20               EQU     VECTAB_ISR_ILLIRQ       ;vector base + $20
004C29 7F4C29 -> $4AFB                ISR_RES22               EQU     VECTAB_ISR_ILLIRQ       ;vector base + $22
004C29 7F4C29 -> $4AFB                ISR_RES24               EQU     VECTAB_ISR_ILLIRQ       ;vector base + $24
004C29 7F4C29 -> $4AFB                ISR_RES26               EQU     VECTAB_ISR_ILLIRQ       ;vector base + $26
004C29 7F4C29 -> $4AFB                ISR_RES28               EQU     VECTAB_ISR_ILLIRQ       ;vector base + $28
004C29 7F4C29 -> $4AFB                ISR_RES2A               EQU     VECTAB_ISR_ILLIRQ       ;vector base + $2A
004C29 7F4C29 -> $4AFB                ISR_RES2C               EQU     VECTAB_ISR_ILLIRQ       ;vector base + $2C
004C29 7F4C29 -> $4AFB                ISR_RES2E               EQU     VECTAB_ISR_ILLIRQ       ;vector base + $2E
004C29 7F4C29 -> $4AFB                ISR_RES30               EQU     VECTAB_ISR_ILLIRQ       ;vector base + $30
004C29 7F4C29 -> $4AFB                ISR_RES32               EQU     VECTAB_ISR_ILLIRQ       ;vector base + $32
004C29 7F4C29 -> $4AFB                ISR_RES34               EQU     VECTAB_ISR_ILLIRQ       ;vector base + $34
004C29 7F4C29 -> $4AFB                ISR_RES36               EQU     VECTAB_ISR_ILLIRQ       ;vector base + $36
004C29 7F4C29 -> $4AFB                ISR_RES38               EQU     VECTAB_ISR_ILLIRQ       ;vector base + $38
004C29 7F4C29 -> $4AFB                ISR_RES3A               EQU     VECTAB_ISR_ILLIRQ       ;vector base + $3A
004C29 7F4C29 -> $4AFB                ISR_ATD1COMP            EQU     VECTAB_ISR_ILLIRQ       ;vector base + $3C
004C29 7F4C29 -> $4AFB                ISR_ATD0COMP            EQU     VECTAB_ISR_ILLIRQ       ;vector base + $3E
004C29 7F4C29 -> $4AFB                ISR_TIM_PAIE            EQU     VECTAB_ISR_ILLIRQ       ;vector base + $40
004C29 7F4C29 -> $4AFB                ISR_TIM_PAOV            EQU     VECTAB_ISR_ILLIRQ       ;vector base + $42
004C29 7F4C29 -> $4AFB                ISR_TIM_TOV             EQU     VECTAB_ISR_ILLIRQ       ;vector base + $44
004C29 7F4C29 -> $4AFB                ISR_TIM_TC7             EQU     VECTAB_ISR_ILLIRQ       ;vector base + $46
004C29 7F4C29 -> $4AFB                ISR_TIM_TC6             EQU     VECTAB_ISR_ILLIRQ       ;vector base + $48
004C29 7F4C29 -> $4AFB                ISR_TIM_TC5             EQU     VECTAB_ISR_ILLIRQ       ;vector base + $4A
004C29 7F4C29 -> $4AFB                ISR_TIM_TC4             EQU     VECTAB_ISR_ILLIRQ       ;vector base + $4C
004C29 7F4C29 -> $4AFB                ISR_TIM_TC3             EQU     VECTAB_ISR_ILLIRQ       ;vector base + $4E
004C29 7F4C29 -> $4AFB                ISR_TIM_TC2             EQU     VECTAB_ISR_ILLIRQ       ;vector base + $50
004C29 7F4C29 -> $4AFB                ISR_TIM_TC1             EQU     VECTAB_ISR_ILLIRQ       ;vector base + $52
004C29 7F4C29 -> $4AFB                ISR_TIM_TC0             EQU     VECTAB_ISR_ILLIRQ       ;vector base + $54
004C29 7F4C29 -> $4AFB                ISR_SCI7                EQU     VECTAB_ISR_ILLIRQ       ;vector base + $56
004C29 7F4C29 -> $4AFB                ISR_PITCH7              EQU     VECTAB_ISR_ILLIRQ       ;vector base + $58
004C29 7F4C29 -> $4AFB                ISR_PITCH6              EQU     VECTAB_ISR_ILLIRQ       ;vector base + $5A
004C29 7F4C29 -> $4AFB                ISR_PITCH5              EQU     VECTAB_ISR_ILLIRQ       ;vector base + $5C
004C29 7F4C29 -> $4AFB                ISR_PITCH4              EQU     VECTAB_ISR_ILLIRQ       ;vector base + $5E
004C29 7F4C29 -> $4AFB                ISR_RES60               EQU     VECTAB_ISR_ILLIRQ       ;vector base + $60
004C29 7F4C29 -> $4AFB                ISR_RES62               EQU     VECTAB_ISR_ILLIRQ       ;vector base + $62
004C29 7F4C29 -> $4AFB                ISR_XGSWT7              EQU     VECTAB_ISR_ILLIRQ       ;vector base + $64
004C29 7F4C29 -> $4AFB                ISR_XGSWT6              EQU     VECTAB_ISR_ILLIRQ       ;vector base + $66
004C29 7F4C29 -> $4AFB                ISR_XGSWT5              EQU     VECTAB_ISR_ILLIRQ       ;vector base + $68
004C29 7F4C29 -> $4AFB                ISR_XGSWT4              EQU     VECTAB_ISR_ILLIRQ       ;vector base + $6A
004C29 7F4C29 -> $4AFB                ISR_XGSWT3              EQU     VECTAB_ISR_ILLIRQ       ;vector base + $6C
004C29 7F4C29 -> $4AFB                ISR_XGSWT2              EQU     VECTAB_ISR_ILLIRQ       ;vector base + $6E
004C29 7F4C29 -> $4AFB                ISR_XGSWT1              EQU     VECTAB_ISR_ILLIRQ       ;vector base + $70
004C29 7F4C29 -> $4AFB                ISR_XGSWT0              EQU     VECTAB_ISR_ILLIRQ       ;vector base + $72
004C29 7F4C29 -> $4AFB                ISR_PITCH3              EQU     VECTAB_ISR_ILLIRQ       ;vector base + $74
004C29 7F4C29 -> $4AFB                ISR_PITCH2              EQU     VECTAB_ISR_ILLIRQ       ;vector base + $76
004C29 7F4C29 -> $4AFB                ISR_PITCH1              EQU     VECTAB_ISR_ILLIRQ       ;vector base + $78
004C29 7F4C29 -> $4AFB                ISR_PITCH0              EQU     VECTAB_ISR_ILLIRQ       ;vector base + $7A
004C29 7F4C29 -> $4AFB                ISR_HT                  EQU     VECTAB_ISR_ILLIRQ       ;vector base + $7C
004C29 7F4C29 -> $4AFB                ISR_API                 EQU     VECTAB_ISR_ILLIRQ       ;vector base + $7E
004C29 7F4C29 -> $4AFB                ISR_LVI                 EQU     VECTAB_ISR_ILLIRQ       ;vector base + $80
004C29 7F4C29 -> $4AFB                ISR_IIC1                EQU     VECTAB_ISR_ILLIRQ       ;vector base + $82
004C29 7F4C29 -> $4AFB                ISR_SCI5                EQU     VECTAB_ISR_ILLIRQ       ;vector base + $84
004C29 7F4C29 -> $4AFB                ISR_SCI4                EQU     VECTAB_ISR_ILLIRQ       ;vector base + $86
004C29 7F4C29 -> $4AFB                ISR_SCI3                EQU     VECTAB_ISR_ILLIRQ       ;vector base + $88
004C29 7F4C29 -> $4AFB                ISR_SCI2                EQU     VECTAB_ISR_ILLIRQ       ;vector base + $8A
004C29 7F4C29 -> $4AFB                ISR_PWMSDN              EQU     VECTAB_ISR_ILLIRQ       ;vector base + $8C
004C29 7F4C29 -> $4AFB                ISR_PORTP               EQU     VECTAB_ISR_ILLIRQ       ;vector base + $8E
004C29 7F4C29 -> $4AFB                ISR_CAN4TX              EQU     VECTAB_ISR_ILLIRQ       ;vector base + $90
004C29 7F4C29 -> $4AFB                ISR_CAN4RX              EQU     VECTAB_ISR_ILLIRQ       ;vector base + $92
004C29 7F4C29 -> $4AFB                ISR_CAN4ERR             EQU     VECTAB_ISR_ILLIRQ       ;vector base + $94
004C29 7F4C29 -> $4AFB                ISR_CAN4WUP             EQU     VECTAB_ISR_ILLIRQ       ;vector base + $96
004C29 7F4C29 -> $4AFB                ISR_CAN3TX              EQU     VECTAB_ISR_ILLIRQ       ;vector base + $98
004C29 7F4C29 -> $4AFB                ISR_CAN3RX              EQU     VECTAB_ISR_ILLIRQ       ;vector base + $9A
004C29 7F4C29 -> $4AFB                ISR_CAN3ERR             EQU     VECTAB_ISR_ILLIRQ       ;vector base + $9C
004C29 7F4C29 -> $4AFB                ISR_CAN3WUP             EQU     VECTAB_ISR_ILLIRQ       ;vector base + $9E
004C29 7F4C29 -> $4AFB                ISR_CAN2TX              EQU     VECTAB_ISR_ILLIRQ       ;vector base + $A0
004C29 7F4C29 -> $4AFB                ISR_CAN2RX              EQU     VECTAB_ISR_ILLIRQ       ;vector base + $A2
004C29 7F4C29 -> $4AFB                ISR_CAN2ERR             EQU     VECTAB_ISR_ILLIRQ       ;vector base + $A4
004C29 7F4C29 -> $4AFB                ISR_CAN2WUP             EQU     VECTAB_ISR_ILLIRQ       ;vector base + $A6
004C29 7F4C29 -> $4AFB                ISR_CAN1TX              EQU     VECTAB_ISR_ILLIRQ       ;vector base + $A8
004C29 7F4C29 -> $4AFB                ISR_CAN1RX              EQU     VECTAB_ISR_ILLIRQ       ;vector base + $AA
004C29 7F4C29 -> $4AFB                ISR_CAN1ERR             EQU     VECTAB_ISR_ILLIRQ       ;vector base + $AC
004C29 7F4C29 -> $4AFB                ISR_CAN1WUP             EQU     VECTAB_ISR_ILLIRQ       ;vector base + $AE
004C29 7F4C29 -> $4AFB                ISR_CAN0TX              EQU     VECTAB_ISR_ILLIRQ       ;vector base + $A0
004C29 7F4C29 -> $4AFB                ISR_CAN0RX              EQU     VECTAB_ISR_ILLIRQ       ;vector base + $B2
004C29 7F4C29 -> $4AFB                ISR_CAN0ERR             EQU     VECTAB_ISR_ILLIRQ       ;vector base + $B4
004C29 7F4C29 -> $4AFB                ISR_CAN0WUP             EQU     VECTAB_ISR_ILLIRQ       ;vector base + $B6
004C29 7F4C29 -> $4AFB                ISR_FLASH               EQU     VECTAB_ISR_ILLIRQ       ;vector base + $B8
004C29 7F4C29 -> $4AFB                ISR_FLASHFLT            EQU     VECTAB_ISR_ILLIRQ       ;vector base + $BA
004C29 7F4C29 -> $4AFB                ISR_SPI2                EQU     VECTAB_ISR_ILLIRQ       ;vector base + $BC
004C29 7F4C29 -> $4AFB                ISR_SPI1                EQU     VECTAB_ISR_ILLIRQ       ;vector base + $BE
004C29 7F4C29 -> $4AFB                ISR_IIC0                EQU     VECTAB_ISR_ILLIRQ       ;vector base + $C0
004C29 7F4C29 -> $4AFB                ISR_SCI6                EQU     VECTAB_ISR_ILLIRQ       ;vector base + $C2
004C29 7F4C29 -> $4AFB                ISR_SCM                 EQU     VECTAB_ISR_ILLIRQ       ;vector base + $C4
004C29 7F4C29 -> $4469                ISR_PLLLOCK             EQU     CLOCK_ISR
004C29 7F4C29 -> $4AFB                ISR_ECT_PBOV            EQU     VECTAB_ISR_ILLIRQ       ;vector base + $C8
004C29 7F4C29 -> $4AFB                ISR_ECT_MODCNT          EQU     VECTAB_ISR_ILLIRQ       ;vector base + $CA
004C29 7F4C29 -> $4AFB                ISR_PORTH               EQU     VECTAB_ISR_ILLIRQ       ;vector base + $CC
004C29 7F4C29 -> $4AFB                ISR_PORTJ               EQU     VECTAB_ISR_ILLIRQ       ;vector base + $CE
004C29 7F4C29 -> $4AFB                ISR_ATD1                EQU     VECTAB_ISR_ILLIRQ       ;vector base + $D0
004C29 7F4C29 -> $4AFB                ISR_ATD0                EQU     VECTAB_ISR_ILLIRQ       ;vector base + $D2
004C29 7F4C29 -> $4AFB                ISR_SCI1                EQU     VECTAB_ISR_ILLIRQ       ;vector base + $D4
004C29 7F4C29 -> $47E7                ISR_SCI0                EQU     SCI_ISR_RXTX
004C29 7F4C29 -> $4AFB                ISR_SPI0                EQU     VECTAB_ISR_ILLIRQ       ;vector base + $D8
004C29 7F4C29 -> $4AFB                ISR_ECT_PAIE            EQU     VECTAB_ISR_ILLIRQ       ;vector base + $DA
004C29 7F4C29 -> $4AFB                ISR_ECT_PAOV            EQU     VECTAB_ISR_ILLIRQ       ;vector base + $DC
004C29 7F4C29 -> $4AFB                ISR_ECT_TOV             EQU     VECTAB_ISR_ILLIRQ       ;vector base + $DE
004C29 7F4C29 -> $4AFB                ISR_ECT_TC7             EQU     VECTAB_ISR_ILLIRQ       ;vector base + $E0
004C29 7F4C29 -> $4AFB                ISR_ECT_TC6             EQU     VECTAB_ISR_ILLIRQ       ;vector base + $E2
004C29 7F4C29 -> $4AFB                ISR_ECT_TC5             EQU     VECTAB_ISR_ILLIRQ       ;vector base + $E4
004C29 7F4C29 -> $4AFB                ISR_ECT_TC4             EQU     VECTAB_ISR_ILLIRQ       ;vector base + $E6
004C29 7F4C29 -> $4706                ISR_ECT_TC3             EQU     SCI_ISR_DELAY
004C29 7F4C29 -> $4AFB                ISR_ECT_TC2             EQU     VECTAB_ISR_ILLIRQ       ;vector base + $EA
004C29 7F4C29 -> $4AFB                ISR_ECT_TC1             EQU     VECTAB_ISR_ILLIRQ       ;vector base + $EC
004C29 7F4C29 -> $4AFB                ISR_ECT_TC0             EQU     VECTAB_ISR_ILLIRQ       ;vector base + $EE
004C29 7F4C29 -> $4AFB                ISR_RTI                 EQU     VECTAB_ISR_ILLIRQ       ;vector base + $F0
004C29 7F4C29 -> $4AFB                ISR_IRQ                 EQU     VECTAB_ISR_ILLIRQ       ;vector base + $F2
004C29 7F4C29 -> $4AFB                ISR_XIRQ                EQU     VECTAB_ISR_ILLIRQ       ;vector base + $F4
004C29 7F4C29 -> $4AFB                ISR_SWI                 EQU     VECTAB_ISR_ILLIRQ       ;vector base + $F6
004C29 7F4C29 -> $4AFB                ISR_TRAP                EQU     VECTAB_ISR_ILLIRQ       ;vector base + $F8
                                      ;#Error message
004C29 7F4C29 55 6E 65 78 70 65 63 74 VECTAB_MSG_ILLIRQ       FCS     "Unexpected interrupt"
              65 64 20 69 6E 74 65 72 
              72 75 70 F4             
004C3D 7F4C3D 41 A2                                           FLET16  VECTAB_MSG_ILLIRQ *-1
004C3F 7F4C3F -> $4C3F                VECTAB_TABS_END         EQU     *
004C3F 7F4C3F -> $7F4C3F              VECTAB_TABS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# S12XEP100 Vector Table                                                      #
                                      ;###############################################################################
00FF10 7FFF10                                                 ORG     VECTAB_START, VECTAB_START_LIN
00FF10 7FFF10 4A FB                   VEC_SPURIOUS            DW      ISR_SPURIOUS            ;vector base + $10
00FF12 7FFF12 4A FB                   VEC_SYS                 DW      ISR_SYS                 ;vector base + $12
00FF14 7FFF14 4A FB                   VEC_MPU                 DW      ISR_MPU                 ;vector base + $14
00FF16 7FFF16 4A FB                   VEC_XGSWE               DW      ISR_XGSWE               ;vector base + $16
00FF18 7FFF18 4A FB                   VEC_RES18               DW      ISR_RES18               ;vector base + $18
00FF1A 7FFF1A 4A FB                   VEC_RES1A               DW      ISR_RES1A               ;vector base + $1A
00FF1C 7FFF1C 4A FB                   VEC_RES1C               DW      ISR_RES1C               ;vector base + $1C
00FF1E 7FFF1E 4A FB                   VEC_RES1E               DW      ISR_RES1E               ;vector base + $1E
00FF20 7FFF20 4A FB                   VEC_RES20               DW      ISR_RES20               ;vector base + $20
00FF22 7FFF22 4A FB                   VEC_RES22               DW      ISR_RES22               ;vector base + $22
00FF24 7FFF24 4A FB                   VEC_RES24               DW      ISR_RES24               ;vector base + $24
00FF26 7FFF26 4A FB                   VEC_RES26               DW      ISR_RES26               ;vector base + $26
00FF28 7FFF28 4A FB                   VEC_RES28               DW      ISR_RES28               ;vector base + $28
00FF2A 7FFF2A 4A FB                   VEC_RES2A               DW      ISR_RES2A               ;vector base + $2A
00FF2C 7FFF2C 4A FB                   VEC_RES2C               DW      ISR_RES2C               ;vector base + $2C
00FF2E 7FFF2E 4A FB                   VEC_RES2E               DW      ISR_RES2E               ;vector base + $2E
00FF30 7FFF30 4A FB                   VEC_RES30               DW      ISR_RES30               ;vector base + $30
00FF32 7FFF32 4A FB                   VEC_RES32               DW      ISR_RES32               ;vector base + $32
00FF34 7FFF34 4A FB                   VEC_RES34               DW      ISR_RES34               ;vector base + $34
00FF36 7FFF36 4A FB                   VEC_RES36               DW      ISR_RES36               ;vector base + $36
00FF38 7FFF38 4A FB                   VEC_RES38               DW      ISR_RES38               ;vector base + $38
00FF3A 7FFF3A 4A FB                   VEC_RES3A               DW      ISR_RES3A               ;vector base + $3A
00FF3C 7FFF3C 4A FB                   VEC_ATD1COMP            DW      ISR_ATD1COMP            ;vector base + $3C
00FF3E 7FFF3E 4A FB                   VEC_ATD0COMP            DW      ISR_ATD0COMP            ;vector base + $3E
00FF40 7FFF40 4A FB                   VEC_TIM_PAIE            DW      ISR_TIM_PAIE            ;vector base + $40
00FF42 7FFF42 4A FB                   VEC_TIM_PAOV            DW      ISR_TIM_PAOV            ;vector base + $42
00FF44 7FFF44 4A FB                   VEC_TIM_TOV             DW      ISR_TIM_TOV             ;vector base + $44
00FF46 7FFF46 4A FB                   VEC_TIM_TC7             DW      ISR_TIM_TC7             ;vector base + $46
00FF48 7FFF48 4A FB                   VEC_TIM_TC6             DW      ISR_TIM_TC6             ;vector base + $48
00FF4A 7FFF4A 4A FB                   VEC_TIM_TC5             DW      ISR_TIM_TC5             ;vector base + $4A
00FF4C 7FFF4C 4A FB                   VEC_TIM_TC4             DW      ISR_TIM_TC4             ;vector base + $4C
00FF4E 7FFF4E 4A FB                   VEC_TIM_TC3             DW      ISR_TIM_TC3             ;vector base + $4E
00FF50 7FFF50 4A FB                   VEC_TIM_TC2             DW      ISR_TIM_TC2             ;vector base + $50
00FF52 7FFF52 4A FB                   VEC_TIM_TC1             DW      ISR_TIM_TC1             ;vector base + $52
00FF54 7FFF54 4A FB                   VEC_TIM_TC0             DW      ISR_TIM_TC0             ;vector base + $54
00FF56 7FFF56 4A FB                   VEC_SCI7                DW      ISR_SCI7                ;vector base + $56
00FF58 7FFF58 4A FB                   VEC_PITCH7              DW      ISR_PITCH7              ;vector base + $58
00FF5A 7FFF5A 4A FB                   VEC_PITCH6              DW      ISR_PITCH6              ;vector base + $5A
00FF5C 7FFF5C 4A FB                   VEC_PITCH5              DW      ISR_PITCH5              ;vector base + $5C
00FF5E 7FFF5E 4A FB                   VEC_PITCH4              DW      ISR_PITCH4              ;vector base + $5E
00FF60 7FFF60 4A FB                   VEC_RES60               DW      ISR_RES60               ;vector base + $60
00FF62 7FFF62 4A FB                   VEC_RES62               DW      ISR_RES62               ;vector base + $62
00FF64 7FFF64 4A FB                   VEC_XGSWT7              DW      ISR_XGSWT7              ;vector base + $64
00FF66 7FFF66 4A FB                   VEC_XGSWT6              DW      ISR_XGSWT6              ;vector base + $66
00FF68 7FFF68 4A FB                   VEC_XGSWT5              DW      ISR_XGSWT5              ;vector base + $68
00FF6A 7FFF6A 4A FB                   VEC_XGSWT4              DW      ISR_XGSWT4              ;vector base + $6A
00FF6C 7FFF6C 4A FB                   VEC_XGSWT3              DW      ISR_XGSWT3              ;vector base + $6C
00FF6E 7FFF6E 4A FB                   VEC_XGSWT2              DW      ISR_XGSWT2              ;vector base + $6E
00FF70 7FFF70 4A FB                   VEC_XGSWT1              DW      ISR_XGSWT1              ;vector base + $70
00FF72 7FFF72 4A FB                   VEC_XGSWT0              DW      ISR_XGSWT0              ;vector base + $72
00FF74 7FFF74 4A FB                   VEC_PITCH3              DW      ISR_PITCH3              ;vector base + $74
00FF76 7FFF76 4A FB                   VEC_PITCH2              DW      ISR_PITCH2              ;vector base + $76
00FF78 7FFF78 4A FB                   VEC_PITCH1              DW      ISR_PITCH1              ;vector base + $78
00FF7A 7FFF7A 4A FB                   VEC_PITCH0              DW      ISR_PITCH0              ;vector base + $7A
00FF7C 7FFF7C 4A FB                   VEC_HT                  DW      ISR_HT                  ;vector base + $7C
00FF7E 7FFF7E 4A FB                   VEC_API                 DW      ISR_API                 ;vector base + $7E
00FF80 7FFF80 4A FB                   VEC_LVI                 DW      ISR_LVI                 ;vector base + $80
00FF82 7FFF82 4A FB                   VEC_IIC1                DW      ISR_IIC1                ;vector base + $82
00FF84 7FFF84 4A FB                   VEC_SCI5                DW      ISR_SCI5                ;vector base + $84
00FF86 7FFF86 4A FB                   VEC_SCI4                DW      ISR_SCI4                ;vector base + $86
00FF88 7FFF88 4A FB                   VEC_SCI3                DW      ISR_SCI3                ;vector base + $88
00FF8A 7FFF8A 4A FB                   VEC_SCI2                DW      ISR_SCI2                ;vector base + $8A
00FF8C 7FFF8C 4A FB                   VEC_PWMSDN              DW      ISR_PWMSDN              ;vector base + $8C
00FF8E 7FFF8E 4A FB                   VEC_PORTP               DW      ISR_PORTP               ;vector base + $8E
00FF90 7FFF90 4A FB                   VEC_CAN4TX              DW      ISR_CAN4TX              ;vector base + $90
00FF92 7FFF92 4A FB                   VEC_CAN4RX              DW      ISR_CAN4RX              ;vector base + $92
00FF94 7FFF94 4A FB                   VEC_CAN4ERR             DW      ISR_CAN4ERR             ;vector base + $94
00FF96 7FFF96 4A FB                   VEC_CAN4WUP             DW      ISR_CAN4WUP             ;vector base + $96
00FF98 7FFF98 4A FB                   VEC_CAN3TX              DW      ISR_CAN3TX              ;vector base + $98
00FF9A 7FFF9A 4A FB                   VEC_CAN3RX              DW      ISR_CAN3RX              ;vector base + $9A
00FF9C 7FFF9C 4A FB                   VEC_CAN3ERR             DW      ISR_CAN3ERR             ;vector base + $9C
00FF9E 7FFF9E 4A FB                   VEC_CAN3WUP             DW      ISR_CAN3WUP             ;vector base + $9E
00FFA0 7FFFA0 4A FB                   VEC_CAN2TX              DW      ISR_CAN2TX              ;vector base + $A0
00FFA2 7FFFA2 4A FB                   VEC_CAN2RX              DW      ISR_CAN2RX              ;vector base + $A2
00FFA4 7FFFA4 4A FB                   VEC_CAN2ERR             DW      ISR_CAN2ERR             ;vector base + $A4
00FFA6 7FFFA6 4A FB                   VEC_CAN2WUP             DW      ISR_CAN2WUP             ;vector base + $A6
00FFA8 7FFFA8 4A FB                   VEC_CAN1TX              DW      ISR_CAN1TX              ;vector base + $A8
00FFAA 7FFFAA 4A FB                   VEC_CAN1RX              DW      ISR_CAN1RX              ;vector base + $AA
00FFAC 7FFFAC 4A FB                   VEC_CAN1ERR             DW      ISR_CAN1ERR             ;vector base + $AC
00FFAE 7FFFAE 4A FB                   VEC_CAN1WUP             DW      ISR_CAN1WUP             ;vector base + $AE
00FFB0 7FFFB0 4A FB                   VEC_CAN0TX              DW      ISR_CAN0TX              ;vector base + $A0
00FFB2 7FFFB2 4A FB                   VEC_CAN0RX              DW      ISR_CAN0RX              ;vector base + $B2
00FFB4 7FFFB4 4A FB                   VEC_CAN0ERR             DW      ISR_CAN0ERR             ;vector base + $B4
00FFB6 7FFFB6 4A FB                   VEC_CAN0WUP             DW      ISR_CAN0WUP             ;vector base + $B6
00FFB8 7FFFB8 4A FB                   VEC_FLASH               DW      ISR_FLASH               ;vector base + $B8
00FFBA 7FFFBA 4A FB                   VEC_FLASHFLT            DW      ISR_FLASHFLT            ;vector base + $BA
00FFBC 7FFFBC 4A FB                   VEC_SPI2                DW      ISR_SPI2                ;vector base + $BC
00FFBE 7FFFBE 4A FB                   VEC_SPI1                DW      ISR_SPI1                ;vector base + $BE
00FFC0 7FFFC0 4A FB                   VEC_IIC0                DW      ISR_IIC0                ;vector base + $C0
00FFC2 7FFFC2 4A FB                   VEC_SCI6                DW      ISR_SCI6                ;vector base + $C2
00FFC4 7FFFC4 4A FB                   VEC_SCM                 DW      ISR_SCM                 ;vector base + $C4
00FFC6 7FFFC6 44 69                   VEC_PLLLOCK             DW      ISR_PLLLOCK             ;vector base + $C6
00FFC8 7FFFC8 4A FB                   VEC_ECT_PBOV            DW      ISR_ECT_PBOV            ;vector base + $C8
00FFCA 7FFFCA 4A FB                   VEC_ECT_MODCNT          DW      ISR_ECT_MODCNT          ;vector base + $CA
00FFCC 7FFFCC 4A FB                   VEC_PORTH               DW      ISR_PORTH               ;vector base + $CC
00FFCE 7FFFCE 4A FB                   VEC_PORTJ               DW      ISR_PORTJ               ;vector base + $CE
00FFD0 7FFFD0 4A FB                   VEC_ATD1                DW      ISR_ATD1                ;vector base + $D0
00FFD2 7FFFD2 4A FB                   VEC_ATD0                DW      ISR_ATD0                ;vector base + $D2
00FFD4 7FFFD4 4A FB                   VEC_SCI1                DW      ISR_SCI1                ;vector base + $D4
00FFD6 7FFFD6 47 E7                   VEC_SCI0                DW      ISR_SCI0                ;vector base + $D6
00FFD8 7FFFD8 4A FB                   VEC_SPI0                DW      ISR_SPI0                ;vector base + $D8
00FFDA 7FFFDA 4A FB                   VEC_ECT_PAIE            DW      ISR_ECT_PAIE            ;vector base + $DA
00FFDC 7FFFDC 4A FB                   VEC_ECT_PAOV            DW      ISR_ECT_PAOV            ;vector base + $DC
00FFDE 7FFFDE 4A FB                   VEC_ECT_TOV             DW      ISR_ECT_TOV             ;vector base + $DE
00FFE0 7FFFE0 4A FB                   VEC_ECT_TC7             DW      ISR_ECT_TC7             ;vector base + $E0
00FFE2 7FFFE2 4A FB                   VEC_ECT_TC6             DW      ISR_ECT_TC6             ;vector base + $E2
00FFE4 7FFFE4 4A FB                   VEC_ECT_TC5             DW      ISR_ECT_TC5             ;vector base + $E4
00FFE6 7FFFE6 4A FB                   VEC_ECT_TC4             DW      ISR_ECT_TC4             ;vector base + $E6
00FFE8 7FFFE8 47 06                   VEC_ECT_TC3             DW      ISR_ECT_TC3             ;vector base + $E8
00FFEA 7FFFEA 4A FB                   VEC_ECT_TC2             DW      ISR_ECT_TC2             ;vector base + $EA
00FFEC 7FFFEC 4A FB                   VEC_ECT_TC1             DW      ISR_ECT_TC1             ;vector base + $EC
00FFEE 7FFFEE 4A FB                   VEC_ECT_TC0             DW      ISR_ECT_TC0             ;vector base + $EE
00FFF0 7FFFF0 4A FB                   VEC_RTI                 DW      ISR_RTI                 ;vector base + $F0
00FFF2 7FFFF2 4A FB                   VEC_IRQ                 DW      ISR_IRQ                 ;vector base + $F2
00FFF4 7FFFF4 4A FB                   VEC_XIRQ                DW      ISR_XIRQ                ;vector base + $F4
00FFF6 7FFFF6 4A FB                   VEC_SWI                 DW      ISR_SWI                 ;vector base + $F6
00FFF8 7FFFF8 4A FB                   VEC_TRAP                DW      ISR_TRAP                ;vector base + $F8
00FFFA 7FFFFA 40 00                   VEC_RESET_COP           DW      RESET_COP_ENTRY         ;vector base + $FA
00FFFC 7FFFFC 49 D5                   VEC_RESET_CM            DW      RESET_CM_ENTRY          ;vector base + $FC
00FFFE 7FFFFE 49 C6                   VEC_RESET_EXT           DW      RESET_EXT_ENTRY         ;vector base + $FE
                                      ;###############################################################################
                                      ;# Includes                                                                    #
                                      ;###############################################################################
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001000 0FD000                                                 ORG     DEMO_VARS_START, DEMO_VARS_START_LIN
                                                              ;Line counter (count down)
001000 0FD000                         DEMO_LINE_COUNT         DS      1
001001 0FD001 -> $1001                DEMO_VARS_END           EQU     *
001001 0FD001 -> $FD001               DEMO_VARS_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Macros                                                                      #
                                      ;###############################################################################
                                      ;
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
004000 7F4000                                                 ORG     DEMO_CODE_START, DEMO_CODE_START_LIN
                                      ;Initialization
004000 7F4000 MACRO                                           BASE_INIT
                                      ;#Initialization                                                                 (BASE_INIT)
                                      ;---------------                                                                 (BASE_INIT)
004000 7F4000 MACRO                                           GPIO_INIT                                                (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/GPIO_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/GPIO_INIT)
                                      ;############################################################################### (BASE_INIT/GPIO_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/GPIO_INIT)
                                                      ;#General                                                        (BASE_INIT/GPIO_INIT)
004000 7F4000 86 80                                   LDAA    #MODC           ;lock MODE register into NSC mode        (BASE_INIT/GPIO_INIT)
004002 7F4002 5A 0B                                   STAA    MODE                                                     (BASE_INIT/GPIO_INIT)
004004 7F4004 5A 0B                                   STAA    MODE                                                     (BASE_INIT/GPIO_INIT)
                                                      ;#Port AD                                                        (BASE_INIT/GPIO_INIT)
004006 7F4006 18 03 FF FF 00 8C                       MOVW    #$FFFF, ATD1DIENH       ;switch unused pins to digital   (BASE_INIT/GPIO_INIT)
                                                      ;MOVW   #$0000, ATD0DIENH                                        (BASE_INIT/GPIO_INIT)
00400C 7F400C 18 03 FF FF 02 7E                       MOVW    #%1111_1111_1111_1111, PER0AD1          ;enable pull-up on all unused pins (BASE_INIT/GPIO_INIT)
                                                      ;MOVW   #%0000_0000_0000_0000, PER0AD0                           (BASE_INIT/GPIO_INIT)
                                                      ;#Port A & B                                                     (BASE_INIT/GPIO_INIT)
004012 7F4012 18 03 DD 9F 00 0C                       MOVW    #(((PUPKE|BKPUE|PUPEE|PUPDE|PUPCE|PUPAE)<<8)|RDPK|RDPE|RDPD|RDPC|PUPBE|PUPAE), PUCR ;enable pull-ups and reduced drive (BASE_INIT/GPIO_INIT)
                                                      ;MOVW   #$0000, PORTA                                            (BASE_INIT/GPIO_INIT)
004018 7F4018 18 03 00 FF 00 02                       MOVW    #$00FF, DDRA                                             (BASE_INIT/GPIO_INIT)
                                                      ;#Port C & D                                                     (BASE_INIT/GPIO_INIT)
                                                      ;MOVW   #$0000, PORTC                                            (BASE_INIT/GPIO_INIT)
                                                      ;MOVW   #$0000, DDRC                                             (BASE_INIT/GPIO_INIT)
                                                      ;#Port E                                                         (BASE_INIT/GPIO_INIT)
                                                      ;MOVB   #$00, PORTE                                              (BASE_INIT/GPIO_INIT)
                                                      ;CLR    IRQCR           ;disable IRQ                             (BASE_INIT/GPIO_INIT)
                                                      ;#Port F                                                         (BASE_INIT/GPIO_INIT)
                                                      ;CLR    DDRF                                                     (BASE_INIT/GPIO_INIT)
                                                      ;MOVB   #$FF, PERF                                               (BASE_INIT/GPIO_INIT)
                                                      ;#Port H                                                         (BASE_INIT/GPIO_INIT)
00401E 7F401E 18 0B EE 02 62                          MOVB    #$EE, DDRH                                               (BASE_INIT/GPIO_INIT)
004023 7F4023 18 03 11 11 02 64                       MOVW    #$1111, PERH                                             (BASE_INIT/GPIO_INIT)
                                                      ;#Port J                                                         (BASE_INIT/GPIO_INIT)
004029 7F4029 18 0B 02 02 68                          MOVB    #$02, PTJ                                                (BASE_INIT/GPIO_INIT)
00402E 7F402E 18 0B 02 02 6A                          MOVB    #$02, DDRJ                                               (BASE_INIT/GPIO_INIT)
                                                      ;MOVB   #$FD, PERJ                                               (BASE_INIT/GPIO_INIT)
                                                      ;#Port K                                                         (BASE_INIT/GPIO_INIT)
004033 7F4033 18 0B FD 00 33                          MOVB    #$FD, DDRK                                               (BASE_INIT/GPIO_INIT)
                                                      ;#Port M                                                         (BASE_INIT/GPIO_INIT)
004038 7F4038 18 0B 8A 02 50                          MOVB    #$8A, PTM                                                (BASE_INIT/GPIO_INIT)
00403D 7F403D 18 0B 8A 02 52                          MOVB    #$8A, DDRM                                               (BASE_INIT/GPIO_INIT)
004042 7F4042 18 0B 75 02 54                          MOVB    #$75, PERM                                               (BASE_INIT/GPIO_INIT)
                                                      ;#Port L                                                         (BASE_INIT/GPIO_INIT)
                                                      ;CLR    DDRL                                                     (BASE_INIT/GPIO_INIT)
                                                      ;MOVW   $#FF00, PERL                                             (BASE_INIT/GPIO_INIT)
                                                      ;#Port P                                                         (BASE_INIT/GPIO_INIT)
004047 7F4047 18 0B FF 02 5A                          MOVB    #$FF, DDRP                                               (BASE_INIT/GPIO_INIT)
                                                      ;#Port R                                                         (BASE_INIT/GPIO_INIT)
                                                      ;CLR    DDRR                                                     (BASE_INIT/GPIO_INIT)
00404C 7F404C 18 0B FF 03 6C                          MOVB    #$FF, PERR                                               (BASE_INIT/GPIO_INIT)
                                                      ;CLR    PPSR                                                     (BASE_INIT/GPIO_INIT)
                                                      ;#Port S                                                         (BASE_INIT/GPIO_INIT)
004051 7F4051 18 0B 8A 02 48                          MOVB    #$8A, PTS                                                (BASE_INIT/GPIO_INIT)
004056 7F4056 18 0B EA 02 4A                          MOVB    #$EA, DDRS                                               (BASE_INIT/GPIO_INIT)
00405B 7F405B 18 0B 10 02 4D                          MOVB    #$10, PPSS                                               (BASE_INIT/GPIO_INIT)
                                                      ;#Port T                                                         (BASE_INIT/GPIO_INIT)
004060 7F4060 18 03 05 05 02 42                       MOVW    #$0505, DDRT                                             (BASE_INIT/GPIO_INIT)
004066 7F4066 18 03 FA FA 02 44                       MOVW    #$FAFA, PERT                                             (BASE_INIT/GPIO_INIT)
00406C 7F406C MACRO                                           COP_INIT                                                 (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/COP_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/COP_INIT)
                                      ;############################################################################### (BASE_INIT/COP_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/COP_INIT)
00406C 7F406C 18 0B 40 00 3C                                  MOVB    #RSBCK, COP_CTLREG                      ;COP configuration: (BASE_INIT/COP_INIT)
004071 7F4071 MACRO                                           CLOCK_INIT                                               (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/CLOCK_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/CLOCK_INIT)
                                      ;############################################################################### (BASE_INIT/CLOCK_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/CLOCK_INIT)
                                      ;#--------------                                                                 (BASE_INIT/CLOCK_INIT)
004071 7F4071 18 0B FF 00 37                                  MOVB    #$FF, CRGFLG                                    ;clear all flags (BASE_INIT/CLOCK_INIT)
004076 7F4076 18 03 D8 07 00 34                               MOVW    #CLOCK_PLL_CONFIG, SYNR                         ;set PLL frequency (SYNR, REFDV) (BASE_INIT/CLOCK_INIT)
00407C 7F407C 18 03 90 01 00 38                               MOVW    #(((RTIE|LOCKIE)<<8)|COPWAI), CRGINT             (BASE_INIT/CLOCK_INIT)
004082 7F4082 MACRO                                           RESET_INIT                                               (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/RESET_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/RESET_INIT)
                                      ;############################################################################### (BASE_INIT/RESET_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/RESET_INIT)
                                                              ;Capture and clear CRG/CPMU flags                        (BASE_INIT/RESET_INIT)
004082 7F4082 96 37                                           LDAA    CRGFLG                  ;capture flags           (BASE_INIT/RESET_INIT)
004084 7F4084 18 0B FF 00 37                                  MOVB    #$FF, CRGFLG            ;clear flags             (BASE_INIT/RESET_INIT)
                                                              ;Check for low voltage reset (flags in A)                (BASE_INIT/RESET_INIT)
004089 7F4089 CD 4B EF                                        LDY     #RESET_MSG_POWFAIL                               (BASE_INIT/RESET_INIT)
00408C 7F408C 85 20                                           BITA    #LVRF                                            (BASE_INIT/RESET_INIT)
00408E 7F408E 26 4E                                           BNE     RESET_INIT_4            ;low voltage reset detected (BASE_INIT/RESET_INIT)
                                                              ;Check for illegal address reset (flags in A)            (BASE_INIT/RESET_INIT)
004090 7F4090 CD 4B FB                                        LDY     #RESET_MSG_ILLADDR                               (BASE_INIT/RESET_INIT)
004093 7F4093 85 04                                           BITA    #ILAF                                            (BASE_INIT/RESET_INIT)
004095 7F4095 26 47                                           BNE     RESET_INIT_4            ;illegal address reset detected (BASE_INIT/RESET_INIT)
                                                              ;Check for power-on or external pin reset (flags in A)   (BASE_INIT/RESET_INIT)
004097 7F4097 FD 10 58                                        LDY     RESET_MSG_PTR                                    (BASE_INIT/RESET_INIT)
00409A 7F409A 27 45                                           BEQ     RESET_INIT_5            ;power-on or external pin reset detected (BASE_INIT/RESET_INIT)
                                                              ;Check if error message is valid (string in Y)           (BASE_INIT/RESET_INIT)
00409C 7F409C 87                                              CLRA                            ;initialize C0           (BASE_INIT/RESET_INIT)
00409D 7F409D CE 3F 00                                        LDX     #((RESET_MSG_LENGTH-1)<<8);initialize char limit and C1 (BASE_INIT/RESET_INIT)
                                                              ;Validate next character (striing pointer in Y, char limit:C1 in X, C0 in A) (BASE_INIT/RESET_INIT)
0040A0 7F40A0 E6 70                                           LDAB    1,Y+                    ;next char -> B          (BASE_INIT/RESET_INIT)
0040A2 7F40A2 2B 1F                                           BMI     RESET_INIT_2            ;string termination found (BASE_INIT/RESET_INIT)
                                                              ;Validate next character (string pointer in Y, char limit:C1 in X, C0:char in D) (BASE_INIT/RESET_INIT)
0040A4 7F40A4 C1 20                   RESET_INIT_1            CMPB    #$20            ;" "    ;check if character is printable (BASE_INIT/RESET_INIT)
0040A6 7F40A6 25 33                                           BLO     RESET_INIT_3            ;invalid message         (BASE_INIT/RESET_INIT)
0040A8 7F40A8 C1 7E                                           CMPB    #$7E            ;"~"    ;check if character is printable (BASE_INIT/RESET_INIT)
0040AA 7F40AA 22 2F                                           BHI     RESET_INIT_3            ;invalid message         (BASE_INIT/RESET_INIT)
                                                              ;Update Fletcher's checksum (string in pointer Y, char limit:C1 in X, C0:char in D) (BASE_INIT/RESET_INIT)
0040AC 7F40AC 18 06                                           ABA                             ;new C0 -> A             (BASE_INIT/RESET_INIT)
0040AE 7F40AE 18 0F                                           TBA                             ;new C0 -> B             (BASE_INIT/RESET_INIT)
0040B0 7F40B0 B7 50                                           TFR     X, A                    ;old C1 -> A             (BASE_INIT/RESET_INIT)
0040B2 7F40B2 18 06                                           ABA                             ;new C1 -> A             (BASE_INIT/RESET_INIT)
0040B4 7F40B4 B7 81                                           EXG     A, B                    ;C0:C1  -> D             (BASE_INIT/RESET_INIT)
0040B6 7F40B6 B7 D4                                           EXG     X, D                    ;C0:C1  -> X, char limit -> A (BASE_INIT/RESET_INIT)
0040B8 7F40B8 B7 51                                           TFR     X, B                    ;char limit:C1 -> D      (BASE_INIT/RESET_INIT)
                                                              ;Check character limit ((string pointer in Y, C0:C1 in X, char limit:C1 in D) (BASE_INIT/RESET_INIT)
0040BA 7F40BA 04 00 1E                                        DBEQ    A, RESET_INIT_3         ;invalid message         (BASE_INIT/RESET_INIT)
0040BD 7F40BD B7 D4                                           EXG     X, D                    ;C0:C1  -> D, char limit:C1 ->  X (BASE_INIT/RESET_INIT)
0040BF 7F40BF E6 70                                           LDAB    1,Y+                    ;next char -> B          (BASE_INIT/RESET_INIT)
0040C1 7F40C1 2A E1                                           BPL     RESET_INIT_1            ;string termination found (BASE_INIT/RESET_INIT)
                                                              ;String termination found (string pointer in Y, char limit:C1 in X, C0:char in D) (BASE_INIT/RESET_INIT)
0040C3 7F40C3                         RESET_INIT_2            ;ANDB   #$7F                    ;ignore termination      (BASE_INIT/RESET_INIT)
                                                              ;;Validate next character (string pointer in Y, char limit:C1 in X, C0:char in D) (BASE_INIT/RESET_INIT)
                                                              ;CMPB   #$20            ;" "    ;check if character is printable (BASE_INIT/RESET_INIT)
                                                              ;BLO    RESET_INIT_3            ;invalid message         (BASE_INIT/RESET_INIT)
                                                              ;CMPB   #$7E            ;"~"    ;check if character is printable (BASE_INIT/RESET_INIT)
                                                              ;BHI    RESET_INIT_3            ;invalid message         (BASE_INIT/RESET_INIT)
0040C3 7F40C3 C1 A0                                           CMPB    #$A0            ;" "    ;check if character is printable (BASE_INIT/RESET_INIT)
0040C5 7F40C5 25 14                                           BLO     RESET_INIT_3            ;invalid message         (BASE_INIT/RESET_INIT)
0040C7 7F40C7 C1 FE                                           CMPB    #$FE            ;"~"    ;check if character is printable (BASE_INIT/RESET_INIT)
0040C9 7F40C9 22 10                                           BHI     RESET_INIT_3            ;invalid message         (BASE_INIT/RESET_INIT)
                                                              ;Update Fletcher's checksum (string in pointer Y, char limit:C1 in X, C0:char in D) (BASE_INIT/RESET_INIT)
0040CB 7F40CB 18 06                                           ABA                             ;new C0 -> A             (BASE_INIT/RESET_INIT)
0040CD 7F40CD 18 0F                                           TBA                             ;new C0 -> B             (BASE_INIT/RESET_INIT)
0040CF 7F40CF B7 50                                           TFR     X, A                    ;old C1 -> A             (BASE_INIT/RESET_INIT)
0040D1 7F40D1 18 06                                           ABA                             ;new C1 -> A             (BASE_INIT/RESET_INIT)
                                                              ;Check Fletcher's checksum (string in pointer Y, C1 in A, C0 in B) (BASE_INIT/RESET_INIT)
0040D3 7F40D3 A1 70                                           CMPA    1,Y+                    ;check C1                (BASE_INIT/RESET_INIT)
0040D5 7F40D5 26 04                                           BNE     RESET_INIT_3            ;invalid message         (BASE_INIT/RESET_INIT)
0040D7 7F40D7 E1 70                                           CMPB    1,Y+                    ;check C1                (BASE_INIT/RESET_INIT)
0040D9 7F40D9 27 06                                           BEQ     RESET_INIT_5            ;valid message           (BASE_INIT/RESET_INIT)
                                                              ;Invalid error message                                   (BASE_INIT/RESET_INIT)
0040DB 7F40DB CD 4C 09                RESET_INIT_3            LDY     #RESET_MSG_UNKNOWN      ;unknown error           (BASE_INIT/RESET_INIT)
                                                              ;Update error message                                    (BASE_INIT/RESET_INIT)
0040DE 7F40DE 7D 10 58                RESET_INIT_4            STY     RESET_MSG_PTR           ;set error message       (BASE_INIT/RESET_INIT)
                                                              ;Done                                                    (BASE_INIT/RESET_INIT)
0040E1 7F40E1 -> $40E1                RESET_INIT_5            EQU     *                                                (BASE_INIT/RESET_INIT)
0040E1 7F40E1 MACRO                                           MMAP_INIT                                                (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/MMAP_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/MMAP_INIT)
                                      ;############################################################################### (BASE_INIT/MMAP_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/MMAP_INIT)
                                                              ;Setup MPU                                               (BASE_INIT/MMAP_INIT)
                                                              ;Descriptor 0: Register space                   -> read and write (BASE_INIT/MMAP_INIT)
0040E1 7F40E1 79 01 19                                        CLR     MPUSEL                                           (BASE_INIT/MMAP_INIT)
0040E4 7F40E4 18 03 C0 00 01 1A                               MOVW    #((MMAP_D_REG_BYTE0<<8)|(MMAP_D_REG_BYTE1)), MPUDESC0 (BASE_INIT/MMAP_INIT)
0040EA 7F40EA 18 03 00 40 01 1C                               MOVW    #((MMAP_D_REG_BYTE2<<8)|(MMAP_D_REG_BYTE3)), MPUDESC2 (BASE_INIT/MMAP_INIT)
0040F0 7F40F0 18 03 00 FF 01 1E                               MOVW    #((MMAP_D_REG_BYTE4<<8)|(MMAP_D_REG_BYTE5)), MPUDESC4 (BASE_INIT/MMAP_INIT)
                                                              ;Descriptor 1: Unimplemented RAM                -> read only (BASE_INIT/MMAP_INIT)
0040F6 7F40F6 72 01 19                                        INC     MPUSEL                                           (BASE_INIT/MMAP_INIT)
0040F9 7F40F9 18 03 C0 01 01 1A                               MOVW    #((MMAP_D_URAM_BYTE0<<8)|(MMAP_D_URAM_BYTE1)), MPUDESC0 (BASE_INIT/MMAP_INIT)
0040FF 7F40FF 18 03 00 C1 01 1C                               MOVW    #((MMAP_D_URAM_BYTE2<<8)|(MMAP_D_URAM_BYTE3)), MPUDESC2 (BASE_INIT/MMAP_INIT)
004105 7F4105 18 03 EF FF 01 1E                               MOVW    #((MMAP_D_URAM_BYTE4<<8)|(MMAP_D_URAM_BYTE5)), MPUDESC4 (BASE_INIT/MMAP_INIT)
                                                              ;Descriptor 1: RAM                              -> read, write, and execute (BASE_INIT/MMAP_INIT)
00410B 7F410B 72 01 19                                        INC     MPUSEL                                           (BASE_INIT/MMAP_INIT)
00410E 7F410E 18 03 C1 F0 01 1A                               MOVW    #((MMAP_D_RAM_BYTE0<<8)|(MMAP_D_RAM_BYTE1)), MPUDESC0 (BASE_INIT/MMAP_INIT)
004114 7F4114 18 03 00 41 01 1C                               MOVW    #((MMAP_D_RAM_BYTE2<<8)|(MMAP_D_RAM_BYTE3)), MPUDESC2 (BASE_INIT/MMAP_INIT)
00411A 7F411A 18 03 FF FF 01 1E                               MOVW    #((MMAP_D_RAM_BYTE4<<8)|(MMAP_D_RAM_BYTE5)), MPUDESC4 (BASE_INIT/MMAP_INIT)
                                                              ;Descriptor 2:  Unimplemented EERAM             -> read only (BASE_INIT/MMAP_INIT)
004120 7F4120 72 01 19                                        INC     MPUSEL                                           (BASE_INIT/MMAP_INIT)
004123 7F4123 18 03 C2 00 01 1A                               MOVW    #((MMAP_D_UEERAM_BYTE0<<8)|(MMAP_D_UEERAM_BYTE1)), MPUDESC0 (BASE_INIT/MMAP_INIT)
004129 7F4129 18 03 00 C2 01 1C                               MOVW    #((MMAP_D_UEERAM_BYTE2<<8)|(MMAP_D_UEERAM_BYTE3)), MPUDESC2 (BASE_INIT/MMAP_INIT)
00412F 7F412F 18 03 7D FF 01 1E                               MOVW    #((MMAP_D_UEERAM_BYTE4<<8)|(MMAP_D_UEERAM_BYTE5)), MPUDESC4 (BASE_INIT/MMAP_INIT)
                                                              ;Descriptor 2:  EERAM                           -> read, write, and execute (BASE_INIT/MMAP_INIT)
004135 7F4135 72 01 19                                        INC     MPUSEL                                           (BASE_INIT/MMAP_INIT)
004138 7F4138 18 03 C2 7E 01 1A                               MOVW    #((MMAP_D_EERAM_BYTE0<<8)|(MMAP_D_EERAM_BYTE1)), MPUDESC0 (BASE_INIT/MMAP_INIT)
00413E 7F413E 18 03 00 02 01 1C                               MOVW    #((MMAP_D_EERAM_BYTE2<<8)|(MMAP_D_EERAM_BYTE3)), MPUDESC2 (BASE_INIT/MMAP_INIT)
004144 7F4144 18 03 7F FF 01 1E                               MOVW    #((MMAP_D_EERAM_BYTE4<<8)|(MMAP_D_EERAM_BYTE5)), MPUDESC4 (BASE_INIT/MMAP_INIT)
                                                              ;Descriptor 3:  Unimplemented Flash             -> read only (BASE_INIT/MMAP_INIT)
00414A 7F414A 72 01 19                                        INC     MPUSEL                                           (BASE_INIT/MMAP_INIT)
00414D 7F414D 18 03 C2 80 01 1A                               MOVW    #((MMAP_D_UFLASH_BYTE0<<8)|(MMAP_D_UFLASH_BYTE1)), MPUDESC0 (BASE_INIT/MMAP_INIT)
004153 7F4153 18 03 00 CF 01 1C                               MOVW    #((MMAP_D_UFLASH_BYTE2<<8)|(MMAP_D_UFLASH_BYTE3)), MPUDESC2 (BASE_INIT/MMAP_INIT)
004159 7F4159 18 03 0F FF 01 1E                               MOVW    #((MMAP_D_UFLASH_BYTE4<<8)|(MMAP_D_UFLASH_BYTE5)), MPUDESC4 (BASE_INIT/MMAP_INIT)
                                                              ;Descriptor 4:  Unimplemented Flash             -> read and execute (BASE_INIT/MMAP_INIT)
00415F 7F415F 72 01 19                                        INC     MPUSEL                                           (BASE_INIT/MMAP_INIT)
004162 7F4162 18 03 CF 10 01 1A                               MOVW    #((MMAP_D_FLASH_BYTE0<<8)|(MMAP_D_FLASH_BYTE1)), MPUDESC0 (BASE_INIT/MMAP_INIT)
004168 7F4168 18 03 00 8F 01 1C                               MOVW    #((MMAP_D_FLASH_BYTE2<<8)|(MMAP_D_FLASH_BYTE3)), MPUDESC2 (BASE_INIT/MMAP_INIT)
00416E 7F416E 18 03 FF FF 01 1E                               MOVW    #((MMAP_D_FLASH_BYTE4<<8)|(MMAP_D_FLASH_BYTE5)), MPUDESC4 (BASE_INIT/MMAP_INIT)
                                                              ;Enable descriptors in supervisor mode                   (BASE_INIT/MMAP_INIT)
004174 7F4174 18 0B 80 01 19                                  MOVB    #SVSEN, MPUSEL                                   (BASE_INIT/MMAP_INIT)
                                      ;#ifndef MMAP_RAM                       ;Don't write to RPAGE while executing code from RAM (BASE_INIT/MMAP_INIT)
                                      ;                       ;Initialize RPAGE                                        (BASE_INIT/MMAP_INIT)
004179 7F4179 18 0B FD 00 16                                  MOVB    #(MMAP_RAM_START_LIN>>12), RPAGE                 (BASE_INIT/MMAP_INIT)
00417E 7F417E MACRO                                           VECTAB_INIT                                              (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/VECTAB_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/VECTAB_INIT)
                                      ;############################################################################### (BASE_INIT/VECTAB_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/VECTAB_INIT)
                                                              ;Disable XGATE interrupts                                (BASE_INIT/VECTAB_INIT)
00417E 7F417E 79 01 26                                        CLR     XGPRIO                                           (BASE_INIT/VECTAB_INIT)
004181 7F4181 MACRO                                           SSTACK_INIT                                              (BASE_INIT)
004181 7F4181 MACRO                                           ISTACK_INIT                                              (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/ISTACK_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/ISTACK_INIT)
                                      ;############################################################################### (BASE_INIT/ISTACK_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/ISTACK_INIT)
                                                              ;Set stack pointer                                       (BASE_INIT/ISTACK_INIT)
004181 7F4181 CF 10 25                                        LDS     #ISTACK_BOTTOM                                   (BASE_INIT/ISTACK_INIT)
                                                              ;Enable interrupts                                       (BASE_INIT/ISTACK_INIT)
004184 7F4184 10 EF                                           CLI                                                      (BASE_INIT/ISTACK_INIT)
004186 7F4186 MACRO                                           TIM_INIT                                                 (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/TIM_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/TIM_INIT)
                                      ;############################################################################### (BASE_INIT/TIM_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/TIM_INIT)
                                                              ;MOVB   #%1_1_1_1_1_1_0_0, TIOS         ;default setup   (BASE_INIT/TIM_INIT)
                                                              ;MOVB   #%0_0_0_0_0_0_0_0, TIOS         ;keep at zero, for configuration with BSET (BASE_INIT/TIM_INIT)
                                                                       ;      D S S S                 ;  0=input capture (BASE_INIT/TIM_INIT)
                                                                       ;      E C C C                 ;  1=output compare (BASE_INIT/TIM_INIT)
                                                                       ;      L I I I                                  (BASE_INIT/TIM_INIT)
                                                                       ;      A B B B                                  (BASE_INIT/TIM_INIT)
                                                                       ;      Y D D D                                  (BASE_INIT/TIM_INIT)
                                                                       ;        T N P                                  (BASE_INIT/TIM_INIT)
                                                                       ;        O E E                                  (BASE_INIT/TIM_INIT)
                                                              ;CFORC                                                   (BASE_INIT/TIM_INIT)
                                                              ;OC7M                                                    (BASE_INIT/TIM_INIT)
                                                                       ;7 6 5 4 3 2 1 0                                (BASE_INIT/TIM_INIT)
                                                              ;MOVB   #%0_0_0_0_0_0_0_0, TOC7D        ;default setup   (BASE_INIT/TIM_INIT)
                                                              ;MOVB   #%0_0_0_0_0_0_0_0, TOC7D        ;keep at zero, for configuration with BSET (BASE_INIT/TIM_INIT)
                                                                       ;      D S S S S                                (BASE_INIT/TIM_INIT)
                                                                       ;      E C C C C                                (BASE_INIT/TIM_INIT)
                                                                       ;      L I I I I                                (BASE_INIT/TIM_INIT)
                                                                       ;      A T B B B                                (BASE_INIT/TIM_INIT)
                                                                       ;      Y O D D D                                (BASE_INIT/TIM_INIT)
                                                                       ;          T N P                                (BASE_INIT/TIM_INIT)
                                                                       ;          O E E                                (BASE_INIT/TIM_INIT)
                                                              ;TCNT                                                    (BASE_INIT/TIM_INIT)
004186 7F4186 18 0B 01 00 4D                                  MOVB    #$01, TSCR2                     ;run on half bus frequency (BASE_INIT/TIM_INIT)
00418B 7F418B MACRO                                           STRING_INIT                                              (BASE_INIT)
00418B 7F418B MACRO                                           NUM_INIT                                                 (BASE_INIT)
00418B 7F418B MACRO                                           SCI_INIT                                                 (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/SCI_INIT)
                                      ;# Macros                                                                      # (BASE_INIT/SCI_INIT)
                                      ;############################################################################### (BASE_INIT/SCI_INIT)
                                      ;#Initialization                                                                 (BASE_INIT/SCI_INIT)
                                      ;#--------------                                                                 (BASE_INIT/SCI_INIT)
                                                              ;Initialize timer                                        (BASE_INIT/SCI_INIT)
00418B 7F418B 4C 40 08                                        BSET    TIOS, #(SCI_DLY_TIOS_VAL|SCI_BD_TIOS_VAL)        (BASE_INIT/SCI_INIT)
                                                              ;Invert RXD/TXD polarity                                 (BASE_INIT/SCI_INIT)
                                                              ;Set baud rate                                           (BASE_INIT/SCI_INIT)
                                                              ;Check for POR                                           (BASE_INIT/SCI_INIT)
                                                              ;Check if stored baud rate is still valid                (BASE_INIT/SCI_INIT)
00418E 7F418E FC 10 52                                        LDD     SCI_BVAL                                ;SCI_BMUL*baud rate -> D (BASE_INIT/SCI_INIT)
004191 7F4191 27 16                                           BEQ     <SCI_INIT_2                             ;use default value if zero (BASE_INIT/SCI_INIT)
004193 7F4193 CE 0C CC                                        LDX     #SCI_BMUL                               ;SCI_BMUL -> X (BASE_INIT/SCI_INIT)
004196 7F4196 18 10                                           IDIV                                            ;D/X -> X, D%X -> D (BASE_INIT/SCI_INIT)
004198 7F4198 8C 00 00                                        CPD     #$0000                                  ;check if the remainder is 0 (BASE_INIT/SCI_INIT)
00419B 7F419B 26 0C                                           BNE     <SCI_INIT_2                             ;stored baud rate is invalid (BASE_INIT/SCI_INIT)
                                                              ;Check if baud rate is listed                            (BASE_INIT/SCI_INIT)
00419D 7F419D CD 4B B8                                        LDY     #SCI_BTAB                               ;start of baud table -> Y (BASE_INIT/SCI_INIT)
0041A0 7F41A0 AE 71                   SCI_INIT_1              CPX     2,Y+                                    ;compare table entry with X (BASE_INIT/SCI_INIT)
0041A2 7F41A2 27 0E                                           BEQ     <SCI_INIT_3                             ;match   (BASE_INIT/SCI_INIT)
0041A4 7F41A4 8D 4B C8                                        CPY     #SCI_BTAB_END                           ;check if the end of the table has been reached (BASE_INIT/SCI_INIT)
0041A7 7F41A7 26 F7                                           BNE     <SCI_INIT_1                             ;loop    (BASE_INIT/SCI_INIT)
                                                              ;No match use default                                    (BASE_INIT/SCI_INIT)
0041A9 7F41A9 CE 01 46                SCI_INIT_2              LDX     #SCI_BDEF                               ;default baud rate (BASE_INIT/SCI_INIT)
0041AC 7F41AC 18 03 4B C8 10 52                               MOVW    #(SCI_BDEF*SCI_BMUL), SCI_BVAL                   (BASE_INIT/SCI_INIT)
                                                              ;Match                                                   (BASE_INIT/SCI_INIT)
0041B2 7F41B2 5E C8                   SCI_INIT_3              STX     SCIBDH                                  ;set baud rate (BASE_INIT/SCI_INIT)
                                                              ;Set frame format                                        (BASE_INIT/SCI_INIT)
0041B4 7F41B4 18 0B 04 00 CA                                  MOVB    #SCI_8N1, SCICR1                        ;8N1     (BASE_INIT/SCI_INIT)
0041B9 7F41B9 MACRO                                           CLOCK_WAIT_FOR_PLL                                       (BASE_INIT)
                                                              ;MOVW   #(((RTIE|LOCKIE)<<8)|CWAI|COPWAI), CRGINT        (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ;CRG configuration: (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ; real-time interrupt enabled           (RTIE) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ; PLL lock interrupt enabled            (LOCKIE) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ; no self-clock mode interrupt          (~SCMIE) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ; no pseudo-stop                        (~PSTP) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ; system/bus clock in wait mode         (~SYSWAI) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ; no reduced oscillator amplitude       (~ROAWAI) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ; PLL in wait mode                      (~PLLWAI) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ; core/CPU clock stops in wait mode     (CWAI) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ; RTI keeps running in wait mode        (~RTIWAI) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ; COP stops in wait mode                (COPWAI) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                              ;BSET   PLLCTL, #(CME|PLLON|AUTO)                       ; clock monitor enabled                 (CME) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ; PLL enabled                           (PLLON) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                                                                                                      ; automatic bandwith control            (AUTO) (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                      ;#Wait for PLL                                                                   (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                      ;#------------                                                                   (BASE_INIT/CLOCK_WAIT_FOR_PLL)
0041B9 7F41B9 14 10                   LOOP            SEI                                                              (BASE_INIT/CLOCK_WAIT_FOR_PLL)
0041BB 7F41BB 4E 39 80 1C                             BRSET   CLKSEL, #PLLSEL, DONE                           ;PLL is locked (BASE_INIT/CLOCK_WAIT_FOR_PLL)
0041BF 7F41BF MACRO                                   ISTACK_WAIT                                                      (BASE_INIT/CLOCK_WAIT_FOR_PLL)
                                      ;#Wait until any interrupt has been serviced                                     (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
                                      ; args:   none                                                                   (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
                                      ; ISTACK: none                                                                   (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
                                                              ;Verify SP before runnung ISRs                           (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
0041BF 7F41BF 8F 10 0A                                        CPS     #ISTACK_TOP+ISTACK_FRAME_SIZE                    (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
0041C2 7F41C2 25 13                                           BLO     OF ;ISTACK_OF                                    (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
0041C4 7F41C4 8F 10 25                                        CPS     #ISTACK_BOTTOM                                   (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
0041C7 7F41C7 22 0F                                           BHI     UF ;ISTACK_UF                                    (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
0041C9 7F41C9 MACRO                                           COP_SERVICE                     ;already taken care of by WAI (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
                                                                                                              ; no window mode                        (~WCOP) (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP and RTI stop when BDM is active   (RSBCK) (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT/COP_SERVICE)
                                                                                                              ; COP is disabled       (~CR2|~CR1|~CR0) (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT/COP_SERVICE)
                                      ;#Service COP                                                                    (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT/COP_SERVICE)
0041C9 7F41C9 18 0B 55 00 3F                                  MOVB    #$55, COP_ARMREG                                 (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT/COP_SERVICE)
0041CE 7F41CE 18 0B AA 00 3F                                  MOVB    #$AA, COP_ARMREG                                 (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT/COP_SERVICE)
0041D3 7F41D3 10 EF                                           CLI                                                      (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
0041D5 7F41D5 20 02                                           JOB     DONE                                             (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
0041D7 7F41D7 00                      OF                      BGND                                                     (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
0041D8 7F41D8 00                      UF                      BGND                                                     (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
0041D9 7F41D9 -> $41D9                DONE                    EQU     *                                                (BASE_INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
0041D9 7F41D9 20 DE                                   JOB     LOOP                                                     (BASE_INIT/CLOCK_WAIT_FOR_PLL)
0041DB 7F41DB 10 EF                   DONE            CLI                                                              (BASE_INIT/CLOCK_WAIT_FOR_PLL)
0041DD 7F41DD MACRO                                           SCI_ENABLE                                               (BASE_INIT)
                                      ;#Enable SCI                                                                     (BASE_INIT/SCI_ENABLE)
                                      ;#----------                                                                     (BASE_INIT/SCI_ENABLE)
                                                              ;Initialize queues and state flags                       (BASE_INIT/SCI_ENABLE)
0041DD 7F41DD CC 00 00                                        LDD     #$0000                                           (BASE_INIT/SCI_ENABLE)
0041E0 7F41E0 7C 10 50                                        STD     SCI_TXBUF_IN                            ;reset in and out pointer of the TX buffer (BASE_INIT/SCI_ENABLE)
0041E3 7F41E3 7C 10 46                                        STD     SCI_RXBUF_IN                            ;reset in and out pointer of the RX buffer (BASE_INIT/SCI_ENABLE)
0041E6 7F41E6 18 0B 80 10 25                                  MOVB    #SCI_FLG_SEND_XONXOFF,  SCI_FLGS        ;request transmission of XON/XOFF (BASE_INIT/SCI_ENABLE)
                                                              ;Enable transmission                                     (BASE_INIT/SCI_ENABLE)
0041EB 7F41EB 18 0B AC 00 CB                                  MOVB    #(TXIE|RIE|TE|RE), SCICR2               ;transmit XON (BASE_INIT/SCI_ENABLE)
0041F0 7F41F0 MACRO                                           RESET_BR_ERR    ERROR   ;severe error detected           (BASE_INIT)
                                      ;Branch on error                                                                 (BASE_INIT/RESET_BR_ERR)
                                      ; args:   1: branch address                                                      (BASE_INIT/RESET_BR_ERR)
                                      ; result: Y: error message pointer                                               (BASE_INIT/RESET_BR_ERR)
                                      ; SSTACK: none                                                                   (BASE_INIT/RESET_BR_ERR)
                                      ;         X, and D are preserved                                                 (BASE_INIT/RESET_BR_ERR)
0041F0 7F41F0 FD 10 58                        LDY     RESET_MSG_PTR                                                    (BASE_INIT/RESET_BR_ERR)
0041F3 7F41F3 26 16                           BNE     \1                                                               (BASE_INIT/RESET_BR_ERR)
0041F5 7F41F5 MACRO                                           WELCOME_MESSAGE                                          (BASE_INIT)
                                      ;############################################################################### (BASE_INIT/WELCOME_MESSAGE)
                                      ;# Macros                                                                      # (BASE_INIT/WELCOME_MESSAGE)
                                      ;############################################################################### (BASE_INIT/WELCOME_MESSAGE)
                                      ;#Welcome message                                                                (BASE_INIT/WELCOME_MESSAGE)
                                      ;------------_---                                                                (BASE_INIT/WELCOME_MESSAGE)
0041F5 7F41F5 CE 4B 45                                        LDX     #WELCOME_MESSAGE        ;print welcome message   (BASE_INIT/WELCOME_MESSAGE)
0041F8 7F41F8 MACRO                                           STRING_PRINT_BL                                          (BASE_INIT/WELCOME_MESSAGE)
                                      ;#Basic print function - blocking                                                (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL)
                                      ; args:   X:      start of the string                                            (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL)
                                      ; result: X;      points to the byte after the string                            (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL)
                                      ; SSTACK: 10 bytes                                                               (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL)
                                      ;         Y and D are preserved                                                  (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL)
0041F8 7F41F8 MACRO                                           SSTACK_JOBSR    STRING_PRINT_BL, 10                      (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL)
                                      ;#Check stack and call subroutine                                                (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
0041F8 7F41F8 MACRO                                           SSTACK_PREPUSH  \2                                       (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0041F8 7F41F8 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0041F8 7F41F8 8F 10 14                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0041FB 7F41FB 18 25 02 5E                                     BLO     OF                      ;=> 3 cycles     4 bytes (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0041FF 7F41FF 8F 10 25                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004202 7F4202 18 22 02 5D                                     BHI     UF                      ;=> 3 cycles     4 bytes (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004206 7F4206 -> $4463                UF                      EQU     SSTACK_UF                                        (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004206 7F4206 -> $445D                OF                      EQU     SSTACK_OF                                        (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004206 7F4206 16 48 DD                                        JOBSR   \1                                               (BASE_INIT/WELCOME_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
004209 7F4209 20 3B                                           JOB     DONE                                             (BASE_INIT)
00420B 7F420B MACRO                   ERROR                   ERROR_MESSAGE                                            (BASE_INIT)
                                      ;#Error message                                                                  (BASE_INIT/ERROR_MESSAGE)
                                      ;--------------                                                                  (BASE_INIT/ERROR_MESSAGE)
00420B 7F420B CE 4B 68                                        LDX     #ERROR_HEADER           ;print error header      (BASE_INIT/ERROR_MESSAGE)
00420E 7F420E MACRO                                           STRING_PRINT_BL                                          (BASE_INIT/ERROR_MESSAGE)
                                      ;#Basic print function - blocking                                                (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL)
                                      ; args:   X:      start of the string                                            (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL)
                                      ; result: X;      points to the byte after the string                            (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL)
                                      ; SSTACK: 10 bytes                                                               (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL)
                                      ;         Y and D are preserved                                                  (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL)
00420E 7F420E MACRO                                           SSTACK_JOBSR    STRING_PRINT_BL, 10                      (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL)
                                      ;#Check stack and call subroutine                                                (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
00420E 7F420E MACRO                                           SSTACK_PREPUSH  \2                                       (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00420E 7F420E MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00420E 7F420E 8F 10 14                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004211 7F4211 18 25 02 48                                     BLO     OF                      ;=> 3 cycles     4 bytes (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004215 7F4215 8F 10 25                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004218 7F4218 18 22 02 47                                     BHI     UF                      ;=> 3 cycles     4 bytes (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00421C 7F421C -> $4463                UF                      EQU     SSTACK_UF                                        (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00421C 7F421C -> $445D                OF                      EQU     SSTACK_OF                                        (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00421C 7F421C 16 48 DD                                        JOBSR   \1                                               (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
00421F 7F421F B7 65                                           TFR     Y, X                    ;print error message     (BASE_INIT/ERROR_MESSAGE)
004221 7F4221 MACRO                                           STRING_PRINT_BL                                          (BASE_INIT/ERROR_MESSAGE)
                                      ;#Basic print function - blocking                                                (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL)
                                      ; args:   X:      start of the string                                            (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL)
                                      ; result: X;      points to the byte after the string                            (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL)
                                      ; SSTACK: 10 bytes                                                               (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL)
                                      ;         Y and D are preserved                                                  (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL)
004221 7F4221 MACRO                                           SSTACK_JOBSR    STRING_PRINT_BL, 10                      (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL)
                                      ;#Check stack and call subroutine                                                (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
004221 7F4221 MACRO                                           SSTACK_PREPUSH  \2                                       (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
004221 7F4221 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004221 7F4221 8F 10 14                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004224 7F4224 18 25 02 35                                     BLO     OF                      ;=> 3 cycles     4 bytes (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004228 7F4228 8F 10 25                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00422B 7F422B 18 22 02 34                                     BHI     UF                      ;=> 3 cycles     4 bytes (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00422F 7F422F -> $4463                UF                      EQU     SSTACK_UF                                        (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00422F 7F422F -> $445D                OF                      EQU     SSTACK_OF                                        (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00422F 7F422F 16 48 DD                                        JOBSR   \1                                               (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
004232 7F4232 CE 4B 75                                        LDX     #ERROR_TRAILER          ;print error TRAILER     (BASE_INIT/ERROR_MESSAGE)
004235 7F4235 MACRO                                           STRING_PRINT_BL                                          (BASE_INIT/ERROR_MESSAGE)
                                      ;#Basic print function - blocking                                                (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL)
                                      ; args:   X:      start of the string                                            (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL)
                                      ; result: X;      points to the byte after the string                            (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL)
                                      ; SSTACK: 10 bytes                                                               (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL)
                                      ;         Y and D are preserved                                                  (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL)
004235 7F4235 MACRO                                           SSTACK_JOBSR    STRING_PRINT_BL, 10                      (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL)
                                      ;#Check stack and call subroutine                                                (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
004235 7F4235 MACRO                                           SSTACK_PREPUSH  \2                                       (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
004235 7F4235 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004235 7F4235 8F 10 14                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004238 7F4238 18 25 02 21                                     BLO     OF                      ;=> 3 cycles     4 bytes (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00423C 7F423C 8F 10 25                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00423F 7F423F 18 22 02 20                                     BHI     UF                      ;=> 3 cycles     4 bytes (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004243 7F4243 -> $4463                UF                      EQU     SSTACK_UF                                        (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004243 7F4243 -> $445D                OF                      EQU     SSTACK_OF                                        (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004243 7F4243 16 48 DD                                        JOBSR   \1                                               (BASE_INIT/ERROR_MESSAGE/STRING_PRINT_BL/SSTACK_JOBSR)
004246 7F4246 -> $4246                DONE                    EQU     *                                                (BASE_INIT)
                                      ;;Setup trace buffer
                                      ;                       ;Configure DBG module
                                      ;                       CLR     DBGC1
                                      ;                       ;MOVB   #$40, DBGTCR  ;trace CPU in normal mode
                                      ;                       MOVB    #$4C, DBGTCR  ;trace CPU in pure PC mode
                                      ;                       MOVB    #$02, DBGC2   ;Comparators A/B outside range
                                      ;                       MOVB    #$02, DBGSCRX ;first match triggers final state
                                      ;                       ;Comperator A
                                      ;                       MOVW    #(((BRK|TAG|COMPE)<<8)|(MMAP_RAM_START_LIN>>16)), DBGXCTL
                                      ;                       MOVW    #(MMAP_RAM_START_LIN&$FFFF),                      DBGXAM
                                      ;                       ;Comperator A
                                      ;                       MOVB    #$01, DBGC1
                                      ;                       MOVW    #(((BRK|TAG|COMPE)<<8)|(MMAP_RAM_END_LIN>>16)), DBGXCTL
                                      ;                       MOVW    #(MMAP_RAM_END_LIN&$FFFF),                      DBGXAM
                                      ;                       ;Arm DBG module
                                      ;                       MOVB    #ARM, DBGC1
                                      ;Application code
                                                              ;Print header string
004246 7F4246 CE 4B 01                DEMO_OUTER_LOOP         LDX     #DEMO_HEADER
004249 7F4249 MACRO                                           STRING_PRINT_BL
                                      ;#Basic print function - blocking                                                (STRING_PRINT_BL)
                                      ; args:   X:      start of the string                                            (STRING_PRINT_BL)
                                      ; result: X;      points to the byte after the string                            (STRING_PRINT_BL)
                                      ; SSTACK: 10 bytes                                                               (STRING_PRINT_BL)
                                      ;         Y and D are preserved                                                  (STRING_PRINT_BL)
004249 7F4249 MACRO                                           SSTACK_JOBSR    STRING_PRINT_BL, 10                      (STRING_PRINT_BL)
                                      ;#Check stack and call subroutine                                                (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_PRINT_BL/SSTACK_JOBSR)
004249 7F4249 MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
004249 7F4249 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004249 7F4249 8F 10 14                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00424C 7F424C 18 25 02 0D                                     BLO     OF                      ;=> 3 cycles     4 bytes (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004250 7F4250 8F 10 25                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004253 7F4253 18 22 02 0C                                     BHI     UF                      ;=> 3 cycles     4 bytes (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004257 7F4257 -> $4463                UF                      EQU     SSTACK_UF                                        (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004257 7F4257 -> $445D                OF                      EQU     SSTACK_OF                                        (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004257 7F4257 16 48 DD                                        JOBSR   \1                                               (STRING_PRINT_BL/SSTACK_JOBSR)
00425A 7F425A 18 0B 14 10 00                                  MOVB    #20, DEMO_LINE_COUNT
                                                              ;Wait for input
00425F 7F425F MACRO                   DEMO_INNER_LOOP         SCI_RX_BL
                                      ;#Receive one byte - blocking                                                    (SCI_RX_BL)
                                      ; args:   none                                                                   (SCI_RX_BL)
                                      ; result: A: error flags                                                         (SCI_RX_BL)
                                      ;         B: received data                                                       (SCI_RX_BL)
                                      ; SSTACK: 6 bytes                                                                (SCI_RX_BL)
                                      ;         X and Y are preserved                                                  (SCI_RX_BL)
00425F 7F425F MACRO                                           SSTACK_JOBSR    SCI_RX_BL, 6                             (SCI_RX_BL)
                                      ;#Check stack and call subroutine                                                (SCI_RX_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (SCI_RX_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (SCI_RX_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (SCI_RX_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (SCI_RX_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (SCI_RX_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (SCI_RX_BL/SSTACK_JOBSR)
00425F 7F425F MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_RX_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00425F 7F425F MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00425F 7F425F 8F 10 10                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004262 7F4262 18 25 01 F7                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004266 7F4266 8F 10 25                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004269 7F4269 18 22 01 F6                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00426D 7F426D -> $4463                UF                      EQU     SSTACK_UF                                        (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00426D 7F426D -> $445D                OF                      EQU     SSTACK_OF                                        (SCI_RX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00426D 7F426D 16 46 32                                        JOBSR   \1                                               (SCI_RX_BL/SSTACK_JOBSR)
                                                              ;Ignore RX errors
004270 7F4270 84 1F                                           ANDA    #(SCI_FLG_SWOR|OR|NF|FE|PF)
004272 7F4272 26 EB                                           BNE     DEMO_INNER_LOOP
                                                              ;TBNE   A, DEMO_LOOP
                                                              ;Print ASCII character (char in B)
004274 7F4274 B7 45                                           TFR     D, X
004276 7F4276 86 04                                           LDAA    #4
004278 7F4278 C6 20                                           LDAB    #" "
00427A 7F427A MACRO                                           STRING_FILL_BL
                                      ;#Print a number of filler characters - blocking (uncomment if needed)           (STRING_FILL_BL)
                                      ; args:   A: number of characters to be printed                                  (STRING_FILL_BL)
                                      ;         B: filler character                                                    (STRING_FILL_BL)
                                      ; result: A: $00                                                                 (STRING_FILL_BL)
                                      ; SSTACK: 9 bytes                                                                (STRING_FILL_BL)
                                      ;         X, Y and B are preserved                                               (STRING_FILL_BL)
00427A 7F427A MACRO                                           SSTACK_JOBSR    STRING_FILL_BL, 9                        (STRING_FILL_BL)
                                      ;#Check stack and call subroutine                                                (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_FILL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_FILL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_FILL_BL/SSTACK_JOBSR)
00427A 7F427A MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_FILL_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00427A 7F427A MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00427A 7F427A 8F 10 13                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00427D 7F427D 18 25 01 DC                                     BLO     OF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004281 7F4281 8F 10 25                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004284 7F4284 18 22 01 DB                                     BHI     UF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004288 7F4288 -> $4463                UF                      EQU     SSTACK_UF                                        (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004288 7F4288 -> $445D                OF                      EQU     SSTACK_OF                                        (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004288 7F4288 16 49 4B                                        JOBSR   \1                                               (STRING_FILL_BL/SSTACK_JOBSR)
00428B 7F428B B7 54                                           TFR     X, D
00428D 7F428D 87                                              CLRA
00428E 7F428E MACRO                                           STRING_PRINTABLE
                                      ;#Make ASCII character printable                                                 (STRING_PRINTABLE)
                                      ; args:   B: ASCII character (w/out termination)                                 (STRING_PRINTABLE)
                                      ; result: B: printable ASCII character or "."                                    (STRING_PRINTABLE)
                                      ; SSTACK: 2 bytes                                                                (STRING_PRINTABLE)
                                      ;         X, Y, and A are preserved                                              (STRING_PRINTABLE)
00428E 7F428E MACRO                                           SSTACK_JOBSR    STRING_PRINTABLE, 2                      (STRING_PRINTABLE)
                                      ;#Check stack and call subroutine                                                (STRING_PRINTABLE/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_PRINTABLE/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_PRINTABLE/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_PRINTABLE/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_PRINTABLE/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_PRINTABLE/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_PRINTABLE/SSTACK_JOBSR)
00428E 7F428E MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_PRINTABLE/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (STRING_PRINTABLE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (STRING_PRINTABLE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (STRING_PRINTABLE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (STRING_PRINTABLE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (STRING_PRINTABLE/SSTACK_JOBSR/SSTACK_PREPUSH)
00428E 7F428E MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (STRING_PRINTABLE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (STRING_PRINTABLE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (STRING_PRINTABLE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (STRING_PRINTABLE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_PRINTABLE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (STRING_PRINTABLE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (STRING_PRINTABLE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (STRING_PRINTABLE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (STRING_PRINTABLE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (STRING_PRINTABLE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (STRING_PRINTABLE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00428E 7F428E 8F 10 0C                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (STRING_PRINTABLE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004291 7F4291 18 25 01 C8                                     BLO     OF                      ;=> 3 cycles     4 bytes (STRING_PRINTABLE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004295 7F4295 8F 10 25                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (STRING_PRINTABLE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004298 7F4298 18 22 01 C7                                     BHI     UF                      ;=> 3 cycles     4 bytes (STRING_PRINTABLE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (STRING_PRINTABLE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (STRING_PRINTABLE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00429C 7F429C -> $4463                UF                      EQU     SSTACK_UF                                        (STRING_PRINTABLE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00429C 7F429C -> $445D                OF                      EQU     SSTACK_OF                                        (STRING_PRINTABLE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00429C 7F429C 16 49 AD                                        JOBSR   \1                                               (STRING_PRINTABLE/SSTACK_JOBSR)
00429F 7F429F MACRO                                           SCI_TX_BL
                                      ;#Transmit one byte - blocking                                                   (SCI_TX_BL)
                                      ; args:   B: data to be send                                                     (SCI_TX_BL)
                                      ; SSTACK: 7 bytes                                                                (SCI_TX_BL)
                                      ;         X, Y, and D are preserved                                              (SCI_TX_BL)
00429F 7F429F MACRO                                           SSTACK_JOBSR    SCI_TX_BL, 7                             (SCI_TX_BL)
                                      ;#Check stack and call subroutine                                                (SCI_TX_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (SCI_TX_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (SCI_TX_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (SCI_TX_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (SCI_TX_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (SCI_TX_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (SCI_TX_BL/SSTACK_JOBSR)
00429F 7F429F MACRO                                           SSTACK_PREPUSH  \2                                       (SCI_TX_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
00429F 7F429F MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00429F 7F429F 8F 10 11                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0042A2 7F42A2 18 25 01 B7                                     BLO     OF                      ;=> 3 cycles     4 bytes (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0042A6 7F42A6 8F 10 25                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0042A9 7F42A9 18 22 01 B6                                     BHI     UF                      ;=> 3 cycles     4 bytes (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0042AD 7F42AD -> $4463                UF                      EQU     SSTACK_UF                                        (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0042AD 7F42AD -> $445D                OF                      EQU     SSTACK_OF                                        (SCI_TX_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0042AD 7F42AD 16 44 BC                                        JOBSR   \1                                               (SCI_TX_BL/SSTACK_JOBSR)
                                                              ;Print hexadecimal value (char in X)
                                                              ;CLRA
                                                              ;LDAB   DEMO_LINE_COUNT
                                                              ;TFR    D, X
0042B0 7F42B0 CD 00 00                                        LDY     #$0000
0042B3 7F42B3 C6 10                                           LDAB    #16
0042B5 7F42B5 MACRO                                           NUM_REVERSE
                                      ;############################################################################### (NUM_REVERSE)
                                      ;# Macros                                                                      # (NUM_REVERSE)
                                      ;############################################################################### (NUM_REVERSE)
                                      ;#Initialization                                                                 (NUM_REVERSE)
                                      ;#Reverse unsigned double word                                                   (NUM_REVERSE)
                                      ; args:   Y:X: unsigned double value                                             (NUM_REVERSE)
                                      ;         B:   base   (2<=base<=16)                                              (NUM_REVERSE)
                                      ; result: A:   number of digits                                                  (NUM_REVERSE)
                                      ;         SP+0: MSB                                                              (NUM_REVERSE)
                                      ;         SP+1:  |                                                               (NUM_REVERSE)
                                      ;         SP+2:  |reverse                                                        (NUM_REVERSE)
                                      ;         SP+3:  |number                                                         (NUM_REVERSE)
                                      ;         SP+4:  |                                                               (NUM_REVERSE)
                                      ;         SP+5: LSB                                                              (NUM_REVERSE)
                                      ; SSTACK: 18 bytes                                                               (NUM_REVERSE)
                                      ;         X, Y and B are preserved                                               (NUM_REVERSE)
0042B5 7F42B5 MACRO                                           SSTACK_JOBSR    NUM_REVERSE, 18                          (NUM_REVERSE)
                                      ;#Check stack and call subroutine                                                (NUM_REVERSE/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVERSE/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVERSE/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVERSE/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVERSE/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVERSE/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVERSE/SSTACK_JOBSR)
0042B5 7F42B5 MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVERSE/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
0042B5 7F42B5 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0042B5 7F42B5 8F 10 1C                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0042B8 7F42B8 18 25 01 A1                                     BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0042BC 7F42BC 8F 10 25                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0042BF 7F42BF 18 22 01 A0                                     BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0042C3 7F42C3 -> $4463                UF                      EQU     SSTACK_UF                                        (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0042C3 7F42C3 -> $445D                OF                      EQU     SSTACK_OF                                        (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0042C3 7F42C3 16 49 F7                                        JOBSR   \1                                               (NUM_REVERSE/SSTACK_JOBSR)
0042C6 7F42C6 B7 76                                           TFR     SP, Y
0042C8 7F42C8 40                                              NEGA
0042C9 7F42C9 8B 05                                           ADDA    #5
0042CB 7F42CB C6 20                                           LDAB    #" "
0042CD 7F42CD MACRO                                           STRING_FILL_BL
                                      ;#Print a number of filler characters - blocking (uncomment if needed)           (STRING_FILL_BL)
                                      ; args:   A: number of characters to be printed                                  (STRING_FILL_BL)
                                      ;         B: filler character                                                    (STRING_FILL_BL)
                                      ; result: A: $00                                                                 (STRING_FILL_BL)
                                      ; SSTACK: 9 bytes                                                                (STRING_FILL_BL)
                                      ;         X, Y and B are preserved                                               (STRING_FILL_BL)
0042CD 7F42CD MACRO                                           SSTACK_JOBSR    STRING_FILL_BL, 9                        (STRING_FILL_BL)
                                      ;#Check stack and call subroutine                                                (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_FILL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_FILL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_FILL_BL/SSTACK_JOBSR)
0042CD 7F42CD MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_FILL_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0042CD 7F42CD MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0042CD 7F42CD 8F 10 13                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0042D0 7F42D0 18 25 01 89                                     BLO     OF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0042D4 7F42D4 8F 10 25                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0042D7 7F42D7 18 22 01 88                                     BHI     UF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0042DB 7F42DB -> $4463                UF                      EQU     SSTACK_UF                                        (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0042DB 7F42DB -> $445D                OF                      EQU     SSTACK_OF                                        (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0042DB 7F42DB 16 49 4B                                        JOBSR   \1                                               (STRING_FILL_BL/SSTACK_JOBSR)
0042DE 7F42DE C6 10                                           LDAB    #16
0042E0 7F42E0 MACRO                                           NUM_REVPRINT_BL
                                      ;#Print a reserse number digit - blocking                                        (NUM_REVPRINT_BL)
                                      ; args:   B:    base (2<=base<=16)                                               (NUM_REVPRINT_BL)
                                      ;         SP+0: MSB                                                              (NUM_REVPRINT_BL)
                                      ;         SP+1:  |                                                               (NUM_REVPRINT_BL)
                                      ;         SP+2:  |reverse                                                        (NUM_REVPRINT_BL)
                                      ;         SP+3:  |number                                                         (NUM_REVPRINT_BL)
                                      ;         SP+4:  |                                                               (NUM_REVPRINT_BL)
                                      ;         SP+5: LSB                                                              (NUM_REVPRINT_BL)
                                      ; result: SP+0: MSB                                                              (NUM_REVPRINT_BL)
                                      ;         SP+1:  |remaining                                                      (NUM_REVPRINT_BL)
                                      ;         SP+2:  | digits of                                                     (NUM_REVPRINT_BL)
                                      ;         SP+3:  |reverse                                                        (NUM_REVPRINT_BL)
                                      ;         SP+4:  |number                                                         (NUM_REVPRINT_BL)
                                      ;         SP+5: LSB                                                              (NUM_REVPRINT_BL)
                                      ;         C-flag: set if successful                                              (NUM_REVPRINT_BL)
                                      ; SSTACK: 8 bytes                                                                (NUM_REVPRINT_BL)
                                      ;         X, Y and D are preserved                                               (NUM_REVPRINT_BL)
0042E0 7F42E0 MACRO                                           NUM_CALL_BL     NUM_REVPRINT_NB, 19                      (NUM_REVPRINT_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; args:   1: non-blocking function                                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#macro NUM_MAKE_BL, 2                                                           (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       ;Call non-blocking subroutine as if it was blocking      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       NUM_CALL_BL     \1, \2                                   (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       ;Done                                                    (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       SSTACK_PREPULL  2                                        (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       RTS                                                      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#emac                                                                           (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Run a non-blocking subroutine as if it was blocking                            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; args:   1: non-blocking function                                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (NUM_REVPRINT_BL/NUM_CALL_BL)
0042E0 7F42E0                         LOOP                    ;Wait until TX buffer accepts new data                   (NUM_REVPRINT_BL/NUM_CALL_BL)
0042E0 7F42E0 MACRO                                           SCI_TX_READY_BL                                          (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Wait until TX queue can hold further data                                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; args:   none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; SSTACK: 6 bytes                                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
0042E0 7F42E0 MACRO                                           SSTACK_JOBSR    SCI_TX_READY_BL, 6                       (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ;#Check stack and call subroutine                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
0042E0 7F42E0 MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0042E0 7F42E0 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0042E0 7F42E0 8F 10 10                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0042E3 7F42E3 18 25 01 76                                     BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0042E7 7F42E7 8F 10 25                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0042EA 7F42EA 18 22 01 75                                     BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0042EE 7F42EE -> $4463                UF                      EQU     SSTACK_UF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0042EE 7F42EE -> $445D                OF                      EQU     SSTACK_OF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0042EE 7F42EE 16 45 A2                                        JOBSR   \1                                               (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                                              ;Call non-blocking function                              (NUM_REVPRINT_BL/NUM_CALL_BL)
0042F1 7F42F1 MACRO                                           SSTACK_JOBSR    \1, \2                                   (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Check stack and call subroutine                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
0042F1 7F42F1 MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0042F1 7F42F1 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0042F1 7F42F1 8F 10 1D                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0042F4 7F42F4 18 25 01 65                                     BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0042F8 7F42F8 8F 10 25                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0042FB 7F42FB 18 22 01 64                                     BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0042FF 7F42FF -> $4463                UF                      EQU     SSTACK_UF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0042FF 7F42FF -> $445D                OF                      EQU     SSTACK_OF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0042FF 7F42FF 16 4A 88                                        JOBSR   \1                                               (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
004302 7F4302 24 DC                                           BCC     LOOP            ;function unsuccessful           (NUM_REVPRINT_BL/NUM_CALL_BL)
004304 7F4304 MACRO                                           NUM_CLEAN_REVERSE
                                      ;#Clean-up stack space for reverse unsigned double word                          (NUM_CLEAN_REVERSE)
                                      ; args:   SP+0: MSB                                                              (NUM_CLEAN_REVERSE)
                                      ;         SP+1:  |                                                               (NUM_CLEAN_REVERSE)
                                      ;         SP+2:  |reverse                                                        (NUM_CLEAN_REVERSE)
                                      ;         SP+3:  |number                                                         (NUM_CLEAN_REVERSE)
                                      ;         SP+4:  |                                                               (NUM_CLEAN_REVERSE)
                                      ;         SP+5: LSB                                                              (NUM_CLEAN_REVERSE)
                                      ; result: none                                                                   (NUM_CLEAN_REVERSE)
                                      ; SSTACK: 18 bytes                                                               (NUM_CLEAN_REVERSE)
                                      ;         X, Y and D are preserved                                               (NUM_CLEAN_REVERSE)
004304 7F4304 MACRO                                           SSTACK_PREPULL  6                                        (NUM_CLEAN_REVERSE)
                                      ;#Check stack before pull operation                                              (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; result: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
004304 7F4304 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ;############################################################################### (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004304 7F4304 8F 10 0A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004307 7F4307 18 25 01 52                                     BLO     OF                      ;=> 3 cycles     4 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00430B 7F430B 8F 10 1F                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00430E 7F430E 18 22 01 51                                     BHI     UF                      ;=> 3 cycles     4 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004312 7F4312 -> $4463                UF                      EQU     SSTACK_UF                                        (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004312 7F4312 -> $445D                OF                      EQU     SSTACK_OF                                        (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004312 7F4312 1B 86                                           LEAS    6,SP                                             (NUM_CLEAN_REVERSE)
                                                              ;Print decimal value (char in X)
004314 7F4314 CD 00 00                                        LDY     #$0000
004317 7F4317 C6 0A                                           LDAB    #10
004319 7F4319 MACRO                                           NUM_REVERSE
                                      ;############################################################################### (NUM_REVERSE)
                                      ;# Macros                                                                      # (NUM_REVERSE)
                                      ;############################################################################### (NUM_REVERSE)
                                      ;#Initialization                                                                 (NUM_REVERSE)
                                      ;#Reverse unsigned double word                                                   (NUM_REVERSE)
                                      ; args:   Y:X: unsigned double value                                             (NUM_REVERSE)
                                      ;         B:   base   (2<=base<=16)                                              (NUM_REVERSE)
                                      ; result: A:   number of digits                                                  (NUM_REVERSE)
                                      ;         SP+0: MSB                                                              (NUM_REVERSE)
                                      ;         SP+1:  |                                                               (NUM_REVERSE)
                                      ;         SP+2:  |reverse                                                        (NUM_REVERSE)
                                      ;         SP+3:  |number                                                         (NUM_REVERSE)
                                      ;         SP+4:  |                                                               (NUM_REVERSE)
                                      ;         SP+5: LSB                                                              (NUM_REVERSE)
                                      ; SSTACK: 18 bytes                                                               (NUM_REVERSE)
                                      ;         X, Y and B are preserved                                               (NUM_REVERSE)
004319 7F4319 MACRO                                           SSTACK_JOBSR    NUM_REVERSE, 18                          (NUM_REVERSE)
                                      ;#Check stack and call subroutine                                                (NUM_REVERSE/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVERSE/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVERSE/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVERSE/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVERSE/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVERSE/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVERSE/SSTACK_JOBSR)
004319 7F4319 MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVERSE/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
004319 7F4319 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004319 7F4319 8F 10 1C                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00431C 7F431C 18 25 01 3D                                     BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004320 7F4320 8F 10 25                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004323 7F4323 18 22 01 3C                                     BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004327 7F4327 -> $4463                UF                      EQU     SSTACK_UF                                        (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004327 7F4327 -> $445D                OF                      EQU     SSTACK_OF                                        (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004327 7F4327 16 49 F7                                        JOBSR   \1                                               (NUM_REVERSE/SSTACK_JOBSR)
00432A 7F432A B7 76                                           TFR     SP, Y
00432C 7F432C 40                                              NEGA
00432D 7F432D 8B 05                                           ADDA    #5
00432F 7F432F C6 20                                           LDAB    #" "
004331 7F4331 MACRO                                           STRING_FILL_BL
                                      ;#Print a number of filler characters - blocking (uncomment if needed)           (STRING_FILL_BL)
                                      ; args:   A: number of characters to be printed                                  (STRING_FILL_BL)
                                      ;         B: filler character                                                    (STRING_FILL_BL)
                                      ; result: A: $00                                                                 (STRING_FILL_BL)
                                      ; SSTACK: 9 bytes                                                                (STRING_FILL_BL)
                                      ;         X, Y and B are preserved                                               (STRING_FILL_BL)
004331 7F4331 MACRO                                           SSTACK_JOBSR    STRING_FILL_BL, 9                        (STRING_FILL_BL)
                                      ;#Check stack and call subroutine                                                (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_FILL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_FILL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_FILL_BL/SSTACK_JOBSR)
004331 7F4331 MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_FILL_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
004331 7F4331 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004331 7F4331 8F 10 13                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004334 7F4334 18 25 01 25                                     BLO     OF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004338 7F4338 8F 10 25                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00433B 7F433B 18 22 01 24                                     BHI     UF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00433F 7F433F -> $4463                UF                      EQU     SSTACK_UF                                        (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00433F 7F433F -> $445D                OF                      EQU     SSTACK_OF                                        (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00433F 7F433F 16 49 4B                                        JOBSR   \1                                               (STRING_FILL_BL/SSTACK_JOBSR)
004342 7F4342 C6 0A                                           LDAB    #10
004344 7F4344 MACRO                                           NUM_REVPRINT_BL
                                      ;#Print a reserse number digit - blocking                                        (NUM_REVPRINT_BL)
                                      ; args:   B:    base (2<=base<=16)                                               (NUM_REVPRINT_BL)
                                      ;         SP+0: MSB                                                              (NUM_REVPRINT_BL)
                                      ;         SP+1:  |                                                               (NUM_REVPRINT_BL)
                                      ;         SP+2:  |reverse                                                        (NUM_REVPRINT_BL)
                                      ;         SP+3:  |number                                                         (NUM_REVPRINT_BL)
                                      ;         SP+4:  |                                                               (NUM_REVPRINT_BL)
                                      ;         SP+5: LSB                                                              (NUM_REVPRINT_BL)
                                      ; result: SP+0: MSB                                                              (NUM_REVPRINT_BL)
                                      ;         SP+1:  |remaining                                                      (NUM_REVPRINT_BL)
                                      ;         SP+2:  | digits of                                                     (NUM_REVPRINT_BL)
                                      ;         SP+3:  |reverse                                                        (NUM_REVPRINT_BL)
                                      ;         SP+4:  |number                                                         (NUM_REVPRINT_BL)
                                      ;         SP+5: LSB                                                              (NUM_REVPRINT_BL)
                                      ;         C-flag: set if successful                                              (NUM_REVPRINT_BL)
                                      ; SSTACK: 8 bytes                                                                (NUM_REVPRINT_BL)
                                      ;         X, Y and D are preserved                                               (NUM_REVPRINT_BL)
004344 7F4344 MACRO                                           NUM_CALL_BL     NUM_REVPRINT_NB, 19                      (NUM_REVPRINT_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; args:   1: non-blocking function                                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#macro NUM_MAKE_BL, 2                                                           (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       ;Call non-blocking subroutine as if it was blocking      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       NUM_CALL_BL     \1, \2                                   (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       ;Done                                                    (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       SSTACK_PREPULL  2                                        (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       RTS                                                      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#emac                                                                           (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Run a non-blocking subroutine as if it was blocking                            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; args:   1: non-blocking function                                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (NUM_REVPRINT_BL/NUM_CALL_BL)
004344 7F4344                         LOOP                    ;Wait until TX buffer accepts new data                   (NUM_REVPRINT_BL/NUM_CALL_BL)
004344 7F4344 MACRO                                           SCI_TX_READY_BL                                          (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Wait until TX queue can hold further data                                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; args:   none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; SSTACK: 6 bytes                                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
004344 7F4344 MACRO                                           SSTACK_JOBSR    SCI_TX_READY_BL, 6                       (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ;#Check stack and call subroutine                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
004344 7F4344 MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
004344 7F4344 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004344 7F4344 8F 10 10                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004347 7F4347 18 25 01 12                                     BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00434B 7F434B 8F 10 25                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00434E 7F434E 18 22 01 11                                     BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004352 7F4352 -> $4463                UF                      EQU     SSTACK_UF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004352 7F4352 -> $445D                OF                      EQU     SSTACK_OF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004352 7F4352 16 45 A2                                        JOBSR   \1                                               (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                                              ;Call non-blocking function                              (NUM_REVPRINT_BL/NUM_CALL_BL)
004355 7F4355 MACRO                                           SSTACK_JOBSR    \1, \2                                   (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Check stack and call subroutine                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
004355 7F4355 MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
004355 7F4355 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004355 7F4355 8F 10 1D                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004358 7F4358 18 25 01 01                                     BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00435C 7F435C 8F 10 25                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00435F 7F435F 18 22 01 00                                     BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004363 7F4363 -> $4463                UF                      EQU     SSTACK_UF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004363 7F4363 -> $445D                OF                      EQU     SSTACK_OF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004363 7F4363 16 4A 88                                        JOBSR   \1                                               (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
004366 7F4366 24 DC                                           BCC     LOOP            ;function unsuccessful           (NUM_REVPRINT_BL/NUM_CALL_BL)
004368 7F4368 MACRO                                           NUM_CLEAN_REVERSE
                                      ;#Clean-up stack space for reverse unsigned double word                          (NUM_CLEAN_REVERSE)
                                      ; args:   SP+0: MSB                                                              (NUM_CLEAN_REVERSE)
                                      ;         SP+1:  |                                                               (NUM_CLEAN_REVERSE)
                                      ;         SP+2:  |reverse                                                        (NUM_CLEAN_REVERSE)
                                      ;         SP+3:  |number                                                         (NUM_CLEAN_REVERSE)
                                      ;         SP+4:  |                                                               (NUM_CLEAN_REVERSE)
                                      ;         SP+5: LSB                                                              (NUM_CLEAN_REVERSE)
                                      ; result: none                                                                   (NUM_CLEAN_REVERSE)
                                      ; SSTACK: 18 bytes                                                               (NUM_CLEAN_REVERSE)
                                      ;         X, Y and D are preserved                                               (NUM_CLEAN_REVERSE)
004368 7F4368 MACRO                                           SSTACK_PREPULL  6                                        (NUM_CLEAN_REVERSE)
                                      ;#Check stack before pull operation                                              (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; result: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
004368 7F4368 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ;############################################################################### (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004368 7F4368 8F 10 0A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00436B 7F436B 18 25 00 EE                                     BLO     OF                      ;=> 3 cycles     4 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00436F 7F436F 8F 10 1F                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004372 7F4372 18 22 00 ED                                     BHI     UF                      ;=> 3 cycles     4 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004376 7F4376 -> $4463                UF                      EQU     SSTACK_UF                                        (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004376 7F4376 -> $445D                OF                      EQU     SSTACK_OF                                        (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004376 7F4376 1B 86                                           LEAS    6,SP                                             (NUM_CLEAN_REVERSE)
                                                              ;Print octal value (char in X)
004378 7F4378 CD 00 00                                        LDY     #$0000
00437B 7F437B C6 08                                           LDAB    #8
00437D 7F437D MACRO                                           NUM_REVERSE
                                      ;############################################################################### (NUM_REVERSE)
                                      ;# Macros                                                                      # (NUM_REVERSE)
                                      ;############################################################################### (NUM_REVERSE)
                                      ;#Initialization                                                                 (NUM_REVERSE)
                                      ;#Reverse unsigned double word                                                   (NUM_REVERSE)
                                      ; args:   Y:X: unsigned double value                                             (NUM_REVERSE)
                                      ;         B:   base   (2<=base<=16)                                              (NUM_REVERSE)
                                      ; result: A:   number of digits                                                  (NUM_REVERSE)
                                      ;         SP+0: MSB                                                              (NUM_REVERSE)
                                      ;         SP+1:  |                                                               (NUM_REVERSE)
                                      ;         SP+2:  |reverse                                                        (NUM_REVERSE)
                                      ;         SP+3:  |number                                                         (NUM_REVERSE)
                                      ;         SP+4:  |                                                               (NUM_REVERSE)
                                      ;         SP+5: LSB                                                              (NUM_REVERSE)
                                      ; SSTACK: 18 bytes                                                               (NUM_REVERSE)
                                      ;         X, Y and B are preserved                                               (NUM_REVERSE)
00437D 7F437D MACRO                                           SSTACK_JOBSR    NUM_REVERSE, 18                          (NUM_REVERSE)
                                      ;#Check stack and call subroutine                                                (NUM_REVERSE/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVERSE/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVERSE/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVERSE/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVERSE/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVERSE/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVERSE/SSTACK_JOBSR)
00437D 7F437D MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVERSE/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
00437D 7F437D MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00437D 7F437D 8F 10 1C                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004380 7F4380 18 25 00 D9                                     BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004384 7F4384 8F 10 25                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004387 7F4387 18 22 00 D8                                     BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00438B 7F438B -> $4463                UF                      EQU     SSTACK_UF                                        (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00438B 7F438B -> $445D                OF                      EQU     SSTACK_OF                                        (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00438B 7F438B 16 49 F7                                        JOBSR   \1                                               (NUM_REVERSE/SSTACK_JOBSR)
00438E 7F438E B7 76                                           TFR     SP, Y
004390 7F4390 40                                              NEGA
004391 7F4391 8B 05                                           ADDA    #5
004393 7F4393 C6 20                                           LDAB    #" "
004395 7F4395 MACRO                                           STRING_FILL_BL
                                      ;#Print a number of filler characters - blocking (uncomment if needed)           (STRING_FILL_BL)
                                      ; args:   A: number of characters to be printed                                  (STRING_FILL_BL)
                                      ;         B: filler character                                                    (STRING_FILL_BL)
                                      ; result: A: $00                                                                 (STRING_FILL_BL)
                                      ; SSTACK: 9 bytes                                                                (STRING_FILL_BL)
                                      ;         X, Y and B are preserved                                               (STRING_FILL_BL)
004395 7F4395 MACRO                                           SSTACK_JOBSR    STRING_FILL_BL, 9                        (STRING_FILL_BL)
                                      ;#Check stack and call subroutine                                                (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_FILL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_FILL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_FILL_BL/SSTACK_JOBSR)
004395 7F4395 MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_FILL_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
004395 7F4395 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004395 7F4395 8F 10 13                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004398 7F4398 18 25 00 C1                                     BLO     OF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00439C 7F439C 8F 10 25                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00439F 7F439F 18 22 00 C0                                     BHI     UF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0043A3 7F43A3 -> $4463                UF                      EQU     SSTACK_UF                                        (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0043A3 7F43A3 -> $445D                OF                      EQU     SSTACK_OF                                        (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0043A3 7F43A3 16 49 4B                                        JOBSR   \1                                               (STRING_FILL_BL/SSTACK_JOBSR)
0043A6 7F43A6 C6 08                                           LDAB    #8
0043A8 7F43A8 MACRO                                           NUM_REVPRINT_BL
                                      ;#Print a reserse number digit - blocking                                        (NUM_REVPRINT_BL)
                                      ; args:   B:    base (2<=base<=16)                                               (NUM_REVPRINT_BL)
                                      ;         SP+0: MSB                                                              (NUM_REVPRINT_BL)
                                      ;         SP+1:  |                                                               (NUM_REVPRINT_BL)
                                      ;         SP+2:  |reverse                                                        (NUM_REVPRINT_BL)
                                      ;         SP+3:  |number                                                         (NUM_REVPRINT_BL)
                                      ;         SP+4:  |                                                               (NUM_REVPRINT_BL)
                                      ;         SP+5: LSB                                                              (NUM_REVPRINT_BL)
                                      ; result: SP+0: MSB                                                              (NUM_REVPRINT_BL)
                                      ;         SP+1:  |remaining                                                      (NUM_REVPRINT_BL)
                                      ;         SP+2:  | digits of                                                     (NUM_REVPRINT_BL)
                                      ;         SP+3:  |reverse                                                        (NUM_REVPRINT_BL)
                                      ;         SP+4:  |number                                                         (NUM_REVPRINT_BL)
                                      ;         SP+5: LSB                                                              (NUM_REVPRINT_BL)
                                      ;         C-flag: set if successful                                              (NUM_REVPRINT_BL)
                                      ; SSTACK: 8 bytes                                                                (NUM_REVPRINT_BL)
                                      ;         X, Y and D are preserved                                               (NUM_REVPRINT_BL)
0043A8 7F43A8 MACRO                                           NUM_CALL_BL     NUM_REVPRINT_NB, 19                      (NUM_REVPRINT_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; args:   1: non-blocking function                                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#macro NUM_MAKE_BL, 2                                                           (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       ;Call non-blocking subroutine as if it was blocking      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       NUM_CALL_BL     \1, \2                                   (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       ;Done                                                    (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       SSTACK_PREPULL  2                                        (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       RTS                                                      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#emac                                                                           (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Run a non-blocking subroutine as if it was blocking                            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; args:   1: non-blocking function                                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (NUM_REVPRINT_BL/NUM_CALL_BL)
0043A8 7F43A8                         LOOP                    ;Wait until TX buffer accepts new data                   (NUM_REVPRINT_BL/NUM_CALL_BL)
0043A8 7F43A8 MACRO                                           SCI_TX_READY_BL                                          (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Wait until TX queue can hold further data                                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; args:   none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; SSTACK: 6 bytes                                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
0043A8 7F43A8 MACRO                                           SSTACK_JOBSR    SCI_TX_READY_BL, 6                       (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ;#Check stack and call subroutine                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
0043A8 7F43A8 MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0043A8 7F43A8 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0043A8 7F43A8 8F 10 10                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0043AB 7F43AB 18 25 00 AE                                     BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0043AF 7F43AF 8F 10 25                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0043B2 7F43B2 18 22 00 AD                                     BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0043B6 7F43B6 -> $4463                UF                      EQU     SSTACK_UF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0043B6 7F43B6 -> $445D                OF                      EQU     SSTACK_OF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0043B6 7F43B6 16 45 A2                                        JOBSR   \1                                               (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                                              ;Call non-blocking function                              (NUM_REVPRINT_BL/NUM_CALL_BL)
0043B9 7F43B9 MACRO                                           SSTACK_JOBSR    \1, \2                                   (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Check stack and call subroutine                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
0043B9 7F43B9 MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0043B9 7F43B9 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0043B9 7F43B9 8F 10 1D                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0043BC 7F43BC 18 25 00 9D                                     BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0043C0 7F43C0 8F 10 25                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0043C3 7F43C3 18 22 00 9C                                     BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0043C7 7F43C7 -> $4463                UF                      EQU     SSTACK_UF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0043C7 7F43C7 -> $445D                OF                      EQU     SSTACK_OF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0043C7 7F43C7 16 4A 88                                        JOBSR   \1                                               (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
0043CA 7F43CA 24 DC                                           BCC     LOOP            ;function unsuccessful           (NUM_REVPRINT_BL/NUM_CALL_BL)
0043CC 7F43CC MACRO                                           NUM_CLEAN_REVERSE
                                      ;#Clean-up stack space for reverse unsigned double word                          (NUM_CLEAN_REVERSE)
                                      ; args:   SP+0: MSB                                                              (NUM_CLEAN_REVERSE)
                                      ;         SP+1:  |                                                               (NUM_CLEAN_REVERSE)
                                      ;         SP+2:  |reverse                                                        (NUM_CLEAN_REVERSE)
                                      ;         SP+3:  |number                                                         (NUM_CLEAN_REVERSE)
                                      ;         SP+4:  |                                                               (NUM_CLEAN_REVERSE)
                                      ;         SP+5: LSB                                                              (NUM_CLEAN_REVERSE)
                                      ; result: none                                                                   (NUM_CLEAN_REVERSE)
                                      ; SSTACK: 18 bytes                                                               (NUM_CLEAN_REVERSE)
                                      ;         X, Y and D are preserved                                               (NUM_CLEAN_REVERSE)
0043CC 7F43CC MACRO                                           SSTACK_PREPULL  6                                        (NUM_CLEAN_REVERSE)
                                      ;#Check stack before pull operation                                              (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; result: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
0043CC 7F43CC MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ;############################################################################### (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0043CC 7F43CC 8F 10 0A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0043CF 7F43CF 18 25 00 8A                                     BLO     OF                      ;=> 3 cycles     4 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0043D3 7F43D3 8F 10 1F                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0043D6 7F43D6 18 22 00 89                                     BHI     UF                      ;=> 3 cycles     4 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0043DA 7F43DA -> $4463                UF                      EQU     SSTACK_UF                                        (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0043DA 7F43DA -> $445D                OF                      EQU     SSTACK_OF                                        (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
0043DA 7F43DA 1B 86                                           LEAS    6,SP                                             (NUM_CLEAN_REVERSE)
                                                              ;Print binary value (char in X)
0043DC 7F43DC 86 02                                           LDAA    #2
0043DE 7F43DE C6 20                                           LDAB    #" "
0043E0 7F43E0 MACRO                                           STRING_FILL_BL
                                      ;#Print a number of filler characters - blocking (uncomment if needed)           (STRING_FILL_BL)
                                      ; args:   A: number of characters to be printed                                  (STRING_FILL_BL)
                                      ;         B: filler character                                                    (STRING_FILL_BL)
                                      ; result: A: $00                                                                 (STRING_FILL_BL)
                                      ; SSTACK: 9 bytes                                                                (STRING_FILL_BL)
                                      ;         X, Y and B are preserved                                               (STRING_FILL_BL)
0043E0 7F43E0 MACRO                                           SSTACK_JOBSR    STRING_FILL_BL, 9                        (STRING_FILL_BL)
                                      ;#Check stack and call subroutine                                                (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_FILL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_FILL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_FILL_BL/SSTACK_JOBSR)
0043E0 7F43E0 MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_FILL_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
0043E0 7F43E0 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0043E0 7F43E0 8F 10 13                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0043E3 7F43E3 25 78                                           BLO     OF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0043E5 7F43E5 8F 10 25                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0043E8 7F43E8 22 79                                           BHI     UF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0043EA 7F43EA -> $4463                UF                      EQU     SSTACK_UF                                        (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0043EA 7F43EA -> $445D                OF                      EQU     SSTACK_OF                                        (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0043EA 7F43EA 16 49 4B                                        JOBSR   \1                                               (STRING_FILL_BL/SSTACK_JOBSR)
0043ED 7F43ED CD 00 00                                        LDY     #$0000
0043F0 7F43F0 C6 02                                           LDAB    #2
0043F2 7F43F2 MACRO                                           NUM_REVERSE
                                      ;############################################################################### (NUM_REVERSE)
                                      ;# Macros                                                                      # (NUM_REVERSE)
                                      ;############################################################################### (NUM_REVERSE)
                                      ;#Initialization                                                                 (NUM_REVERSE)
                                      ;#Reverse unsigned double word                                                   (NUM_REVERSE)
                                      ; args:   Y:X: unsigned double value                                             (NUM_REVERSE)
                                      ;         B:   base   (2<=base<=16)                                              (NUM_REVERSE)
                                      ; result: A:   number of digits                                                  (NUM_REVERSE)
                                      ;         SP+0: MSB                                                              (NUM_REVERSE)
                                      ;         SP+1:  |                                                               (NUM_REVERSE)
                                      ;         SP+2:  |reverse                                                        (NUM_REVERSE)
                                      ;         SP+3:  |number                                                         (NUM_REVERSE)
                                      ;         SP+4:  |                                                               (NUM_REVERSE)
                                      ;         SP+5: LSB                                                              (NUM_REVERSE)
                                      ; SSTACK: 18 bytes                                                               (NUM_REVERSE)
                                      ;         X, Y and B are preserved                                               (NUM_REVERSE)
0043F2 7F43F2 MACRO                                           SSTACK_JOBSR    NUM_REVERSE, 18                          (NUM_REVERSE)
                                      ;#Check stack and call subroutine                                                (NUM_REVERSE/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVERSE/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVERSE/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVERSE/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVERSE/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVERSE/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVERSE/SSTACK_JOBSR)
0043F2 7F43F2 MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVERSE/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
0043F2 7F43F2 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0043F2 7F43F2 8F 10 1C                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0043F5 7F43F5 25 66                                           BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0043F7 7F43F7 8F 10 25                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0043FA 7F43FA 22 67                                           BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0043FC 7F43FC -> $4463                UF                      EQU     SSTACK_UF                                        (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0043FC 7F43FC -> $445D                OF                      EQU     SSTACK_OF                                        (NUM_REVERSE/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
0043FC 7F43FC 16 49 F7                                        JOBSR   \1                                               (NUM_REVERSE/SSTACK_JOBSR)
0043FF 7F43FF B7 76                                           TFR     SP, Y
004401 7F4401 40                                              NEGA
004402 7F4402 8B 08                                           ADDA    #8
004404 7F4404 C6 30                                           LDAB    #"0"
004406 7F4406 MACRO                                           STRING_FILL_BL
                                      ;#Print a number of filler characters - blocking (uncomment if needed)           (STRING_FILL_BL)
                                      ; args:   A: number of characters to be printed                                  (STRING_FILL_BL)
                                      ;         B: filler character                                                    (STRING_FILL_BL)
                                      ; result: A: $00                                                                 (STRING_FILL_BL)
                                      ; SSTACK: 9 bytes                                                                (STRING_FILL_BL)
                                      ;         X, Y and B are preserved                                               (STRING_FILL_BL)
004406 7F4406 MACRO                                           SSTACK_JOBSR    STRING_FILL_BL, 9                        (STRING_FILL_BL)
                                      ;#Check stack and call subroutine                                                (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_FILL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_FILL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_FILL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_FILL_BL/SSTACK_JOBSR)
004406 7F4406 MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_FILL_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
004406 7F4406 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004406 7F4406 8F 10 13                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004409 7F4409 25 52                                           BLO     OF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00440B 7F440B 8F 10 25                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00440E 7F440E 22 53                                           BHI     UF                      ;=> 3 cycles     4 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004410 7F4410 -> $4463                UF                      EQU     SSTACK_UF                                        (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004410 7F4410 -> $445D                OF                      EQU     SSTACK_OF                                        (STRING_FILL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004410 7F4410 16 49 4B                                        JOBSR   \1                                               (STRING_FILL_BL/SSTACK_JOBSR)
004413 7F4413 C6 02                                           LDAB    #2
004415 7F4415 MACRO                                           NUM_REVPRINT_BL
                                      ;#Print a reserse number digit - blocking                                        (NUM_REVPRINT_BL)
                                      ; args:   B:    base (2<=base<=16)                                               (NUM_REVPRINT_BL)
                                      ;         SP+0: MSB                                                              (NUM_REVPRINT_BL)
                                      ;         SP+1:  |                                                               (NUM_REVPRINT_BL)
                                      ;         SP+2:  |reverse                                                        (NUM_REVPRINT_BL)
                                      ;         SP+3:  |number                                                         (NUM_REVPRINT_BL)
                                      ;         SP+4:  |                                                               (NUM_REVPRINT_BL)
                                      ;         SP+5: LSB                                                              (NUM_REVPRINT_BL)
                                      ; result: SP+0: MSB                                                              (NUM_REVPRINT_BL)
                                      ;         SP+1:  |remaining                                                      (NUM_REVPRINT_BL)
                                      ;         SP+2:  | digits of                                                     (NUM_REVPRINT_BL)
                                      ;         SP+3:  |reverse                                                        (NUM_REVPRINT_BL)
                                      ;         SP+4:  |number                                                         (NUM_REVPRINT_BL)
                                      ;         SP+5: LSB                                                              (NUM_REVPRINT_BL)
                                      ;         C-flag: set if successful                                              (NUM_REVPRINT_BL)
                                      ; SSTACK: 8 bytes                                                                (NUM_REVPRINT_BL)
                                      ;         X, Y and D are preserved                                               (NUM_REVPRINT_BL)
004415 7F4415 MACRO                                           NUM_CALL_BL     NUM_REVPRINT_NB, 19                      (NUM_REVPRINT_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; args:   1: non-blocking function                                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#macro NUM_MAKE_BL, 2                                                           (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       ;Call non-blocking subroutine as if it was blocking      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       NUM_CALL_BL     \1, \2                                   (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       ;Done                                                    (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       SSTACK_PREPULL  2                                        (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;                       RTS                                                      (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#emac                                                                           (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Run a non-blocking subroutine as if it was blocking                            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; args:   1: non-blocking function                                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;         rgister output of the non-blocking function is preserved               (NUM_REVPRINT_BL/NUM_CALL_BL)
004415 7F4415                         LOOP                    ;Wait until TX buffer accepts new data                   (NUM_REVPRINT_BL/NUM_CALL_BL)
004415 7F4415 MACRO                                           SCI_TX_READY_BL                                          (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Wait until TX queue can hold further data                                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; args:   none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ; SSTACK: 6 bytes                                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
004415 7F4415 MACRO                                           SSTACK_JOBSR    SCI_TX_READY_BL, 6                       (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL)
                                      ;#Check stack and call subroutine                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
004415 7F4415 MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
004415 7F4415 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004415 7F4415 8F 10 10                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004418 7F4418 25 43                                           BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00441A 7F441A 8F 10 25                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00441D 7F441D 22 44                                           BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00441F 7F441F -> $4463                UF                      EQU     SSTACK_UF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00441F 7F441F -> $445D                OF                      EQU     SSTACK_OF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00441F 7F441F 16 45 A2                                        JOBSR   \1                                               (NUM_REVPRINT_BL/NUM_CALL_BL/SCI_TX_READY_BL/SSTACK_JOBSR)
                                                              ;Call non-blocking function                              (NUM_REVPRINT_BL/NUM_CALL_BL)
004422 7F4422 MACRO                                           SSTACK_JOBSR    \1, \2                                   (NUM_REVPRINT_BL/NUM_CALL_BL)
                                      ;#Check stack and call subroutine                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
004422 7F4422 MACRO                                           SSTACK_PREPUSH  \2                                       (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
004422 7F4422 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004422 7F4422 8F 10 1D                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004425 7F4425 25 36                                           BLO     OF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004427 7F4427 8F 10 25                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00442A 7F442A 22 37                                           BHI     UF                      ;=> 3 cycles     4 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00442C 7F442C -> $4463                UF                      EQU     SSTACK_UF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00442C 7F442C -> $445D                OF                      EQU     SSTACK_OF                                        (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00442C 7F442C 16 4A 88                                        JOBSR   \1                                               (NUM_REVPRINT_BL/NUM_CALL_BL/SSTACK_JOBSR)
00442F 7F442F 24 E4                                           BCC     LOOP            ;function unsuccessful           (NUM_REVPRINT_BL/NUM_CALL_BL)
004431 7F4431 MACRO                                           NUM_CLEAN_REVERSE
                                      ;#Clean-up stack space for reverse unsigned double word                          (NUM_CLEAN_REVERSE)
                                      ; args:   SP+0: MSB                                                              (NUM_CLEAN_REVERSE)
                                      ;         SP+1:  |                                                               (NUM_CLEAN_REVERSE)
                                      ;         SP+2:  |reverse                                                        (NUM_CLEAN_REVERSE)
                                      ;         SP+3:  |number                                                         (NUM_CLEAN_REVERSE)
                                      ;         SP+4:  |                                                               (NUM_CLEAN_REVERSE)
                                      ;         SP+5: LSB                                                              (NUM_CLEAN_REVERSE)
                                      ; result: none                                                                   (NUM_CLEAN_REVERSE)
                                      ; SSTACK: 18 bytes                                                               (NUM_CLEAN_REVERSE)
                                      ;         X, Y and D are preserved                                               (NUM_CLEAN_REVERSE)
004431 7F4431 MACRO                                           SSTACK_PREPULL  6                                        (NUM_CLEAN_REVERSE)
                                      ;#Check stack before pull operation                                              (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; args:   1: expecteded stack content (bytes)                                    (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; result: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ; SSTACK: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ;         X, Y, and D are preserved                                              (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
004431 7F4431 MACRO                                           SSTACK_CHECK_BOUNDARIES 0, \1                            (NUM_CLEAN_REVERSE/SSTACK_PREPULL)
                                      ;############################################################################### (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004431 7F4431 8F 10 0A                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004434 7F4434 25 27                                           BLO     OF                      ;=> 3 cycles     4 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004436 7F4436 8F 10 1F                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
004439 7F4439 22 28                                           BHI     UF                      ;=> 3 cycles     4 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00443B 7F443B -> $4463                UF                      EQU     SSTACK_UF                                        (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00443B 7F443B -> $445D                OF                      EQU     SSTACK_OF                                        (NUM_CLEAN_REVERSE/SSTACK_PREPULL/SSTACK_CHECK_BOUNDARIES)
00443B 7F443B 1B 86                                           LEAS    6,SP                                             (NUM_CLEAN_REVERSE)
                                                              ;Decrement line count
00443D 7F443D 73 10 00                                        DEC     DEMO_LINE_COUNT
004440 7F4440 18 27 FE 02                                     BEQ     DEMO_OUTER_LOOP
                                                              ;Print new line
004444 7F4444 CE 4B C9                                        LDX     #STRING_STR_NL
004447 7F4447 MACRO                                           STRING_PRINT_BL
                                      ;#Basic print function - blocking                                                (STRING_PRINT_BL)
                                      ; args:   X:      start of the string                                            (STRING_PRINT_BL)
                                      ; result: X;      points to the byte after the string                            (STRING_PRINT_BL)
                                      ; SSTACK: 10 bytes                                                               (STRING_PRINT_BL)
                                      ;         Y and D are preserved                                                  (STRING_PRINT_BL)
004447 7F4447 MACRO                                           SSTACK_JOBSR    STRING_PRINT_BL, 10                      (STRING_PRINT_BL)
                                      ;#Check stack and call subroutine                                                (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_PRINT_BL/SSTACK_JOBSR)
004447 7F4447 MACRO                                           SSTACK_PREPUSH  \2                                       (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;#Check stack before push operation                                              (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; args:   1: required stack capacity (bytes)                                     (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; result: none                                                                   (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ; SSTACK: none                                                                   (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;         X, Y, and D are preserved                                              (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
004447 7F4447 MACRO                                           SSTACK_CHECK_BOUNDARIES \1, 0                            (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH)
                                      ;############################################################################### (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;# Macros                                                                      # (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;############################################################################### (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Initialization (initialization done by ISTACK module)                          (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;#Check stack boundaries                                                         (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; args:   1: required stack capacity (bytes)                                     (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         2: expected stack content  (bytes)                                     (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; result: none                                                                   (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ; SSTACK: none                                                                   (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                      ;         X, Y, and D are preserved                                              (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004447 7F4447 8F 10 14                                        CPS     #SSTACK_TOP+\1          ;=> 2 cycles     3 bytes (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00444A 7F444A 25 11                                           BLO     OF                      ;=> 3 cycles     4 bytes (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00444C 7F444C 8F 10 25                                        CPS     #SSTACK_BOTTOM-\2       ;=> 2 cycles     3 bytes (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
00444F 7F444F 22 12                                           BHI     UF                      ;=> 3 cycles     4 bytes (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  ---------    -------- (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
                                                                                              ;  10 cycles    14 bytes (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004451 7F4451 -> $4463                UF                      EQU     SSTACK_UF                                        (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004451 7F4451 -> $445D                OF                      EQU     SSTACK_OF                                        (STRING_PRINT_BL/SSTACK_JOBSR/SSTACK_PREPUSH/SSTACK_CHECK_BOUNDARIES)
004451 7F4451 16 48 DD                                        JOBSR   \1                                               (STRING_PRINT_BL/SSTACK_JOBSR)
004454 7F4454 06 42 5F                                        JOB     DEMO_INNER_LOOP
004457 7F4457 -> $4457                DEMO_CODE_END           EQU     *
004457 7F4457 -> $7F4457              DEMO_CODE_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
004B01 7F4B01                                                 ORG     DEMO_TABS_START, DEMO_TABS_START_LIN
004B01 7F4B01 MACRO                   DEMO_HEADER             STRING_NL_NONTERM
                                      ;#Non-terminated line break                                                      (STRING_NL_NONTERM)
004B01 7F4B01 0D                                              DB      STRING_SYM_CR                                    (STRING_NL_NONTERM)
004B02 7F4B02 0A                                              DB      STRING_SYM_LF                                    (STRING_NL_NONTERM)
004B03 7F4B03 MACRO                                           STRING_NL_NONTERM
                                      ;#Non-terminated line break                                                      (STRING_NL_NONTERM)
004B03 7F4B03 0D                                              DB      STRING_SYM_CR                                    (STRING_NL_NONTERM)
004B04 7F4B04 0A                                              DB      STRING_SYM_LF                                    (STRING_NL_NONTERM)
004B05 7F4B05 41 53 43 49 49 20 20 48                         FCC     "ASCII  Hex  Dec  Oct       Bin"
              65 78 20 20 44 65 63 20 
              20 4F 63 74 20 20 20 20 
              20 20 20 42 69 6E       
004B23 7F4B23 MACRO                                           STRING_NL_NONTERM
                                      ;#Non-terminated line break                                                      (STRING_NL_NONTERM)
004B23 7F4B23 0D                                              DB      STRING_SYM_CR                                    (STRING_NL_NONTERM)
004B24 7F4B24 0A                                              DB      STRING_SYM_LF                                    (STRING_NL_NONTERM)
004B25 7F4B25 2D 2D 2D 2D 2D 2D 2D 2D                         FCC     "------------------------------"
              2D 2D 2D 2D 2D 2D 2D 2D 
              2D 2D 2D 2D 2D 2D 2D 2D 
              2D 2D 2D 2D 2D 2D       
004B43 7F4B43 MACRO                                           STRING_NL_TERM
                                      ;#Terminated line break                                                          (STRING_NL_TERM)
004B43 7F4B43 0D                                              DB      STRING_SYM_CR                                    (STRING_NL_TERM)
004B44 7F4B44 8A                                              DB      (STRING_SYM_LF|$80)                              (STRING_NL_TERM)
004B45 7F4B45 -> $4B45                DEMO_TABS_END           EQU     *
004B45 7F4B45 -> $7F4B45              DEMO_TABS_END_LIN       EQU     @
