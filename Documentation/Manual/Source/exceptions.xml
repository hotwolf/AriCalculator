<?xml version="1.0" encoding="UTF-8"?>
<section xml:id="exceptions" 
	 xmlns="http://docbook.org/ns/docbook"
	 xmlns:xi="http://www.w3.org/2001/XInclude" 
	 version="5.0">

  <title>Exceptions</title>
  <info>
    <keywordset>
      <keyword>abort</keyword>
      <keyword>error</keyword>
      <keyword>fatal</keyword>
      <keyword>severity</keyword>
      <keyword>exception</keyword>
      <keyword>throw code</keyword>
    </keywordset>
  </info> 
  <para>
    <emphasis>S12CForth</emphasis> supports exceptions to handle unexpected events. Exceptions can be thrown by
    the pre-defined words if they face a situation where they can't perform their task propery 
    (e.g. due to insufficient arguments):
  </para> 
  <screen>
> .s                              <co xml:id="exceptions_co1.1"/>
Parameter stack is empty! ok
> abs                             <co xml:id="exceptions_co1.2"/>
Error! Parameter stack underflow! <co xml:id="exceptions_co1.3"/>
>
  </screen>
  <calloutlist>
    <callout arearefs="exceptions_co1.1">
      <para>This shows the content of the parameter stack.</para>
    </callout>
    <callout arearefs="exceptions_co1.2">
      <para>The word <link linkend="word_abs"><command>ABS</command></link> one argument on the parameter stack,
      but the parameter stack is empty.</para>
    </callout>
    <callout arearefs="exceptions_co1.3">
      <para>The resulting error message.</para>
    </callout>
  </calloutlist>

  <para>
    Exceptions can be also thrown by an application by executing 
    <link linkend="word_throw"><command>THROW</command></link>. The type of exception is selected by a throw code
    (see <xref linkend="exceptions_throw_codes_"/>) that is handed to <link linkend="word_throw">
    <command>THROW</command></link> as an argument:
  </para>
  <screen>
> -4 throw                        <co xml:id="exceptions_co2.1"/>
Error! Parameter stack underflow! <co xml:id="exceptions_co2.2"/>
>
  </screen>
  <calloutlist>
    <callout arearefs="exceptions_co2.1">
      <para><literal>-4</literal> is the throw code for a parameter stack underflow.</para>
    </callout>
    <callout arearefs="exceptions_co2.2">
      <para>Manulally throwing this exception results in the same error.</para>
    </callout>
  </calloutlist>

  <para>
    By default any thrown exception will terminate the application word and will cause the systen to 
    enter the interpretation state after displaying an error message. However it is possible to catch exceptions 
    from within the application an implement custom exception handlers. This can be done with the help of 
    <link linkend="word_catch"><command>CATCH</command></link>. <link linkend="word_catch"><command>CATCH</command></link>
    executes an execution token and return a throw code (or zero if no exception occured):
  </para>
  <screen>
> .s                              <co xml:id="exceptions_co3.1"/>
Parameter stack is empty! ok
> ' abs catch ok                  <co xml:id="exceptions_co3.2"/>
> .s                              <co xml:id="exceptions_co3.3"/>
Parameter stack:                  <co xml:id="exceptions_co3.4"/>
1:    -4 ok
>
  </screen>
  <calloutlist>
    <callout arearefs="exceptions_co3.1">
      <para>Verify that the parameter stack is empty.</para>
    </callout>
    <callout arearefs="exceptions_co3.2">
      <para>Execute <link linkend="word_abs"><command>ABS</command></link> through
      <link linkend="word_catch"><command>CATCH</command></link>. No error message is printed.</para>
    </callout>
    <callout arearefs="exceptions_co3.3">
      <para>Check the parameter again.</para>
    </callout>
    <callout arearefs="exceptions_co3.4">
      <para>The throw code for parameter stack underflows (<literal>-4</literal>) has been returned
      onto the parameter stack.</para>
    </callout>
  </calloutlist>

  <para>
    An typical exception handler is implemented as follows. It checks the returned throw code, handles the expected 
    exceptions and rethrows the unexpected ones:
  </para>
  <screen>
> : catch-abort-and-psuf                                 <co xml:id="exceptions_co4.1"/>
+ catch                                                  <co xml:id="exceptions_co4.2"/>
+ case                                                   <co xml:id="exceptions_co4.3"/>
+ -1 of cr ." Caught an abort!" endof                    <co xml:id="exceptions_co4.4"/>
+ -4 of cr ." Caught a parameter stack underflow!" endof <co xml:id="exceptions_co4.5"/>
+ throw                                                  <co xml:id="exceptions_co4.6"/>
+ endcase ; ok
> ' abort catch-abort-and-psuf                           <co xml:id="exceptions_co4.7"/>
Caught an abort! ok
> ' abs catch-abort-and-psuf                             <co xml:id="exceptions_co4.8"/>
Caught a parameter stack underflow! ok
> 1 0 /                                                  <co xml:id="exceptions_co4.9"/>
Error! Division by zero!
>
  </screen>
  <calloutlist>
    <callout arearefs="exceptions_co4.1">
      <para>This is a colon definition for an exception handler that catches 
      <link linkend="word_abort"><command>ABORT</command></link>s and parameter stack underflows.</para>
    </callout>
    <callout arearefs="exceptions_co4.2">
      <para>Execute an execution token thrhough this exception handler.</para>
    </callout>
    <callout arearefs="exceptions_co4.3">
      <para>Exception handlers are typically coded with a 
      <link linkend="word_case"><command>CASE</command></link> statement.</para>
    </callout>
    <callout arearefs="exceptions_co4.4">
      <para>This is the handler code for <link linkend="word_abort"><command>ABORT</command></link>s 
      (throw code: <literal>-1</literal>).</para>
    </callout>
    <callout arearefs="exceptions_co4.5">
      <para>This is the handler code for parameter stack underflows (throw code: <literal>-4</literal>).</para>
    </callout>
    <callout arearefs="exceptions_co4.6">
      <para>All other (unexpected) throw codes are re-thrown.</para>
    </callout>
    <callout arearefs="exceptions_co4.7">
      <para>The exception handler cathes an <link linkend="word_abort"><command>ABORT</command></link>.</para>
    </callout>
    <callout arearefs="exceptions_co4.8">
      <para>The exception handler cathes a parameter stack overflow.</para>
    </callout>
    <callout arearefs="exceptions_co4.9">
      <para>All other exception produce an error message.</para>
    </callout>
  </calloutlist>

  <section xml:id="exceptions_severity">
    <title>Severity Levels</title>
    <para>
      <emphasis>S12CForth</emphasis> exceptions can be thrown with two severity levels: <quote>Error!</quote> and 
      <quote>Fatal!</quote>
    </para>
    <section xml:id="exceptions_severity_error">
      <title>Error!</title>
      <para>
	Uncought <quote>Error!</quote> exceptions reset the parameter and the return stack. Then they print the 
	associated error message (<quote>Error! ...!</quote>) and force the system into interpretation state. 
      </para>
    </section>
    <section xml:id="exceptions_severity_fatal">
      <title>Fatal!</title>
      <para>
	Uncought <quote>Fatal!</quote> exceptions perform a hardware reset of the MCU. The entire system will be reinitialized 
	(incl. drivers, buffer, stacks) and the user dictionary will be cleared. Once the system is operational again it will
	print the associated error message (<quote>Fatal! ...!</quote>).
	A Fatal error should only be thrown if a severe problem has been detected, that can't be resolved by the application.
      </para>
    </section>
  </section>

  <section xml:id="exceptions_throw_codes">
    <title>Throw Codes</title>
    <para>
      There are two kinds of throw codes: Predefdefined ones and user-defined throw codes.
    </para>
    <section xml:id="exceptions_system_throw_codes">
      <title>Predefined Throw Codes</title>
      <para>
	<emphasis>S12CForth</emphasis> defines a set of codes for exceptions thrown by its predefined
	set of words. The majority of these throw codes have been adopted from the ANSForth standard
	<citation>dpans94</citation>.
      </para>
      <table xml:id="exceptions_system_throw_codes_table">
	<title>Predefined Throw Codes</title>
	<tgroup cols="5" colsep="0" rowsep="1">
	  <colspec colname="code" align="right"/>
	  <colspec colname="severity" align="left"/>
	  <colspec colname="message" align="left"/>
	  <colspec colname="cause" align="left"/>
	  <colspec colname="standard" align="left"/>
	  <thead valign="middle">
	    <row>
	      <entry>Code</entry>
	      <entry>Severity</entry>
	      <entry>Message</entry>
	      <entry>Typical Cause</entry>
	      <entry>Standard</entry>
	    </row>
	  </thead>
	  <tbody valign="middle">
	    <row xml:id="exception_abort">
	      <entry xml:id="exception_abort_code"><literal>-1</literal></entry>
	      <entry xml:id="exception_abort_severity">Error!</entry>
	      <entry xml:id="exception_abort_message"><wordasword>none</wordasword></entry>
	      <entry>Execution of <link linkend="word_abort"><command>ABORT</command></link></entry>
	      <entry morerows="5" rotate="1">ANSForth <citation>dpans94</citation></entry>
	    </row>
	    <row xml:id="exception_abort_quote">
	      <entry xml:id="exception_abort_quote_code"><literal>-2</literal></entry>
	      <entry xml:id="exception_abort_quote_severity">Error!</entry>
	      <entry xml:id="exception_abort_quote_message"><wordasword>user defined</wordasword></entry>
	      <entry>Execution of <link linkend="word_abort_quote"><command>ABORT&quot;</command></link></entry>
	    </row>
	    <row xml:id="exception_psof">
	      <entry xml:id="exception_psof_code"><literal>-3</literal></entry>
	      <entry xml:id="exception_psof_severity">Error!</entry>
	      <entry xml:id="exception_psof_message">Parameter stack overflow</entry>
	      <entry>Execution of the current word requires more stack space than available.</entry>
	    </row>
	    <row xml:id="exception_psuf">
	      <entry xml:id="exception_psuf_code"><literal>-4</literal></entry>
	      <entry xml:id="exception_psuf_severity">Error!</entry>
	      <entry xml:id="exception_psuf_message">Parameter stack underflow</entry>
	      <entry>Current words requires more stacked arguments than available</entry>
	    </row>
	    <row xml:id="exception_rsof">
	      <entry xml:id="exception_rsof_code"><literal>-5</literal></entry>
	      <entry xml:id="exception_rsof_severity">Error!</entry>
	      <entry xml:id="exception_rsof_message">Return stack overflow</entry>
	      <entry>Nesting level of executed words is too deep</entry>
	    </row>
	    <row xml:id="exception_rsuf">
	      <entry xml:id="exception_rsuf_code"><literal>-6</literal></entry>
	      <entry xml:id="exception_rsuf_severity">Error!</entry>
	      <entry xml:id="exception_rsuf_message">Return stack underflow</entry>
	      <entry>Uncareful return stack manipulations</entry>
	    </row>
	    <row>
	      <entry><literal>-7</literal></entry>
	      <entry namest="severity" nameend="cause" align="center">Unused</entry>
	    </row>
	    <row xml:id="exception_dictof">
	      <entry xml:id="exception_dictof_code"><literal>-8</literal></entry>
	      <entry xml:id="exception_dictof_severity">Error!</entry>
	      <entry xml:id="exception_dictof_message">Dictionary overflow</entry>
	      <entry>Current compilation requires more memory than available </entry>
	    </row>
	    <row>
	      <entry><literal>-9</literal></entry>
	      <entry namest="severity" nameend="cause" align="center">Unused</entry>
	    </row>
	    <row xml:id="exception_0div">
	      <entry xml:id="exception_0div_code"><literal>-10</literal></entry>
	      <entry xml:id="exception_0div_severity">Error!</entry>
	      <entry xml:id="exception_0div_message">Division by zero</entry>
	      <entry>The current arithmetic operation attempts to divide a number by zero</entry>
	    </row>
	    <row xml:id="exception_resor">
	      <entry xml:id="exception_resor_code"><literal>-11</literal></entry>
	      <entry xml:id="exception_resor_severity">Error!</entry>
	      <entry xml:id="exception_resor_message">Result out of range</entry>
	      <entry>The result of the current arithmetic operation exeeds the specified numeric range</entry>
	    </row>
	    <row>
	      <entry><literal>-12</literal></entry>
	      <entry namest="severity" nameend="cause" align="center">Unused</entry>
	    </row>
	    <row xml:id="exception_udefword">
	      <entry xml:id="exception_udefword_code"><literal>-13</literal></entry>
	      <entry xml:id="exception_udefword_severity">Error!</entry>
	      <entry xml:id="exception_udefword_message">Undefined word</entry>
	      <entry>The name that has been given as argument is not listed in the dictionary 
	      (see <link linkend="word_words"><command>WORDS</command></link>)</entry>
	    </row>
	    <row>
	      <entry><literal>-13</literal></entry>
	      <entry namest="severity" nameend="cause" align="center">Unused</entry>
	    </row>
	    <row xml:id="exception_componly">
	      <entry xml:id="exception_componly_code"><literal>-14</literal></entry>
	      <entry xml:id="exception_componly_severity">Error!</entry>
	      <entry xml:id="exception_componly_message">Compile-only word</entry>
	      <entry>Attempt to execute a word without interpretation semantics in interpretation state</entry>
	    </row>
	    <row>
	      <entry><literal>-15</literal></entry>
	      <entry namest="severity" nameend="cause" align="center">Unused</entry>
	    </row>
	    <row xml:id="exception_noname">
	      <entry xml:id="exception_noname_code"><literal>-16</literal></entry>
	      <entry xml:id="exception_noname_severity">Error!</entry>
	      <entry xml:id="exception_noname_message">Missing name argument</entry>
	      <entry>Required name argument is missing</entry>
	    </row>
	    <row xml:id="exception_padof">
	      <entry xml:id="exception_padof_code"><literal>-17</literal></entry>
	      <entry xml:id="exception_padof_severity">Error!</entry>
	      <entry xml:id="exception_padof_message">PAD overflow</entry>
	      <entry>Pictured numeric output requires more memory than available</entry>
	    </row>
	    <row xml:id="exception_strof">
	      <entry xml:id="exception_strof_code"><literal>-18</literal></entry>
	      <entry xml:id="exception_strof_severity">Error!</entry>
	      <entry xml:id="exception_strof_message">String too long</entry>
	      <entry>The parsed string exceeds the allowd character count</entry>
	    </row>
	    <row>
	      <entry><literal>-19 to -21</literal></entry>
	      <entry namest="severity" nameend="cause" align="center">Unused</entry>
	    </row>
	    <row xml:id="exception_ctrlstruc">
	      <entry xml:id="exception_ctrlstruc_code"><literal>-22</literal></entry>
	      <entry xml:id="exception_ctrlstruc_severity">Error!</entry>
	      <entry xml:id="exception_ctrlstruc_message">Control structure mismatch</entry>
	      <entry>The control structures in the current compilation do not match</entry>
	    </row>
	    <row>
	      <entry><literal>-23 to -28</literal></entry>
	      <entry namest="severity" nameend="cause" align="center">Unused</entry>
	    </row>
	    <row xml:id="exception_compnest">
	      <entry xml:id="exception_compnest_code"><literal>-29</literal></entry>
	      <entry xml:id="exception_compnest_severity">Error!</entry>
	      <entry xml:id="exception_compnest_message">Nested compilation</entry>
	      <entry>Attemt to start a definition within another one</entry>
	    </row>
	    <row>
	      <entry><literal>-30</literal></entry>
	      <entry namest="severity" nameend="cause" align="center">Unused</entry>
	    </row>
	    <row xml:id="exception_noncreate">
	      <entry xml:id="exception_noncreate_code"><literal>-31</literal></entry>
	      <entry xml:id="exception_noncreate_severity">Error!</entry>
	      <entry xml:id="exception_noncreate_message">Illegal operation on non-CREATEd definition</entry>
	      <entry>Illegal operation on a word, that has not been defined through 
	      <link linkend="word_variable"><command>VARIABLE</command></link>, 
	      <link linkend="word_constant"><command>CONSTANT</command></link>, or
	      <link linkend="word_create"><command>CREATE</command></link></entry>
	    </row>
	    <row>
	      <entry><literal>-32 to -39</literal></entry>
	      <entry namest="severity" nameend="cause" align="center">Unused</entry>
	    </row>
	    <row xml:id="exception_invalbase">
	      <entry xml:id="exception_invalbase_code"><literal>-40</literal></entry>
	      <entry xml:id="exception_invalbase_severity">Error!</entry>
	      <entry xml:id="exception_invalbase_message">Invalid BASE</entry>
	      <entry>Illegal radix value stored in <link linkend="word_base"><varname>BASE</varname></link> 
	      (valid radix values 1&lt;<link linkend="word_base"><varname>BASE</varname></link>&gt;27)</entry>
	    </row>
	    <row>
	      <entry><literal>-41 to -52</literal></entry>
	      <entry namest="severity" nameend="cause" align="center">Unused</entry>
	    </row>
	    <row xml:id="exception_cesf">
	      <entry xml:id="exception_cesf_code"><literal>-53</literal></entry>
	      <entry xml:id="exception_cesf_severity">Error!</entry>
	      <entry xml:id="exception_cesf_message">Corrupt exception stack frame</entry>
	      <entry>Uncareful return stack manipulations. This exception is not catchable if the the 
	      exception stack is truely corrupted. It is catchable if it was thrown manually be executing
	      <link linkend="word_throw"><command>THROW</command></link>.</entry>
	    </row>
	    <row>
	      <entry><literal>-55 to -58</literal></entry>
	      <entry namest="severity" nameend="cause" align="center">Unused</entry>
	    </row>
	    <row xml:id="exception_nomsg">
	      <entry xml:id="exception_nomsg_code"><literal>-59</literal></entry>
	      <entry xml:id="exception_nomsg_severity">Error!</entry>
	      <entry xml:id="exception_nomsg_message">Empty message string</entry>
	      <entry>No error message was given when compiling 
	      <link linkend="word_abort_quote"><command>ABORT&quot;</command></link>, 
	      <link linkend="word_error_quote"><command>ERROR&quot;</command></link>, or
	      <link linkend="word_abort_quote"><command>FATAL&quot;</command></link>.</entry>
	      <entry morerows="2" rotate="1"><emphasis>S12CForth</emphasis></entry>
	    </row>
	    <row xml:id="exception_dictprot">
	      <entry xml:id="exception_dictprot_code"><literal>-60</literal></entry>
	      <entry xml:id="exception_dictprot_severity">Error!</entry>
	      <entry xml:id="exception_dictprot_message">Destruction of dictionary structure</entry>
	      <entry>An operation was detected that would break the dictionary structure</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </section>
    <section xml:id="exceptions_user_throw_codes">
      <title>User-Defined Throw Codes</title>
      <para>
	In addition to the predefined errors, <emphasis>S12CForth</emphasis> supports the definition of 
	custom errors. These custom errors are defined by the words 
	<link linkend="word_error_quote"><command>ERROR&quot;</command></link> (for severity level <quote>Error!</quote>) and
	<link linkend="word_fatal_quote"><command>FATAL&quot;</command></link> (for severity level <quote>Fatal!</quote>):
      </para>
      <screen>
> error&quot; This is just a test&quot; ok <co xml:id="exceptions_user_throw_codes_co1"/>
> . 309B ok                                <co xml:id="exceptions_user_throw_codes_co2"/>
> 309B throw                               <co xml:id="exceptions_user_throw_codes_co3"/>
Error! This is just a test!
> : throw-fatal                            <co xml:id="exceptions_user_throw_codes_co4"/>
+ fatal&quot; This is another test&quot;
+ throw ; ok
> throw-fatal                              <co xml:id="exceptions_user_throw_codes_co5"/>
Fatal Error! Another test!
>
      </screen>
      <calloutlist>
	<callout arearefs="exceptions_user_throw_codes_co1">
	  <para>This defines new exception.</para>
	</callout>
	<callout arearefs="exceptions_user_throw_codes_co2">
	  <para>The throw code of the new exception is retured onto the parameter stack.</para>
	</callout>
	<callout arearefs="exceptions_user_throw_codes_co3">
	  <para><link linkend="word_throw"><command>THROW&quot;</command></link>ing this code invokes the 
	  default error handler, printing the associated error message.</para>
	</callout>
	<callout arearefs="exceptions_user_throw_codes_co4">
	  <para>New exception can also be defined within word definitions.</para>
	</callout>
	<callout arearefs="exceptions_user_throw_codes_co4">
	  <para>This will perform a system reset and print the error message after reinitialization.</para>
	</callout>
      </calloutlist>
    </section>
  </section>
</section>